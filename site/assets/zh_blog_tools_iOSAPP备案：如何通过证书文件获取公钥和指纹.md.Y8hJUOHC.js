import{_ as i,c as e,I as s,aU as p,o as t,E as n}from"./chunks/framework.CpXV_ol5.js";const f=JSON.parse('{"title":"iOS APP 备案那些事：分析如何通过证书文件获取公钥和指纹","description":"","frontmatter":{"title":"iOS APP 备案那些事：分析如何通过证书文件获取公钥和指纹"},"headers":[],"relativePath":"zh/blog/tools/iOSAPP备案：如何通过证书文件获取公钥和指纹.md","filePath":"zh/blog/tools/iOSAPP备案：如何通过证书文件获取公钥和指纹.md","lastUpdated":1725606759000}'),l={name:"zh/blog/tools/iOSAPP备案：如何通过证书文件获取公钥和指纹.md"},h=p(`<h2 id="一-背景" tabindex="-1">一. 背景 <a class="header-anchor" href="#一-背景" aria-label="Permalink to &quot;一. 背景&quot;">​</a></h2><p>首先说一下备案相关的一些事情，APP 为什么要备案？通常我们了解的只有网站备案，现在又出来了 APP 备案，它们是一回事吗？</p><p>2023 年 7 月 21 日，工业和信息化部发布了一篇关于开展移动互联网应用程序备案工作的通知，要求存量 APP 备案（2023 年 9 月-2024 年 3 月），主要包括安卓、iOS、小程序、快应用等移动端应用。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a86101487a224043a7a02a46ae5faef1~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=873&amp;h=138&amp;s=37181&amp;e=png&amp;b=f9f8f8" alt="image.png"></p><p>详情请查看：</p><p><a href="https://www.miit.gov.cn/zwgk/zcwj/wjfb/tz/art/2023/art_920db564162e4312916a01bed6540ad8.html" target="_blank" rel="noreferrer">工业和信息化部关于开展移动互联网应用程序备案工作的通知</a></p><p><a href="https://wap.miit.gov.cn/zwgk/zcjd/art/2023/art_9f3a1277fdcb42d68e1eacd37787ae04.html" target="_blank" rel="noreferrer">一图读懂 APP 备案</a></p><p>最近我们公司也要求了，要目前线上存在的 APP 尽快履行备案手续，保证在 2024 年 3 月之前备案成功，避免后期被应用商店下架的风险。</p><p>我们采取了阿里云备案，有专门的运维人员负责这一块，就在前几天，找我要一些备案的相关信息，主要有以下的相关信息进行提供：</p><ul><li>iOS Bundle ID</li><li>公钥</li><li>证书指纹</li></ul><p>如下图所示：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/49b017fe9466428ab4d50d2d73b2dd12~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=989&amp;h=545&amp;s=153413&amp;e=png&amp;b=fefdfd" alt="image.png"></p><h2 id="二-如何获取" tabindex="-1">二. 如何获取 <a class="header-anchor" href="#二-如何获取" aria-label="Permalink to &quot;二. 如何获取&quot;">​</a></h2><p>iOS Bundle ID，大家都很熟悉，就是应用包名，创建应用的时候我们就应该清楚。因此，从以上的信息得知，我们的难点在于怎么样获取应用公钥和证书指纹。我总结了以下几种方式：</p><h3 id="_1-通过-app-store-connect-获取" tabindex="-1">1. 通过 App Store Connect 获取 <a class="header-anchor" href="#_1-通过-app-store-connect-获取" aria-label="Permalink to &quot;1. 通过 App Store Connect 获取&quot;">​</a></h3><p>App Store Connect 苹果开发者中心可以获取应用 Bundle ID、公钥、证书指纹值。</p><ol><li>通过<strong>标识符</strong>获取应用的 Bundle ID</li><li>通过<strong>证书</strong>获取公钥以及证书指纹</li></ol><p>如下图所示</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/20e20aaf652d45798bd2367f895dc7dd~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1039&amp;h=751&amp;s=285060&amp;e=png&amp;b=fcfcfc" alt="image.png"></p><h3 id="_2-通过-mac-钥匙串访问证书获取" tabindex="-1">2. 通过 Mac 钥匙串访问证书获取 <a class="header-anchor" href="#_2-通过-mac-钥匙串访问证书获取" aria-label="Permalink to &quot;2. 通过 Mac 钥匙串访问证书获取&quot;">​</a></h3><p>仅限于 Mac 系统使用，直接使用钥匙串打开证书，输入证书密码，即可通过钥匙串访问证书的详细信息，包括<strong>签发者信息</strong>、<strong>公共密钥信息</strong>以及<strong>指纹信息</strong>（SHA-256、SHA-1），如下图所示：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec325a7da64d4d12b6373eac54a03778~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=699&amp;h=243&amp;s=53604&amp;e=png&amp;b=efefef" alt="image.png"></p><p>输入证书的密码即可查看到证书的相关信息：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5bc39fe083524d2e88fbf38c0c6552fe~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=739&amp;h=587&amp;s=79670&amp;e=png&amp;b=fcfcfc" alt="Snipaste_2023-11-29_09-19-21.png"></p><p>此方法简单快捷，在 Mac 系统下，只要拥有证书和密码，就可以方便的查看证书的公钥和指纹信息！</p><h3 id="_3-通过命令行工具获取" tabindex="-1">3. 通过命令行工具获取 <a class="header-anchor" href="#_3-通过命令行工具获取" aria-label="Permalink to &quot;3. 通过命令行工具获取&quot;">​</a></h3><p>以上的两种方式都可以很方便的查看证书的信息，接下来我们介绍第三种方案：使用命令行工具获取。</p><p>由于我们的 iOS 应用是由集团统一管理，个人的账号是没有权限查看这些信息的，只有 App 管理的权限，因此不能通过苹果开发者网站直接查看，如果你是 Windows 系统，也无法通过钥匙串访问，因此我们还可以通过使用命令行解析证书获取了公钥和指纹，使用的工具是 OpenSSL。</p><p>那么接下来我们先简单了解一下 OpenSSL 是什么以及如何使用吧。</p><h2 id="三-使用-openssl-解析证书" tabindex="-1">三. 使用 OpenSSL 解析证书 <a class="header-anchor" href="#三-使用-openssl-解析证书" aria-label="Permalink to &quot;三. 使用 OpenSSL 解析证书&quot;">​</a></h2><h3 id="_1-openssl-简介" tabindex="-1">1. OpenSSL 简介 <a class="header-anchor" href="#_1-openssl-简介" aria-label="Permalink to &quot;1. OpenSSL 简介&quot;">​</a></h3><p>OpenSSL 是一个开源的加密库，用于实现安全套接层（SSL）和输层安全（TLS）协议。它提供各种加密、解密、认证和安全通信功能，被广泛用于保护网络通和加密数据。</p><p>OpenSSL 只需要简单的命令就可以解析证书获取到公钥和指纹。下面我们来看一下是如何进行操作的。</p><p>OpenSSL采用C语言作为开发语言，这使得它具有优秀的跨平台性能，因此 OpenSSL支持：</p><ul><li>Linux</li><li>UNIX</li><li>Windows</li><li>Mac等平台</li></ul><h3 id="_2-windows-系统" tabindex="-1">2. Windows 系统 <a class="header-anchor" href="#_2-windows-系统" aria-label="Permalink to &quot;2. Windows 系统&quot;">​</a></h3><p>Windows 操作系统下直接访问以下链接，下载对应的安装包，按照指引安装即可：</p><p><a href="https://slproweb.com/products/Win32OpenSSL.html" target="_blank" rel="noreferrer">下载链接：https://slproweb.com/products/Win32OpenSSL.html</a></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee523b62685d4b41b357ba99efbd143e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=773&amp;h=294&amp;s=118057&amp;e=png&amp;b=fdfcfc" alt="image.png"></p><h3 id="_3-macos-系统" tabindex="-1">3. macOS 系统 <a class="header-anchor" href="#_3-macos-系统" aria-label="Permalink to &quot;3. macOS 系统&quot;">​</a></h3><p>苹果的 macOS 操作系统不再默认安装 OpenSSL，但你可以通过以下几种方法安装 OpenSSL：</p><h4 id="_1-使用-homebrew-安装" tabindex="-1">（1）使用 Homebrew 安装 <a class="header-anchor" href="#_1-使用-homebrew-安装" aria-label="Permalink to &quot;（1）使用 Homebrew 安装&quot;">​</a></h4><p>如果你已经安装了 Homebrew 包管理器，可以使用命令行终端执行以下命令安装 OpenSSL：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl</span></span></code></pre></div><p>安装完成后，你就可以在终端中使用 OpenSSL 相关命令了。</p><h4 id="_2-使用-macports-安装" tabindex="-1">（2）使用 MacPorts 安装 <a class="header-anchor" href="#_2-使用-macports-安装" aria-label="Permalink to &quot;（2）使用 MacPorts 安装&quot;">​</a></h4><p>如果你使用 MacPorts 包管理器，可以使用以下命令安装 OpenSSL：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl</span></span></code></pre></div><p>安装完成后，你就可以在终端中使用 OpenSSL 相关命令了。</p><h4 id="_3-手动编译安装" tabindex="-1">（3）手动编译安装 <a class="header-anchor" href="#_3-手动编译安装" aria-label="Permalink to &quot;（3）手动编译安装&quot;">​</a></h4><p>如果你喜欢手动编译安装，可以从 OpenSSL 官方网站（ <a href="https://www.openssl.org/" target="_blank" rel="noreferrer">https://www.openssl.org/</a> ）下载源代码，然后按照官方提供的编译安装指南进行安装。</p><p>在安装完成后，你可以使用 OpenSSL 命令行工具执行 SSL 相关操作，也可以在你的应用程序中使用 OpenSSL 进行加密和解密操作等。</p><h4 id="_4-验证是否安装成功" tabindex="-1">（4）验证是否安装成功 <a class="header-anchor" href="#_4-验证是否安装成功" aria-label="Permalink to &quot;（4）验证是否安装成功&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span></span></code></pre></div><p>如果成功安装，将显示 OpenSSL 的版本信息。</p><h2 id="四-提取公钥和-md5-指纹" tabindex="-1">四. 提取公钥和 MD5 指纹 <a class="header-anchor" href="#四-提取公钥和-md5-指纹" aria-label="Permalink to &quot;四. 提取公钥和 MD5 指纹&quot;">​</a></h2><h3 id="_1-提取证书" tabindex="-1">1. 提取证书 <a class="header-anchor" href="#_1-提取证书" aria-label="Permalink to &quot;1. 提取证书&quot;">​</a></h3><p>使用以下命令从 “<strong>.p12</strong>” 文件中提取证书文件，并将其保存为单独的文件。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pkcs12</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Certificate.p12</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -clcerts</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -nokeys</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MyCertificate.crt</span></span></code></pre></div><p>这条命令的作用是操作 PKCS#12 格式的证书文件，并将其中的（certificates）提取出来，保存为 CRT 格式的证书文件中，私钥将不包含在输出文件中。让我们对这个命令进行分解解析：</p><ul><li><code>pkcs12</code>: 指定了要执行 PKCS#12 操作。</li><li><code>-in Certificate.p12</code>: 指定了输入的证书文件，文件名为 Certificate.p12。注意，这个文件应该是 PKCS#12 格式的证书文件。</li><li><code>-clcerts</code>: 表示只保存其中的凭证（certificates），而不包括私钥（private keys）。</li><li><code>-nokeys</code>: 表示不包括私钥（private keys）。</li><li><code>-out MyCertificate.crt</code>: 指定了输出的文件名，即提取出来的凭证将保存为 MyCertificate.crt 文件，该文件是 CRT 格式的证书文件。</li></ul><p>命令执行后，会等待我们输入密码后，将提取证书并将其保存为“<strong>MyCertificate.crt</strong>”文件，如下图所示：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/417de29bc2694a9d833e0471135f49e7~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=585&amp;h=371&amp;s=42787&amp;e=png&amp;b=191919" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/277e9ef231464c2c92cc685c5bbef387~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=585&amp;h=212&amp;s=16020&amp;e=png&amp;b=fefefe" alt="image.png"></p><h3 id="_2-获取证书指纹" tabindex="-1">2. 获取证书指纹 <a class="header-anchor" href="#_2-获取证书指纹" aria-label="Permalink to &quot;2. 获取证书指纹&quot;">​</a></h3><p>通过上一步输出的 CRT 格式的证书文件，使用以下命令获取证书的 MD5 指纹 和 SHA-1 指纹。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># MD5 指纹</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -noout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fingerprint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -md5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -inform</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MyCertificate.crt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># SHA-1 指纹</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -noout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fingerprint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sha1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -inform</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MyCertificate.crt</span></span></code></pre></div><p>这条命令的主要作用是对该证书文件进行指纹（fingerprint）计算，并将结果以声明的算法的格式进行输出。下面对这个命令进行分解解析：</p><ul><li><code>x509</code>: 指定了要 X.509 格式的书进行操作。</li><li><code>-noout</code>: 表示输出证书本身的内容，只输出指定的信息。</li><li><code>-fingerprint</code>: 指定计算证书的指纹（fingerprint）。</li><li><code>-md5</code>: 指定使用 MD5 哈希算法来计算指纹。</li><li><code>-sha1</code>: 指定使用 SHA-1 算法来计算指纹。</li><li><code>-inform pem</code>: 指定输入证书文件的格式为 PEM 格式。</li><li><code>-in MyCertificate.crt</code> 指定了的证书文件，文件为 MyCertificate.crt。</li></ul><p>运行上面命令后将输出证书的指纹，可以从中获取 MD5 值和 SHA-1 值，如下图所示：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2338397d4e5b4c7bbd3444959a11b4a2~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=585&amp;h=371&amp;s=42516&amp;e=png&amp;b=181818" alt="image.png"></p><h3 id="_3-获取公钥" tabindex="-1">3. 获取公钥 <a class="header-anchor" href="#_3-获取公钥" aria-label="Permalink to &quot;3. 获取公钥&quot;">​</a></h3><p>使用以下命令从证书中提取公钥，提取私钥并将其保存为&#39;PublicKey.pem&#39;文件。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -pubkey</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -noout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -inform</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MyCertificate.crt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PublicKey.pem</span></span></code></pre></div><p>这条命令的作用是从指定证书文件中提取出公钥，并将提取的公钥内容保存到一个新的 PEM 格式的文件 PublicKey.pem 中。下面对这个命令进行分解解析：</p><ul><li><code>x509</code>: 指定了要对 X.509 格式的证书进行操作。</li><li><code>-pubkey</code>: 表示提取证书中的公钥。</li><li><code>-noout</code>: 表示不输出证书本身的内容，只输出提取的公钥。</li><li><code>-inform pem</code>: 指定输入证书文件的格式为 PEM 格式。</li><li><code>-in MyCertificate.crt</code>: 指定了要操作的证书文件，文件名为 MyCertificate.crt。</li><li><code>&gt; PublicKey.pem</code>: 将提取的公钥内容重定向（redirect）到一个新的文件 PublicKey.pem 中。</li></ul><p>运行以上的命令就可以提取证书的公钥并将其保存“<strong>PublicKey.pem</strong>”文件，将 <code>.pem</code> 后缀修改为 <code>.txt</code> 即可查看公钥，如下图所示：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a4aed7f0fa84a448aa6f2a013854fb5~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=585&amp;h=196&amp;s=18523&amp;e=png&amp;b=fdfdfd" alt="image.png"></p><h3 id="_4-获取成功" tabindex="-1">4. 获取成功 <a class="header-anchor" href="#_4-获取成功" aria-label="Permalink to &quot;4. 获取成功&quot;">​</a></h3><p>现在，已经通过“<strong>.p12</strong>”证书文件成功获取了公钥和 MD5。请注意，上述命令中的文件名需要根据自己的实际情况进行调整。</p><h2 id="五-总结" tabindex="-1">五. 总结 <a class="header-anchor" href="#五-总结" aria-label="Permalink to &quot;五. 总结&quot;">​</a></h2><p>通过这篇文章的总结，我们了解了如何通过证书文件获取到公钥和指纹，常用的主要有两种方式：</p><ul><li>通过 App Store Connect 网站获取，苹果的官方网站，简单快捷。</li><li>通过钥匙串访问证书获取，仅限于 macOS。</li><li>通过 OpenSSL 工具获取，只要对命令行熟悉也能快速获取，支持 Windows 和 macOS。</li></ul><p>我们主要分析了通过以上三种方式获取，其中重点对 OpenSSL 这个工具获取命令进行了相关解析，既解决了我们的问题，同时也学习到了命令行中几个命令的含义，两全其美。</p><p>以上就是最近在进行 iOS APP 备案中，如何通过证书文件获取公钥和指纹总结来的一些经验。</p>`,85);function r(o,c,d,k,m,g){const a=n("ArticleFooter");return t(),e("div",null,[h,s(a,{link:"https://juejin.cn/post/7304858521627852810"})])}const u=i(l,[["render",r]]);export{f as __pageData,u as default};
