import{_ as i,c as a,I as n,aU as l,o as p,E as h}from"./chunks/framework.CpXV_ol5.js";const F=JSON.parse('{"title":"Vue 自定义指令实战：掌握高级前端开发技巧","description":"","frontmatter":{"title":"Vue 自定义指令实战：掌握高级前端开发技巧"},"headers":[],"relativePath":"zh/blog/vuejs2/Vue自定义指令实战：掌握高级前端开发技巧.md","filePath":"zh/blog/vuejs2/Vue自定义指令实战：掌握高级前端开发技巧.md","lastUpdated":1727083629000}'),e={name:"zh/blog/vuejs2/Vue自定义指令实战：掌握高级前端开发技巧.md"},t=l(`<h1 id="vue-自定义指令实战-掌握高级前端开发技巧" tabindex="-1">Vue 自定义指令实战：掌握高级前端开发技巧 <a class="header-anchor" href="#vue-自定义指令实战-掌握高级前端开发技巧" aria-label="Permalink to &quot;Vue 自定义指令实战：掌握高级前端开发技巧&quot;">​</a></h1><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>Vue 自定义指令是 Vue.js 框架中强大而灵活的功能之一，它允许开发者根据具体需求创建自定义的指令，以实现更加精细化的交互和数据绑定效果。本文将带你深入探索 Vue 自定义指令的使用方法、原理和实战，为你打开前端开发的新视野。</p><p>我们前面几篇文章已经简单介绍了自定义指令的基础，主要介绍指令的概念和常见的内置指令，帮助你理解指令的作用和使用方法：</p><p>本篇文章，我们将深入剖析自定义指令的实现原理，探讨指令的生命周期钩子和参数选项，为你解锁更高级的自定义指令技巧。</p><p>通过本篇文章的学习，你将学习到如何创建简单的自定义指令，如何与<code>DOM</code>元素进行交互，以及如何利用指令实现自己想要的效果。我们还将分享一些实用的案例和技巧，帮助你在实际项目中更好地应用自定义指令。</p><p>无论你是初学者还是有一定经验的开发者，都能从本文中获得实用的知识和技巧。让我们一起探索 Vue 自定义指令的奥秘，提升我们的前端开发技能吧！</p><h2 id="一-概述" tabindex="-1">一. 概述 <a class="header-anchor" href="#一-概述" aria-label="Permalink to &quot;一. 概述&quot;">​</a></h2><p>Vue 自定义指令是 <code>Vue.js</code> 框架提供的一项强大功能，它允许开发者根据自己的需求，定义全局或局部指令，以便在 <code>DOM</code> 元素上添加特定的行为和功能。</p><p>自定义指令的主要作用是扩展 <code>Vue.js</code> 框架的能力，以满足特定的业务需求。通过自定义指令，我们可以在不更改组件逻辑的情况下，直接操作 <code>DOM</code> 元素，并与 <code>DOM</code> 元素进行交互。</p><p>自定义指令具有广泛的用途和许多优势，通过自定义指令，可以实现更丰富的交互和功能，可以操作 <code>DOM</code>、<strong>实现数据绑定和交互</strong>、<strong>进行表单验证</strong>、<strong>集成第三方库</strong>等，从而<strong>优化代码</strong>、<strong>提高复性</strong>，并<strong>解耦视图和逻辑</strong>。</p><h2 id="二-基本语法" tabindex="-1">二. 基本语法 <a class="header-anchor" href="#二-基本语法" aria-label="Permalink to &quot;二. 基本语法&quot;">​</a></h2><p>Vue 自定义指令包括两种方式，<strong>全局注册</strong>和<strong>局部注册</strong>两种方式：</p><p><strong>全局注册自定义指令：</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;directiveName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Directive options</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><strong>局部注册自定义指令：</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directives</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  directiveName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Directive options</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上述两种注册方式中，<code>directiveName</code> 是自定义指令的名称，可以自定义命名。</p><p>下面是一个简单的例子，展示了一个简单的自定义指令，用于<strong>改变元素的背景颜色</strong>，提前目睹一下自定义指令的风采：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bg-color&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    el.style.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> binding.value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>使用自定义指令：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-bg-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&#39;red&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Custom directive&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/32c0239ce5f84f03bcf9b75bb93816d4~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1074&amp;h=346&amp;s=17001&amp;e=png&amp;b=ffffff" alt="image.png"></p><p>上述示例中，<code>v-bg-color</code>是自定义指令的使用方式，并通过<code>binding.value</code>获取到绑定值，然后将其应用于元素的背景颜色。</p><p>通过以上两种注册指令的语法结构，我们可以轻松自定义和使用指令，并根据需要执行相应的 <code>DOM</code> 操作。接下来我们会对自定义指令的生命周期钩子函数进行详细的解读。</p><h2 id="三-生命周期" tabindex="-1">三. 生命周期 <a class="header-anchor" href="#三-生命周期" aria-label="Permalink to &quot;三. 生命周期&quot;">​</a></h2><p><strong>钩子函数</strong></p><p>Vue 自定义指令在使用时可以调用一些特定的生命周期钩子函数，用于在不同的阶段执行相应的操作。以下是 Vue 自定义指令的生命周期钩子函数的顺序：</p><ol><li><p><code>bind</code>：当指令第一次绑定到元素时调用在这个阶段可以进行一些初始化的设置，比如绑定事件监听器或进行一次性的 <code>DOM</code> 操作。</p></li><li><p><code>inserted</code>：在指令所在的元素被插入到父元素时调用。如果指令所在的元素是父元素的唯一子节点，那么它将在父元素进行 <code>DOM</code> 插入操作之后立即调用。</p></li><li><p><code>update</code>：在指令所在组件的 <code>VNode</code> 更新时调用，但可能会在子组件的 <code>VNode</code> 更新之前触发。可以在这个阶段根据需要更新绑定元素的属性或执行其他操作。</p></li><li><p><code>componentUpdated</code>：在指令所在组件的 <code>VNode</code> 及其子组件的 <code>VNode</code> 均进行了更新后调用。</p></li><li><p><code>unbind</code>：在指令从元素上解绑时调用。在这个阶段可以进行一些清理工作，比如解绑事件监听器或删除 <code>DOM</code> 操作。</p></li></ol><p>需要注意的是，<code>inserted</code> 和 <code>update</code> 钩子函数的调用顺序可能会在 Vue 的更新周期中会有所不同如果需要处理执行顺序相关的逻辑，可以根据具体需求选择合适的钩子函数进行操作。</p><p>以前面的演示示例为例<code>v-bg-color</code>，我们升级一下逻辑，以便于我们更好的观察一下指令的生命周期执行顺序：</p><ol><li>元素初始的背景颜色为<strong>红色</strong></li><li>在<strong>3 秒后</strong>将背景颜色为<strong>蓝色</strong></li></ol><p>在此期间可以观察生命周期的钩子函数执行顺序，同时也可以看一下在自定义指令的生命周期的使用：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;directiveName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 指令绑定时的初始化操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    el.style.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> binding.value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bind&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  inserted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 元素插入到父元素的操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;inserted&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 更新指令绑定元素的操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;update&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    el.style.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> binding.value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentUpdated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 组件及其子组件都更新后的操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;componentUpdated&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  unbind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 解绑指令时的清理工作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;unbind&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0896ba0a439d427eab90190661da0b64~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=993&amp;h=257&amp;s=20236&amp;e=gif&amp;f=5&amp;b=fefefe" alt="0914-1.gif"> 从日志输出的顺序来看：钩子函数的执行顺序为：<code>bind</code>、<code>inserted</code>，如果指令期间在更新的话执行<code>update</code>、<code>componentUpdated</code>进行更新，指令解绑时执行<code>unbind</code>，至此指令生命周期完结</p><p>通过自定义指令的生命周期钩子函数，你可以在不同的阶段执行相应的操作，以实现一些特定的指令功能和行为。这为你提供了更大的灵活性和控制权。</p><h2 id="四-自定义指令参数" tabindex="-1">四. 自定义指令参数 <a class="header-anchor" href="#四-自定义指令参数" aria-label="Permalink to &quot;四. 自定义指令参数&quot;">​</a></h2><p>在 Vue 中，自定义指令可以接收多个参数，这些参数可以根据需要来传递和使用。下面介绍一些常用的自定义指令参数：</p><ol><li><p><code>el</code>：指令所绑定的元素，可以通过操作<code>el</code>来直接改变元素的样式、属性等。</p></li><li><p><code>binding</code>：一个对象，包含以下属性：</p><ul><li><code>value</code>：传递给指令的值，可以是一个绑定的表达式的结果，也可以是一个值。</li><li><code>arg</code>：指令的参数，可以是一个静态值或是一个态绑定的表达式。</li><li><code>modifiers</code>：一个包含修饰符的对象，用于递给指令的修饰符，可以通过<code>binding.modifiers</code>来获取。</li><li><code>expression</code>：指令的表达式字符串。</li></ul></li><li><p><code>vnode</code>：Vue 编译生成的虚拟节点（VNode），可以访问和操作 VNode 的属性和方法。</p></li><li><p><code>oldVnode</code>：上一个虚拟节点（仅在<code>update</code>和<code>componentUpdated</code>钩子函数中可用），可以用来比较新旧虚拟节点的差异。</p></li><li><p><code>arg</code>：指的参数，与<code>binding.arg</code>相同，可以用来传递和接收静态值或动态绑定的表达式。</p></li><li><p><code>modifiers</code>：用于传递给指令的修饰符，例如<code>v-directive.modifier1.modifier2</code>，可以<code>binding.modifiers</code>来获取。</p></li></ol><p>在自定义指令的钩子函数中，可以通过函数的参数列表来接收这些参数，以便根据进行处理和使用。</p><p>以下是一个示例，展示了在定义指令时如何使用这些参数：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myDirective&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldVnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 指令绑定时的操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(binding.value) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印传递给指令的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(binding.arg) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印指令的参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(binding.modifiers) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印指令的饰符</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    el.style.color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;red&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 改变绑定元素的颜色</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldVnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 指令更新时的操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(binding.expression) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印指令的表达式字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(binding.oldValue) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印旧的绑定值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    el.style.fontSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> binding.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;px&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 根据递的值改变绑定元素的字体大小</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (binding.modifiers.bold) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      el.style.fontWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bold&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 如果有修饰符，则设置字体为粗体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>通过传递和使用这些参数，你可以根据需要在自定义指令的钩子函数中进行相应的操作，实现不同的指令功能和行为。</p><h2 id="五-自定义指令实例" tabindex="-1">五. 自定义指令实例 <a class="header-anchor" href="#五-自定义指令实例" aria-label="Permalink to &quot;五. 自定义指令实例&quot;">​</a></h2><p><strong>示例：自定义一个限制输入只能是数字的指令</strong></p><p>要自定义一个限制输入只能是数字的指令，可以通过 Vue 自定义指令的<code>bind</code>和<code>update</code>生命周期钩子函数来实现。如下所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;number-only&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 获取输入框的值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inputValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.target.value</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 使用正则表达式判断输入是否为数字</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> formattedValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inputValue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 更新输入框的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      event.target.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> formattedValue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在更新时绑定同样的事件处理程序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inputValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.target.value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> formattedValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inputValue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      event.target.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> formattedValue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>在<code>bind</code>和<code>update</code>生命周期钩子函数中，我们通过<code>addEventListener</code>监听输入框的<code>input</code>事件，并在事件处理函数中进行处理。使用正则表达式<code>/[^\\d]/g</code>可以将除之外的字符替换为空字符串，从而限制输入<strong>只能是数字</strong>。</p><p>使用自定义指令<code>v-number-only</code>可以将该指令应用到相应的输入框上：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-number-only</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>这样，输入框中的文本将被限制为数字，非数字将被自动过滤掉。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b6ff24c6e5e34ef89be5359d2437ac3e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=720&amp;h=232&amp;s=8892&amp;e=gif&amp;f=28&amp;b=fdfdfd" alt="0914-1.gif"></p><p>从演示的效果图中可以看出：输入框只能输入数字，如果输入其他的字符，输入框将没有任何显示。是由于我们在代码中会监听用户的输入，将不符合定义规范的字符串统一替换成了空字符串。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>Vue 自定义指令的核心知识点主要包括以下几个方面：</p><ol><li><p><strong>注册指令</strong>：使用<code>Vue.directive</code>方法注册指令，并提一个包含钩子函数的对象作为参数。可以全局注册指令，也可以在组件内部注册指令。</p></li><li><p><strong>钩子函数</strong>：自定义指令可以使用的钩子函数包括<code>bind</code>、<code>inserted</code>、<code>update</code>、<code>componentUpdated</code>和<code>unbind</code>。这些钩子函数在指令的不同生命周期中执行相应的逻辑。</p></li><li><p><strong>参数传递</strong>：可以使用指令的参数传递数据或选。使用<code>.</code>来指定参数，例如<code>v-my-direct:arg.modifier</code>。在钩子函数中，可以通过<code>binding</code>参数访问指令的参数。</p></li><li><p><strong>操作元素</strong>：可以通过<code>el</code>参数访问指令绑定的元素，可以操作元素的属性、样式、class 等。</p></li><li><p><strong>绑定值</strong>：可以通过<code>binding.value</code>来获取指令绑定的值，也可以通过<code>binding.oldValue</code>来获取之前绑定值。在钩子函数中，可以根据绑定值的变化执行相应的逻辑。</p></li><li><p><strong>更新元素</strong>：在钩子函数中，可以通过<code>el</code>、<code>binding</code>和<code>node</code>等参数来更新元素的状态样式或属性。</p></li><li><p><strong>释放资源</strong>：确保在指令解绑时释放相应资源，避免内存泄漏。在<code>unbind</code>钩子函数中，可以移除事件监听、定时器或其他可能导致资源泄漏的操作。</p></li></ol><p>综上所述，掌握上述核心知识点能够帮助我们更好地理解和使用 Vue 自定义指令，实现各种自定义功能，增强我们的 Vue 应用的灵活性和可复用性。</p>`,57);function k(d,E,r,g,o,c){const s=h("ArticleFooter");return p(),a("div",null,[t,n(s,{link:"https://juejin.cn/post/7279056679563870208"})])}const u=i(e,[["render",k]]);export{F as __pageData,u as default};
