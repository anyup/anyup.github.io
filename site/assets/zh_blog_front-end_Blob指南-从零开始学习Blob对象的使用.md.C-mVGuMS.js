import{_ as i,c as a,I as l,aU as n,o as h,E as p}from"./chunks/framework.CpXV_ol5.js";const b=JSON.parse('{"title":"Blob 学习指南：从零开始学习 JavaScript Blob 对象的使用","description":"","frontmatter":{"title":"Blob 学习指南：从零开始学习 JavaScript Blob 对象的使用"},"headers":[],"relativePath":"zh/blog/front-end/Blob指南-从零开始学习Blob对象的使用.md","filePath":"zh/blog/front-end/Blob指南-从零开始学习Blob对象的使用.md","lastUpdated":1727083629000}'),t={name:"zh/blog/front-end/Blob指南-从零开始学习Blob对象的使用.md"},k=n(`<h1 id="blob-学习指南-从零开始学习-javascript-blob-对象的使用" tabindex="-1">Blob 学习指南：从零开始学习 JavaScript Blob 对象的使用 <a class="header-anchor" href="#blob-学习指南-从零开始学习-javascript-blob-对象的使用" aria-label="Permalink to &quot;Blob 学习指南：从零开始学习 JavaScript Blob 对象的使用&quot;">​</a></h1><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/80aaddfe412d486da9dbf486d54e0820~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=750&amp;h=315&amp;s=130779&amp;e=png&amp;b=e2793c" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68d0cf40b6ed4e1985a73cf740ec9aba~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1193&amp;h=672&amp;s=146223&amp;e=png&amp;b=fefefe" alt="image.png"></p><h2 id="一-前言" tabindex="-1">一. 前言 <a class="header-anchor" href="#一-前言" aria-label="Permalink to &quot;一. 前言&quot;">​</a></h2><p>当我们在处理前端开发任务时，经常会涉及到处理各种类型的数据，如文本、图片、音视频等。而 JavaScript 中的 Blob 对象提供了一种便捷的方式来操作和处理这些数据。Blob 对象可以将不同类型的数据进行封装，并提供了一系列方法和属性，使得我们能够轻松地对数据进行处理和传输。</p><p>在本篇文章中，我们将从 Blob 对象的基本概念开始，到如何使用 Blob 对象处理文件，以及如何创建和销毁 Blob URL，我们将对 Blob 对象有一个全方位的认识。此外，我们也将会探讨如何合理使用并处理 Blob 对象，以避免内存泄漏和其他性能问题。</p><p>通过上面脑图的认识，学习完 Blob，我们将了解到如何使用 Blob 对象来处理不同类型的数据，如何在前端开发中使用它进行文件操作，以及注意事项和最佳实践。最终通过 Blob 对象的灵活性和便利性在某些场景下提供更优秀的解决方案思路。下面我们从 Blob 的概念开始认识它吧！</p><h2 id="二-blob-是什么" tabindex="-1">二. Blob 是什么 <a class="header-anchor" href="#二-blob-是什么" aria-label="Permalink to &quot;二. Blob 是什么&quot;">​</a></h2><p>Blob（Binary Large Object）是一种数据类型，表示二进制大对象。它可以用来存储和处理大量的二进制数据，比如图像、音频、视频、文件等。</p><p>Blob 对象通常用于在浏览器中处理和传输数据，可以在客户端进行文件上传和下载、图像处理和展示、音视频播放等操作。它是一种灵活且高效的数据类型，可以方便地处理二进制数据，同时也为网络数据传输提供了便捷的方式。</p><p>在 JavaScript 中，Blob 对象提供了一些方法和属性来操作和处理存储的二进制数据，比如获取数据大小、数据类型、分割和合并数据等。同时，Blob 对象也可以通过 File 接口进行扩展，用于处理文件对象。通过 Blob 对象，可以实现实时文件上传和下载，以及在浏览器端对二进制数据进行处理和展示。</p><p><strong>特点</strong></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22e91222845e40a59daa8dccc2691ac8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1321&amp;h=350&amp;s=103819&amp;e=png&amp;b=fefefe" alt="image.png"></p><p>如上图所示，Blob 对象具有以下特点：</p><ol><li><p><strong>数据封装</strong>：Blob 对象可以将任意类型的数据进行封装，包括文本、二进制、音频、视频等。它提供了一种统一的数据形式，方便存储和传输各种类型的数据。</p></li><li><p><strong>不可变性</strong>：Blob 对象一旦创建，其数据是不可更改的。也就是说，你不能直接修改 Blob 对象中的数据，但可以通过复制和拼接等方式创建新的 Blob 对象。</p></li><li><p><strong>跨域支持</strong>：Blob 对象可以跨域使用。这意味着你可以在当前页面创建 Blob 对象，并将它传递给其他域名的页面或服务器，实现跨域数据传递。</p></li><li><p><strong>可用于文件操作</strong>：Blob 对象可以模拟文件对象，提供了一系列与文件相关的方法和属性，如获取文件类型、大小、最后修改时间等。这使得在前端处理文件时更加灵活和简便。</p></li><li><p><strong>可转换为 URL</strong>：通过调用 <code>URL.createObjectURL()</code> 方法，可以将 Blob 对象生成一个唯一的 URL，以便在页面中使用。这大大简化了在浏览器中处理 Blob 对象的操作。</p></li><li><p><strong>可用于网络请求</strong>：Blob 对象可以作为请求的参数或响应的结果，在网络传输过程中非常方便。你可以将 Blob 对象直接发送给服务器，也可以从服务器接收 Blob 对象作为响应数据。</p></li></ol><p>总体而言，Blob 对象的灵活性和便利性的特点使得 Blob 对象在前端开发中有广泛的应用。接下来，我们看一下在开发中如何创建和操作 Blob 吧。</p><h2 id="三-如何创建-blob" tabindex="-1">三. 如何创建 Blob <a class="header-anchor" href="#三-如何创建-blob" aria-label="Permalink to &quot;三. 如何创建 Blob&quot;">​</a></h2><p>要创建 Blob 对象，你可以使用以下几种方法：</p><h3 id="_1-使用-blob-构造函数" tabindex="-1">1. 使用 Blob 构造函数 <a class="header-anchor" href="#_1-使用-blob-构造函数" aria-label="Permalink to &quot;1. 使用 Blob 构造函数&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> blob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Blob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array, options)</span></span></code></pre></div><ul><li><p><code>array</code>参数是一个数组，用于存储 Blob 对象的数据内容。它可以包含多种数据类型，如字符串、ArrayBuffer、ArrayBufferView、Blob 等。</p></li><li><p><code>options</code>参数是一个可选的对象，用于指定其他属性，比如 MIME 类型等。</p></li></ul><p>示例：创建了一个包含文本数据的 Blob 对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> blob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Blob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parts, options)</span></span></code></pre></div><h3 id="_2-使用-blobbuilder-在老版本的浏览器中" tabindex="-1">2. 使用 BlobBuilder（在老版本的浏览器中）： <a class="header-anchor" href="#_2-使用-blobbuilder-在老版本的浏览器中" aria-label="Permalink to &quot;2. 使用 BlobBuilder（在老版本的浏览器中）：&quot;">​</a></h3><p>使用 BlobBuilder 来创建 Blob 对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BlobBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> blob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBlob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>请注意，在现代的浏览器中，BlobBuilder 已被弃用，建议使用 Blob 构造函数。</p><h2 id="四-blob-常见操作" tabindex="-1">四. Blob 常见操作 <a class="header-anchor" href="#四-blob-常见操作" aria-label="Permalink to &quot;四. Blob 常见操作&quot;">​</a></h2><p>Blob 对象有一些常见的操作，包括：获取 Blob 的大小和类型，读取相关数据，切片操作，转换为其它格式，我们分别看一下是如何操作的。</p><h3 id="_1-获取-blob-对象的大小" tabindex="-1">1. 获取 Blob 对象的大小 <a class="header-anchor" href="#_1-获取-blob-对象的大小" aria-label="Permalink to &quot;1. 获取 Blob 对象的大小&quot;">​</a></h3><p>使用 <code>size</code> 属性可以获取 Blob 对象的大小，单位为字节。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> blob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Blob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parts, options)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blob.size</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(size) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 Blob 对象的大小</span></span></code></pre></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01777c03058e40118429d813d7437759~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=874&amp;h=155&amp;s=38451&amp;e=png&amp;b=fdfdfd" alt="image.png"></p><h3 id="_2-获取-blob-对象的类型" tabindex="-1">2. 获取 Blob 对象的类型 <a class="header-anchor" href="#_2-获取-blob-对象的类型" aria-label="Permalink to &quot;2. 获取 Blob 对象的类型&quot;">​</a></h3><p>使用 <code>type</code> 属性可以获取 Blob 对象的 MIME 类型。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> blob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Blob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parts, options)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blob.type</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 Blob 对象的类型</span></span></code></pre></div><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/917750acbab0476bbe49833e15083e3f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=874&amp;h=155&amp;s=39654&amp;e=png&amp;b=fdfdfd" alt="image.png"></p><h3 id="_3-读取-blob-对象的数据" tabindex="-1">3. 读取 Blob 对象的数据 <a class="header-anchor" href="#_3-读取-blob-对象的数据" aria-label="Permalink to &quot;3. 读取 Blob 对象的数据&quot;">​</a></h3><p>可以使用 FileReader 对象来读取 Blob 对象的数据。通过调用 <code>readAsText()</code>、<code>readAsArrayBuffer()</code>、<code>readAsDataURL()</code> 方法，可以将 Blob 对象的数据转换为文本、ArrayBuffer 或 Data URL。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reader.result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出读取到的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readAsText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blob) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以文本格式读取 Blob 对象的数据</span></span></code></pre></div><h3 id="_4-切片-blob-对象" tabindex="-1">4. 切片 Blob 对象 <a class="header-anchor" href="#_4-切片-blob-对象" aria-label="Permalink to &quot;4. 切片 Blob 对象&quot;">​</a></h3><p>可以使用 <code>slice()</code> 方法将 Blob 对象切片成多个片段。该方法接受起始位置和结束位置作为参数，返回切片后的 Blob 对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> end</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> slice</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blob.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(start, end)</span></span></code></pre></div><h3 id="_5-转换-blob-对象为其他格式" tabindex="-1">5. 转换 Blob 对象为其他格式 <a class="header-anchor" href="#_5-转换-blob-对象为其他格式" aria-label="Permalink to &quot;5. 转换 Blob 对象为其他格式&quot;">​</a></h3><p>可以通过调用 <code>blob.arrayBuffer()</code>、<code>blob.text()</code>、<code>blob.stream()</code> 方法将 Blob 对象转换为 ArrayBuffer、文本或可读流。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">blob.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arrayBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arrayBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arrayBuffer) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 ArrayBuffer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">blob.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出文本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readableStream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blob.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(readableStream) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出可读流</span></span></code></pre></div><h3 id="_6-创建-url-对象" tabindex="-1">6. 创建 URL 对象 <a class="header-anchor" href="#_6-创建-url-对象" aria-label="Permalink to &quot;6. 创建 URL 对象&quot;">​</a></h3><p>可以使用 <code>URL.createObjectURL()</code> 方法将 Blob 对象转换为可供下载或展示的 URL 对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> blob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Blob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parts, options)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createObjectURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blob)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 URL 对象</span></span></code></pre></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0170b9b5682f401f955a9e98625fe3ec~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=874&amp;h=139&amp;s=22860&amp;e=png&amp;b=fefefe" alt="image.png"></p><p>需要注意的是，使用完 Blob 对象后，为了释放资源，需要调用 <code>URL.revokeObjectURL()</code> 方法来释放创建的 URL 对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">revokeObjectURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url)</span></span></code></pre></div><p>这些是 Blob 对象的常见操作，根据具体的需选择相应的方法来处理 Blob 对象。</p><h2 id="五-blob-的读取和使用" tabindex="-1">五. Blob 的读取和使用 <a class="header-anchor" href="#五-blob-的读取和使用" aria-label="Permalink to &quot;五. Blob 的读取和使用&quot;">​</a></h2><p>读取和使用 Blob 对象有以下几种常见方式：</p><h3 id="_1-文本数据读取" tabindex="-1">1. 文本数据读取 <a class="header-anchor" href="#_1-文本数据读取" aria-label="Permalink to &quot;1. 文本数据读取&quot;">​</a></h3><p>可以使用 <code>FileReader</code> 对象来读取 Blob 对象中的文本数据。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reader.result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Read Success：&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出读取到的文本数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/plain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> blob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Blob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parts, options)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readAsText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blob) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以文本格式读取 Blob 对象的数据</span></span></code></pre></div><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b48149bdd8394e7dacba15f8682a0762~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=874&amp;h=126&amp;s=18931&amp;e=png&amp;b=ffffff" alt="image.png"></p><h3 id="_2-二进制数据读取" tabindex="-1">2. 二进制数据读取 <a class="header-anchor" href="#_2-二进制数据读取" aria-label="Permalink to &quot;2. 二进制数据读取&quot;">​</a></h3><p>如果 Blob 对象包含二进制数据，可以使用 <code>FileReader</code> 对象的 <code>readAsArrayBuffer()</code> 方法将其读取为 <code>ArrayBuffer</code> 对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arrayBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reader.result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arrayBuffer) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出读取到的二进制数据（ArrayBuffer 对象）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readAsArrayBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blob) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以二进制格式读取 Blob 对象的数据</span></span></code></pre></div><h3 id="_3-传递-blob-对象" tabindex="-1">3. 传递 Blob 对象 <a class="header-anchor" href="#_3-传递-blob-对象" aria-label="Permalink to &quot;3. 传递 Blob 对象&quot;">​</a></h3><p>在某些场景下，可以将 Blob 对象作为请求体的数据进行传递，比如上传文件等。可以使用 <code>XMLHttpRequest</code> 或 <code>fetch</code> API 来发送请求。 使用 <code>XMLHttpRequest</code> 的示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xhr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/upload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (xhr.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;文件上传成功&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blob)</span></span></code></pre></div><p>或者使用 <code>fetch</code> API 的示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/upload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  body: blob</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;文件上传成功&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>注意，以上示例中的 <code>/upload</code> 是上传文件的接口，具体的接口地址需要根据实际的后端逻辑来确定。</p><p>以上是读取和使用 Blob 对象的一些常见方式，具体的使用方式会根据实际需求而有所不同。</p><h2 id="六-如何合理使用-blob-对象" tabindex="-1">六. 如何合理使用 Blob 对象 <a class="header-anchor" href="#六-如何合理使用-blob-对象" aria-label="Permalink to &quot;六. 如何合理使用 Blob 对象&quot;">​</a></h2><p>下面总结一下使用 Blob 的注意事项，合理使用 Blob 对象需要考虑以下几个方面：</p><h3 id="_1-数据类型选择" tabindex="-1">1. 数据类型选择 <a class="header-anchor" href="#_1-数据类型选择" aria-label="Permalink to &quot;1. 数据类型选择&quot;">​</a></h3><p>Blob 对象可以保存各种类型的数据，包括文本、二进制、音视频等。在使用 Blob 对象时，需要根据实际的需求选择合适的数据类型。如果要保存文本数据，可以使用 <code>new Blob([text], { type: &#39;text/plain&#39; })</code>，如果要保存二制数据，可以使用 <code> Blob([arrayBuffer], { type: &#39;application/octet-stream&#39; })</code>。</p><h3 id="_2-数据处理" tabindex="-1">2. 数据处理 <a class="header-anchor" href="#_2-数据处理" aria-label="Permalink to &quot;2. 数据处理&quot;">​</a></h3><p>使用 Blob 对象时，可能需要对数据进行一些处理，比如压缩、裁剪、转换等。可以通过相应库或工具来处理数据，如使用 Canvas API 对图片进行裁剪和压缩，使用音视频编解码库进行格式转换等。</p><h3 id="_3-内存管理" tabindex="-1">3. 内存管理 <a class="header-anchor" href="#_3-内存管理" aria-label="Permalink to &quot;3. 内存管理&quot;">​</a></h3><p>在使用 Blob 对象时，需要注意内存管理，避免占用过多内存致性能问题。特是处理大文件时，可以考虑分片上传或分段读取，减小内存占用。</p><h3 id="_4-销毁-blob-url" tabindex="-1">4. 销毁 Blob URL <a class="header-anchor" href="#_4-销毁-blob-url" aria-label="Permalink to &quot;4. 销毁 Blob URL&quot;">​</a></h3><p>如果使用 <code>URL.createObject()</code> 创建了 Blob URL，需要在不再使用时及时调用 <code>URL.revokeObjectURL()</code> 销毁 Blob URL，以释放浏览器内存资源。</p><h3 id="_5-浏览器兼容性" tabindex="-1">5. 浏览器兼容性 <a class="header-anchor" href="#_5-浏览器兼容性" aria-label="Permalink to &quot;5. 浏览器兼容性&quot;">​</a></h3><p>Blob 对象在现代浏览器中得到很好的支持，但某些旧版本的浏览器可能存在兼容问题。在使用 Blob 对时，需要仔细考虑目标用户的浏览器环境，并确定是否需要提供兼容的替代方案。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba77948aa338467ebca50ae948e6c75c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=980&amp;h=450&amp;s=236607&amp;e=png&amp;b=ece1c8" alt="image.png"></p><p>总的来说，合理使用 Blob 对象需要根据具体的需求和场景来决定数据类型、数据处理方式以内存管理策略。，要关注浏览器兼容性，并及时销毁不再使用的 Blob URL，确保应用程序的性能和稳定性。</p><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="noreferrer">Blob - MDN</a></p>`,85);function e(r,d,o,E,g,c){const s=p("ArticleFooter");return h(),a("div",null,[k,l(s,{link:"https://juejin.cn/post/7306694295246585895"})])}const F=i(t,[["render",e]]);export{b as __pageData,F as default};
