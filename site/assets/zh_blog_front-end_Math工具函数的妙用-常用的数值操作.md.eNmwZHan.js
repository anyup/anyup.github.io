import{_ as i,c as a,I as h,aU as n,o as t,E as l}from"./chunks/framework.CpXV_ol5.js";const F=JSON.parse('{"title":"Math 工具函数的妙用：常用的数值操作","description":"","frontmatter":{"title":"Math 工具函数的妙用：常用的数值操作"},"headers":[],"relativePath":"zh/blog/front-end/Math工具函数的妙用-常用的数值操作.md","filePath":"zh/blog/front-end/Math工具函数的妙用-常用的数值操作.md","lastUpdated":1727083629000}'),p={name:"zh/blog/front-end/Math工具函数的妙用-常用的数值操作.md"},k=n(`<h1 id="math-工具函数的妙用-常用的数值操作" tabindex="-1">Math 工具函数的妙用：常用的数值操作 <a class="header-anchor" href="#math-工具函数的妙用-常用的数值操作" aria-label="Permalink to &quot;Math 工具函数的妙用：常用的数值操作&quot;">​</a></h1><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af64eb97a0c14a61801ad5ced7d09600~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1372&amp;h=626&amp;s=259756&amp;e=png&amp;b=fcf1e8" alt="image.png"></p><h2 id="一-引言" tabindex="-1">一. 引言 <a class="header-anchor" href="#一-引言" aria-label="Permalink to &quot;一. 引言&quot;">​</a></h2><p>在进行数学计算和处理时，JavaScript 提供了许多强大的工具函数，其中最常用且广泛应用的就是 Math 对象中的函数。无论是进行简单的数值操作还是复杂的数学运算，Math 工具函数都能发挥出强大的作用。</p><p>本篇文章将带您探索 JavaScript Math 工具函数的妙用，介绍常见的数值操作。将通过一些简单的例子和实际场景应用，展示 Math 工具函数在实践中的价值和便利性。</p><h2 id="二-常用的数值操作" tabindex="-1">二. 常用的数值操作 <a class="header-anchor" href="#二-常用的数值操作" aria-label="Permalink to &quot;二. 常用的数值操作&quot;">​</a></h2><p>Math 是 JavaScript 提供的一个内置对象，它包含了很多常用的数值操作方法。下面列举了一些常用的 Math：</p><ol><li><p><code>Math.abs(x)</code>：返回一个数的绝对值。</p></li><li><p><code>Math.ceil(x)</code>：向上取整，返回大于或等于给定数的最小整数。</p></li><li><p><code>Math.floor(x)</code>：向下取整，返回小于或等于给定数的最大整数。</p></li><li><p><code>Math.round(x)</code>：四舍五入，返回给定数的四舍五入值。</p></li></ol><p>这些是 Math 对象中最常用的一些数值操作方法，可以帮助我们进行绝对值、取整、比较、四舍五入等操作。根据具体的场景和需求，我们可以灵活地使用这些方法来进行数值计算和处理。</p><h2 id="三-绝对值-math-abs" tabindex="-1">三. 绝对值（Math.abs） <a class="header-anchor" href="#三-绝对值-math-abs" aria-label="Permalink to &quot;三. 绝对值（Math.abs）&quot;">​</a></h2><p>Math.abs()函数用于获取一个数的绝对值。无论是正数、负数，还是 0，它都可以返回它们的非负值。这个函数在数学计算和处理中有许多妙用。</p><h3 id="_1-简单应用-计算距离" tabindex="-1">1. 简单应用：计算距离 <a class="header-anchor" href="#_1-简单应用-计算距离" aria-label="Permalink to &quot;1. 简单应用：计算距离&quot;">​</a></h3><p>在很多应用中，计算两个点之间的距离是一项常见的需求。而我们可以利用 Math.abs()函数来简单地求解这个问题。以二维坐标系为例，假设有两个点 A(x1, y1)和 B(x2, y2)，我们可以通过以下方式计算它们之间的距离：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateDistance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> distanceX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x1)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> distanceY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y1)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> distance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(distanceX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> distanceX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> distanceY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> distanceY)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> distance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> distance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateDistance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x1, y1, x2, y2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(distance) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果：7.211102550927978</span></span></code></pre></div><p>通过使用 Math.abs()函数，我们可以得到两点之间的直线距离，实现了简单而高效的计算。</p><h3 id="_2-场景应用-统计差异值" tabindex="-1">2. 场景应用：统计差异值 <a class="header-anchor" href="#_2-场景应用-统计差异值" aria-label="Permalink to &quot;2. 场景应用：统计差异值&quot;">​</a></h3><p>在数据分析和统计中，比较不同数据集之间的差异是一项常见的任务。Math.abs() 函数在这种情况下也发挥了重要的作用。通过对两个数值进行 Math.abs() 运算，我们可以得到它们之间的绝对差值。</p><p>以统计差异值为例，假设我们有两个数据集，分别是 A 和 B。我们想要了解这两个数据集之间的差异程度，可以通过以下方式计算：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">28</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> diff </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataA.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataB[index]))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(diff) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果：[2, 2, 2, 3, 2]</span></span></code></pre></div><p>通过对每个元素进行 Math.abs()运算，我们得到了两个数据集间的差异值的集合。这种方法可以帮助我们快速了解数据集之间的差异情况，为后续的分析和决策提供有用的参考。</p><p>绝对值函数 Math.abs()不仅在计算距离时起到了简化计算的作用，也在统计差异值时提供了一种直观的判断和比较方式。</p><h2 id="四-向上取整-math-ceil" tabindex="-1">四. 向上取整（Math.ceil） <a class="header-anchor" href="#四-向上取整-math-ceil" aria-label="Permalink to &quot;四. 向上取整（Math.ceil）&quot;">​</a></h2><p>Math.ceil()函数用于将一个数向上取整，返回大于或等于给定数的最小整数。</p><h3 id="_1-简单应用-商品价格取整" tabindex="-1">1. 简单应用：商品价格取整 <a class="header-anchor" href="#_1-简单应用-商品价格取整" aria-label="Permalink to &quot;1. 简单应用：商品价格取整&quot;">​</a></h3><p>在商业应用中，对商品价格进行取整是一项常见的需求。有时候我们希望将价格向上取整，以确保不出现小数位，或者保证价格的一致性。而 Math.ceil()函数就能够实现这个需求。</p><p>举个例子，假设某个商品价格为 19.99 元，我们希望将其价格向上取整，使其成为 20 元。我们可以使用 Math.ceil() 函数来实现：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 19.99</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> roundedPrice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ceil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(price)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(roundedPrice) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果：20</span></span></code></pre></div><p>通过简单地调用 Math.ceil() 函数，我们得到了向上取整后的价格值，从而满足了商业需求。</p><h3 id="_2-场景应用-计算分页数" tabindex="-1">2. 场景应用：计算分页数 <a class="header-anchor" href="#_2-场景应用-计算分页数" aria-label="Permalink to &quot;2. 场景应用：计算分页数&quot;">​</a></h3><p>在进行分页计算时，我们常常面临的问题是如何确定总页数。特别是在获取数据时，我们往往只知道数据总量和每页显示的数据量，而需要根据些信息计算出总页数。Math.ceil 函数就能帮助我们轻松解决这个问题。</p><p>举个例子，假设我们有一个数据集，其中有 100 个数据对象，每页显示 10 条数据。我们想要计算出总页数。我们可以使用以下方式进行计算：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totalCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pageSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totalPages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ceil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(totalCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pageSize)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(totalPages) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果：10</span></span></code></pre></div><p>通过使用 Math.ceil() 函数，我们将数据总量除以每页显示的数据量并向上取整，从而得到了总页数。这样，我们就能够更方便地进行分页操作，提供更好的用户体验。</p><p>Math.ceil() 函数能够帮助我们在实际场景中快速解决取整问题。无论是商品价格取整还是计算分页数，它都能够提供简单而有效的解决方案。</p><h2 id="五-向下取整-math-floor" tabindex="-1">五. 向下取整（Math.floor） <a class="header-anchor" href="#五-向下取整-math-floor" aria-label="Permalink to &quot;五. 向下取整（Math.floor）&quot;">​</a></h2><p>Math.floor() 函数用于将一个数向下取整，返回小于或等于给定数的最大整数。</p><h3 id="_1-简单应用-计算价格" tabindex="-1">1. 简单应用：计算价格 <a class="header-anchor" href="#_1-简单应用-计算价格" aria-label="Permalink to &quot;1. 简单应用：计算价格&quot;">​</a></h3><p>在一些场景中，我们需要将一个小数向下取整，以得到一个整数值。比如在价格计算和货币处理中，我们使用向下取整（Math.floor）来确保计算结果保持精确的小数位数，并确保不出现四舍五入或向上取整的情况。</p><p>假设有一项活动，我们对商品价格进行计算，需要计算打折后的价格，最后使用向下取整，确保最终价格只保留两位小数。这样可以避免出现精度问题。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 假商品价格为 99.9</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> price</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 99.9</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现实中可能需要进行一些计，比如打折等</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> discount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 折扣为 10%</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 计算打折后的价格</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> discountedPrice</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> discount)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用向下取整确保最终价格只保留两位小数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> roundedPrice</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(discountedPrice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(roundedPrice) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果为 84.91</span></span></code></pre></div><p>通过使用 Math.floor() 函数，我们可以得到向下取整后的数值，从而得到一个合理的小数值。这样，我们就能够更准确地计算打折后的价格。</p><h3 id="_2-场景应用-元素排列与布局" tabindex="-1">2. 场景应用：元素排列与布局 <a class="header-anchor" href="#_2-场景应用-元素排列与布局" aria-label="Permalink to &quot;2. 场景应用：元素排列与布局&quot;">​</a></h3><p>在进行元素排列布局时，有时候我们需要以整数方式计算元素的位置或尺寸。Math.floor() 函数可以帮助我们实现这个需求。</p><p>举个例子，在进行网格布局时，我们需要确定每个网格元素的大小和位置。假设我们有一个容器宽度为 400 像素，每个网格元素的宽度为 80 像素。我们可以使用以下方式计算网格元素的数量和位置：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> containerWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 400</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> itemWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> itemCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(containerWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> itemWidth)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> remainder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> containerWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> itemWidth</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(itemCount) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果：5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(remainder) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果：0</span></span></code></pre></div><p>通过使用 Math.floor() 函数，我们将容器宽度除以网格元素宽度并向下取整，得到网格元素数量。这样，我们就能够确定合适的数量和位置，进行元素的排列和布局。</p><p>Math.floor() 函数能够帮助我们在实际场景中快速解决向下取整问题。无论是计算人数还是进行元素排列与布局，它都能够提供简单而有效的解决方案。</p><h2 id="六-四舍五入-math-round" tabindex="-1">六. 四舍五入（Math.round） <a class="header-anchor" href="#六-四舍五入-math-round" aria-label="Permalink to &quot;六. 四舍五入（Math.round）&quot;">​</a></h2><p>Math.round() 函数用于将一个数进行四舍五入，返回最接近的整数。</p><h3 id="_1-简单应用-计算平均值" tabindex="-1">1. 简单应用：计算平均值 <a class="header-anchor" href="#_1-简单应用-计算平均值" aria-label="Permalink to &quot;1. 简单应用：计算平均值&quot;">​</a></h3><p>在进行统计计算时，我们经常需要计算一组数据的平均值。在某些情况下，我们希望将平均值进行四舍五入，以得到更接近的整数结果。Math.round() 函数可以帮助我们实现这一需求。</p><p>举个例子，假设我们有一组数据：<code>[85, 92, 78, 90, 87]</code>。我们想要计算这组数据的平均值，并将结果舍五入。我们可以以下方式进行计算：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">85</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">92</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">78</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">87</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> roundedAverage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">round</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(average);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(roundedAverage);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果：86</span></span></code></pre></div><p>通过使用 Math.round() 函数，我们将计算得到的平均值四舍五入，得到了最接的整数结果。这样，我们就可以更方便地获取数据的大致情况。</p><h3 id="_2-场景应用-计算百分比" tabindex="-1">2. 场景应用：计算百分比 <a class="header-anchor" href="#_2-场景应用-计算百分比" aria-label="Permalink to &quot;2. 场景应用：计算百分比&quot;">​</a></h3><p>在计算百分比时，有时我们希望将小数结果四舍五入，以便更好地展示百分比值。Math.round() 函数可以帮助我们实现这个需求假设我们有一份调查数据，其中有 100 个人回答了一个问题，其中 60 人选择了项 A，剩下的人选择了选项 B 我们希望计算出各个选项的百分比将结果四舍五入。我们可以使用以下方式计算：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totalResponses </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> optionA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> optionB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> percentA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (optionA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totalResponses) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> percentB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (optionB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totalResponses) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> roundedA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">round</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(percentA);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> roundedPercentB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">round</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(percentB);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(roundedPercentA);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果：60console.log(roundedPercentB  // 输出结果：40</span></span></code></pre></div><p>通过使用 Math.round() 函数，我们将计算得到的百分比四舍五入，得到了最接近的整数结果。这样，我们就能够更好地展示百分比值，提供更直观的信息。</p><p>Math.round()能够帮助我们在实际场中快速解决四舍五入问题。无论是计算平均值还是计算百分比，它都能够提供简单而有效的解决方案。</p><h2 id="七-总结" tabindex="-1">七. 总结 <a class="header-anchor" href="#七-总结" aria-label="Permalink to &quot;七. 总结&quot;">​</a></h2><p>JavaScript 中的 Math 对象提供了一系列常用的数值操作方法，它们在处理数值计算和数据处理过程中发挥着非常重要的作用。这些方法简单易用，能够帮助我们解决各种数学和数据处理问题。</p><p>通过 Math.abs，我们可以轻松地获取一个数的绝对值，而 Math.ceil 和 Math.floor 可以帮助我们进行向上和向下取整运算。Math.round 提供了舍入功能，使得数值计算更加准确，得到我们想要的数值。</p><p>总结来说，JavaScript 的 Math 工具函数为我们的数值计算提供了便捷、高效和精确的解决方案，尤其是进行数据处理，它们都是必不可少的利器。熟练运用这些函数，我们能够在开发过程中提高效率、降低复杂度，并且使得我们的代码更加可读和可维护。</p>`,63);function e(E,r,d,g,y,o){const s=l("ArticleFooter");return t(),a("div",null,[k,h(s,{link:"https://juejin.cn/post/7299733832412479523"})])}const A=i(p,[["render",e]]);export{F as __pageData,A as default};
