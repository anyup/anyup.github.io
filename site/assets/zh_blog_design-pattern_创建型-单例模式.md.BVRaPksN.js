import{_ as i,c as a,I as n,aU as l,o as p,E as t}from"./chunks/framework.CpXV_ol5.js";const F=JSON.parse('{"title":"JS设计模式之“单孑独立” - 单例模式","description":"","frontmatter":{"title":"JS设计模式之“单孑独立” - 单例模式"},"headers":[],"relativePath":"zh/blog/design-pattern/创建型-单例模式.md","filePath":"zh/blog/design-pattern/创建型-单例模式.md","lastUpdated":1727083629000}'),h={name:"zh/blog/design-pattern/创建型-单例模式.md"},e=l(`<h1 id="创建型-单例模式" tabindex="-1">创建型 - 单例模式 <a class="header-anchor" href="#创建型-单例模式" aria-label="Permalink to &quot;创建型 - 单例模式&quot;">​</a></h1><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ff2c578a5d94c3696312d131f8ffb3d~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=666&amp;h=328&amp;s=113851&amp;e=png&amp;b=128383" alt="image.png"></p><h3 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h3><p>在<code>JavaScript</code>开发中，<strong>单例模式</strong>是一种常见且实用的设计模式一。</p><p><strong>单例模式的核心思想是</strong>：确保一个类只有一个实例对象，并且该对象可以在应用程序的任何地方被共享和访问。通过使用单例模式，我们可以简化代码、节省资源、方便管理和共享功能，并提高代码的可维护性和可读性。</p><p>然而，单例模式并不是适用于所有场景的万能解决方案。设计应用程序时，应该权衡单例模式的优点和缺点，并根据具体需求合理地使用。特别是在需要可维护性和代码复用性的情况下，我们需要考虑其他设计模式或者结合使用多种模式来解决问题。</p><p>在本篇文章中，我们将深入探讨<code>JavaScript</code>中的单例模式，包括应用场景、实现方式、优缺点以及最佳实践。通过学习单例模式，我们将更好地理解如何设计和构建高质量的<code>JavaScript</code>应用程序。</p><h2 id="一、什么是单例模式" tabindex="-1">一、什么是单例模式 <a class="header-anchor" href="#一、什么是单例模式" aria-label="Permalink to &quot;一、什么是单例模式&quot;">​</a></h2><h3 id="_1-1-定义" tabindex="-1">1.1 定义 <a class="header-anchor" href="#_1-1-定义" aria-label="Permalink to &quot;1.1 定义&quot;">​</a></h3><blockquote><p>定义：单例模式是指一个类只能有一个实例，通过自身实例化并提供一个访问该实例的全局访问点。</p></blockquote><p>单例模式是一种比较常见的设计模式，旨在确保一个类只有一个实例对象，并提供一个全局访问点以访问该实例。</p><p>在单例模式中，类只能实例化一次，任何其他的实例化操作都会返回相同的实例。这样可以确保在整个程序中，只有一个实例对象存在，避免了多次创建相同对象的浪费。</p><h3 id="_1-2-特点" tabindex="-1">1.2 特点 <a class="header-anchor" href="#_1-2-特点" aria-label="Permalink to &quot;1.2 特点&quot;">​</a></h3><ol><li>类只能有一个实例对象。</li><li>提供一个全局访问点，使该实例可以被外部访问。</li><li>延迟初始化，即实例化过程只会发生一次。</li></ol><h3 id="_1-3-应用场景" tabindex="-1">1.3 应用场景 <a class="header-anchor" href="#_1-3-应用场景" aria-label="Permalink to &quot;1.3 应用场景&quot;">​</a></h3><ol><li>对象只需要被实例化一次，当一个对象在系统中只需要存在一个实例时。</li><li>创建一个全局的共享资源，例如配置文件、日志文件等。</li><li>配置信息的管理，确保系统中的各个组件都可以共享和访问配置信息。</li><li>管理唯一标识符，例如全局唯一的序列号生成器、订单号生成器等。</li></ol><h2 id="二、实现单例模式的几种方法" tabindex="-1">二、实现单例模式的几种方法 <a class="header-anchor" href="#二、实现单例模式的几种方法" aria-label="Permalink to &quot;二、实现单例模式的几种方法&quot;">​</a></h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68e0c8aaaf5d474db9d2be693f1ff344~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1206&amp;h=501&amp;s=236816&amp;e=png&amp;b=fefcfc" alt="image.png"></p><h3 id="_2-1-懒汉式" tabindex="-1">2.1 懒汉式 <a class="header-anchor" href="#_2-1-懒汉式" aria-label="Permalink to &quot;2.1 懒汉式&quot;">​</a></h3><p>懒汉式是一种延迟初始化的单例模式实现方式，即在首次使用时才会创建实例。懒汉式是一种比较常见的单例模式实现方式，可以延迟初始化实例，节省资源。但需要注意多次实例化问题，可以采用加锁或双重检查锁定方式来解决。</p><p>在懒汉式中，只有当需要获取单例对象时才会创建它。但是要保证有且只有一个创建单例对象。通过使用判断实例对象来避免多个调用同时创建多个实例的问题。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... 初始化操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.instance) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.instance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过 <code>getInstance</code> 方法来获取实例。在首次调用 <code>getInstance</code> 时，会判断实例是否已经存在，如果不存在则创建一个新的实例。通过使用静态变量<code>this.instance</code>来保存实例，确保全局只有一个实例对象。</p><h3 id="_2-2-饿汉式" tabindex="-1">2.2 饿汉式 <a class="header-anchor" href="#_2-2-饿汉式" aria-label="Permalink to &quot;2.2 饿汉式&quot;">​</a></h3><p>饿汉式是一种在类加载时就创建实例的单例模式实现方式。在这种方式中，实例在类加载时就被创建，无论是否使用到该实例。饿汉式是一种简单便捷的单例模式实现方式。但需要注意实例的创建时机和资源消耗。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... 初始化操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.instance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Singleton.instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>在这种饿汉式的实现方式中，实例被声明为类的静态成员，并在类加载时就已经创建完毕。通过 <code>getInstance</code> 方法来获取这个实例。</p><p>由于实例在类加载时就被创建，可以保证全局只有一个实例对象。每次调用 <code>getInstance</code> 方法时直接返回该实例，不需要额外的判断和创建操作。</p><p>饿汉式的优点是简单快捷。缺点是在类加载时就创建实例，无论是否被使用到，可能会消耗一定的资源。而且，该实现方式不支持延迟初始化，可能会降低系统的启动速度。</p><h3 id="_2-3-推荐的单例模式实现方式" tabindex="-1">2.3 推荐的单例模式实现方式 <a class="header-anchor" href="#_2-3-推荐的单例模式实现方式" aria-label="Permalink to &quot;2.3 推荐的单例模式实现方式&quot;">​</a></h3><h4 id="_2-3-1-使用-javascript-闭包" tabindex="-1">2.3.1 使用 JavaScript 闭包 <a class="header-anchor" href="#_2-3-1-使用-javascript-闭包" aria-label="Permalink to &quot;2.3.1 使用 JavaScript 闭包&quot;">​</a></h4><p>JavaScript 闭包模块化的思想是将相关的功能封装到一个独立的模块中，并只暴露出一个公共接口。这种方式天然地具备了单例模式的特点，因为模块在被调用时只会被实例化一次。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> singleton</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 私有变量和方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instance</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... 初始化操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // ... 公共接口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 返回一个实例化对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instance) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用方式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> singleton.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h4 id="_2-3-2-es6-的单例模式" tabindex="-1">2.3.2 ES6 的单例模式 <a class="header-anchor" href="#_2-3-2-es6-的单例模式" aria-label="Permalink to &quot;2.3.2 ES6 的单例模式&quot;">​</a></h4><p>ES6 中引入了 class 的概念，可以通过 class 和静态属性的方式来实现单例模式。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... 初始化操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Singleton.instance) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Singleton.instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Singleton.instance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用方式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Singleton.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="三、单例模式的优缺点" tabindex="-1">三、单例模式的优缺点 <a class="header-anchor" href="#三、单例模式的优缺点" aria-label="Permalink to &quot;三、单例模式的优缺点&quot;">​</a></h2><p>从以上的学习中，我们可以总结 JavaScript 单例模式的优点和缺点如下：</p><h3 id="_3-1-优点" tabindex="-1">3.1 优点 <a class="header-anchor" href="#_3-1-优点" aria-label="Permalink to &quot;3.1 优点&quot;">​</a></h3><ol><li>提供了一种简单且有效的方式来确保只有一个实例对象被创建并且全局可访问。</li><li>可以避免全局变量的污染，将相关的功能组织在一个独立的实例中，提高代码的可维护性和可读性。</li></ol><h3 id="_3-2-缺点" tabindex="-1">3.2 缺点 <a class="header-anchor" href="#_3-2-缺点" aria-label="Permalink to &quot;3.2 缺点&quot;">​</a></h3><ol><li>单例模式可能会引入<strong>全局状态</strong>，对代码的可测试性和可维护性造成影响。因为单例模式的实例通常是全局可访问的，对于其他模块的代码来说，可能无法轻松模拟或替换该实例。</li><li>单例模式的依赖关系和耦合度较高，它需要在全局范围内共享状态，修改代码逻辑时需要小心翼翼地处理依赖关系。</li><li>单例模式在某些场景下可能导致性能问题，特别是在实例较为庞大或者需要大量计算的情况下。因为单例模式在初始化时就创建了实例，有时候可能会造成不必要的资源浪费。</li></ol><h3 id="注意" tabindex="-1">注意： <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意：&quot;">​</a></h3><p>在实际应用中，单例模式需要谨慎使用，特别是在需要考虑可维护性、可测试性和代码复用性的情况下。在大多数情况下，推荐使用依赖注入和模块化的方式来处理相关的功能，以便更好地管理和组织代码。但在某些特定场景下，单例模式仍然有其存在的合理性和必要性。</p><h2 id="四、常见的单例模式应用场景" tabindex="-1">四、常见的单例模式应用场景 <a class="header-anchor" href="#四、常见的单例模式应用场景" aria-label="Permalink to &quot;四、常见的单例模式应用场景&quot;">​</a></h2><p>JavaScript 中常见的单例模式应用场景有很多，下面举几个例子进行详细分析：</p><h3 id="_4-1-日志记录器-logger" tabindex="-1">4.1 日志记录器（Logger） <a class="header-anchor" href="#_4-1-日志记录器-logger" aria-label="Permalink to &quot;4.1 日志记录器（Logger）&quot;">​</a></h3><p>在大多数应用程序中，都需要进行日志记录，而日志记录通常是一个全局共享的功能。使用单例模式可以确保只有一个日志记录器实例存在，并且可以在任何地方方便地调用。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 初始化日志记录器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 记录日志</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 其他日志相关方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 单例实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> logger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在代码中的任何地方调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;This is a log message.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_4-2-配置管理器-config-manager" tabindex="-1">4.2 配置管理器（Config Manager） <a class="header-anchor" href="#_4-2-配置管理器-config-manager" aria-label="Permalink to &quot;4.2 配置管理器（Config Manager）&quot;">​</a></h3><p>在大型应用程序中，通常需要集中管理配置信息，以便在不同组件和模块中共享和访问。使用单例模式可以确保只有一个配置管理器实例，并且可以方便地获取和更新配置信息。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConfigManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 初始化配置信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 获取特定配置项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 更新特定配置项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 其他配置相关方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 单例实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> configManager</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConfigManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在代码中的任何地方获取或更新配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> configManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;database&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;timeout&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>这些仅展示了使用单例模式的一些常见场景，它们都需要确保只有一个实例对象存在，并且可以在应用的任何地方方便地调用。</p><p>单例模式可以简化对共享功能的管理和使用，提高代码的可维护性和可读性。但需要记住，单例模式并不适用于所有场景，需要根据具体的业务需求来判断是否使用。</p><h2 id="五、总结" tabindex="-1">五、总结 <a class="header-anchor" href="#五、总结" aria-label="Permalink to &quot;五、总结&quot;">​</a></h2><p>单例模式在合适的场景下可以提供简单有效的解决方案，但需要权衡其优缺点并根据具体需求谨慎使用。合理并适度地使用单例模式可以提高代码的可维护性和可读性，优化应用的性能和资源利用。</p><ol><li><p>单例模式是一种<strong>最常见</strong>的设计模式之一，用于确保一个类只有一个实例对象，并且该对象可以在整个应用中被共享和访问。</p></li><li><p>在<code>JavaScript</code>中，可以使用<strong>构造函数</strong>、<strong>静态方法</strong>、<strong>闭包</strong>等方式来实现单例模式。</p></li><li><p>单例模式的<strong>优点</strong>包括<strong>简化代码</strong>、<strong>节省资源</strong>、<strong>方便共享和访问</strong>、<strong>避免全局变量污染</strong>等。</p></li><li><p>单例模式的<strong>缺点</strong>包括<strong>引入全局状态</strong>、<strong>降低代码的可测试性和可维护性</strong>、<strong>增加耦合度和依赖关系</strong>以及潜在的<strong>性能问题</strong>等。</p></li><li><p>在使用单例模式时，需要注意<strong>避免滥用</strong>和<strong>过度使用</strong>、<strong>避免引入全局状</strong>态、尽量减少对单例对象的<strong>直接访问</strong>，并且考虑可测试性和可维护性等因素。</p></li></ol>`,57);function k(r,g,E,d,c,o){const s=t("ArticleFooter");return p(),a("div",null,[e,n(s,{link:"https://juejin.cn/post/7277787934849105955"})])}const u=i(h,[["render",k]]);export{F as __pageData,u as default};
