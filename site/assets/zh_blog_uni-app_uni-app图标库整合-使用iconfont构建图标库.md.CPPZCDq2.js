import{_ as i,c as a,I as n,aU as t,o as p,E as l}from"./chunks/framework.CpXV_ol5.js";const u=JSON.parse('{"title":"uni-app图标库整合：使用iconfont构建属于自己的图标库","description":"","frontmatter":{"title":"uni-app图标库整合：使用iconfont构建属于自己的图标库"},"headers":[],"relativePath":"zh/blog/uni-app/uni-app图标库整合-使用iconfont构建图标库.md","filePath":"zh/blog/uni-app/uni-app图标库整合-使用iconfont构建图标库.md","lastUpdated":1725606759000}'),e={name:"zh/blog/uni-app/uni-app图标库整合-使用iconfont构建图标库.md"},h=t(`<h1 id="uni-app-图标库整合-使用-iconfont-构建属于自己的图标库" tabindex="-1">uni-app 图标库整合：使用 iconfont 构建属于自己的图标库 <a class="header-anchor" href="#uni-app-图标库整合-使用-iconfont-构建属于自己的图标库" aria-label="Permalink to &quot;uni-app 图标库整合：使用 iconfont 构建属于自己的图标库&quot;">​</a></h1><h2 id="一-前言" tabindex="-1">一. 前言 <a class="header-anchor" href="#一-前言" aria-label="Permalink to &quot;一. 前言&quot;">​</a></h2><p>在前端开发中，图标已经成为页面设计中不可或缺的一部分。图标可以使界面更加美观、清晰，并且能够提升用户体验。而使用图标库来管理和引用图标资源，可以带来更多的便利和效率。</p><p>而在众多的图标库中，<strong>iconfont</strong> 独树一帜。<strong>iconfont</strong> 是一种基于字体的图标库，它将图标转换为字体的形式，并通过 <strong>unicode</strong> 编码引用。这种方式不仅可以减少图标资源的大小，提升页面加载速度，而且可以通过 CSS 进行灵活的样式控制，让图标的应用更加方便和可定制。</p><p>假设在一个项目中，需要扩展多个图标，所以我们应该把各个图标收集进一个阿里图标库的项目中，即使后面不断的扩展图标，也能让它们在同一个库中，方便项目所有图标的整合与应用。</p><p>在本篇文章中，我将为大家介绍在 <strong>uni-app</strong> 中使用 <strong>iconfont</strong> 自定义图标库的方法和步骤，如何更方便更简捷的使用自定义图标。</p><h2 id="二-阿里巴巴矢量图标库" tabindex="-1">二. 阿里巴巴矢量图标库 <a class="header-anchor" href="#二-阿里巴巴矢量图标库" aria-label="Permalink to &quot;二. 阿里巴巴矢量图标库&quot;">​</a></h2><h3 id="_1-简介" tabindex="-1">1. 简介 <a class="header-anchor" href="#_1-简介" aria-label="Permalink to &quot;1. 简介&quot;">​</a></h3><p>阿里巴巴矢量图标库是一种图标字体库，它将图标转换为字体的形式，并通过 <strong>unicode</strong> 编码进行引用。通过使用 <strong>iconfont</strong>，开发者可以使用字体图标代替传统的图片图标，以提高网页加载速度和图标的灵活性。<strong>iconfont</strong> 中的图标可以使用 CSS 进行样式控制，并且可以根据需要进行缩放、颜色调整等操作，非常方便。</p><p>官方链接：<a href="https://www.iconfont.cn/" target="_blank" rel="noreferrer">iconfont - 阿里巴巴矢量图标库</a></p><h3 id="_2-创建项目" tabindex="-1">2. 创建项目 <a class="header-anchor" href="#_2-创建项目" aria-label="Permalink to &quot;2. 创建项目&quot;">​</a></h3><p>登录阿里巴巴矢量图标库系统后，可以选择创建项目或者管理自己所参与的项目。</p><p>点击“<strong>资源管理</strong>” -&gt; “<strong>我的项目</strong>” 即可以进行查看自己所属项目范围，可以进行编辑项目，挑选图标库中的图标引入自己项目中。</p><h2 id="三-管理图标库" tabindex="-1">三. 管理图标库 <a class="header-anchor" href="#三-管理图标库" aria-label="Permalink to &quot;三. 管理图标库&quot;">​</a></h2><p>一般情况下，我建议在收藏的项目中，使用 “<strong>下载至本地</strong>&quot; 的功能，而后解压，复制文件夹中的 “<strong>iconfont.css</strong>” 到 <code>uni-app</code> 项目中(其余的文件可忽略)，具体的操作我们接下来一步一步进行演示一下。</p><p>下面的操作默认已经进入阿里图标库的“图标管理”栏目中。</p><h3 id="_1-修改图标前缀" tabindex="-1">1. 修改图标前缀 <a class="header-anchor" href="#_1-修改图标前缀" aria-label="Permalink to &quot;1. 修改图标前缀&quot;">​</a></h3><p>我建议应该修改这个图标的前缀，这样以后有新图标加入的时候，不用每次频繁修改前缀，点击右上角的 “<strong>项目设置</strong>“ ，进行修改项目信息，这里主要修改的是图标前缀信息，如下图所示：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c6435d16253468994f160ab70079d65~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=790&amp;h=236&amp;s=29723&amp;e=png&amp;b=f8f8f8" alt="image.png"></p><p>修改 “<strong>FontClass/Symbol 前缀</strong>” 项为“<strong>custom-icon-</strong>”</p><p>修改 “<strong>Font Family</strong>” 为 “<strong>custom-icon</strong>”</p><p>如下图所示：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e083e3cb3c1849998bd6af743f19dbc6~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=532&amp;h=590&amp;s=34481&amp;e=png&amp;b=fefefe" alt="Snipaste_2023-12-19_11-39-04.png"></p><p>完成这一步，我们就可以在 iconfont 的海量图标库中选用适合自己的图标了，可以将适合自己项目的图标添加到自己的项目中。</p><blockquote><p>说明：</p><p><strong>FontClass/Symbol 前缀</strong> 的主要作用是：会在自己添加的图标 css 名称前添加统一的字符串，例如：home 图标，那么生成的 css 样式名称则为：custom-icon-setting</p><p><strong>Font Family</strong> 的主要作用是：所用的图标具备的相同特性，定义字体的公共信息，使用的 font-family 等</p></blockquote><h3 id="_2-下载项目至本地" tabindex="-1">2. 下载项目至本地 <a class="header-anchor" href="#_2-下载项目至本地" aria-label="Permalink to &quot;2. 下载项目至本地&quot;">​</a></h3><p>添加所需要的图标至项目完成后，我们就可以下载图标的 css 文件了。在项目的图标页面，点击右上角的 “<strong>下载至本地</strong>”，就可以将 iconfont 相关项目文件夹下载下来了，如下图所示：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6a9818ff9854b96af6352857e690f7f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=857&amp;h=145&amp;s=41242&amp;e=png&amp;b=f7f7f7" alt="image.png"></p><p>下载完成，将文件夹解压后大概有下面几项文件，但是我们只需要一个文件即可：<strong>iconfont.css</strong>，如下图所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/531b8fa5bdfb485ca232902b3a3f883f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=819&amp;h=250&amp;s=47873&amp;e=png&amp;b=fefefe" alt="Snipaste_2023-12-19_11-42-30.png"></p><p>完成以上的几个步骤，我们大致就完成了在 iconfont 网站上对图标的操作了，接下来需要我们做的就是将这个图标库如何引入到 uni-app 项目中并进行使用。</p><h3 id="_3-添加图标库到项目" tabindex="-1">3. 添加图标库到项目 <a class="header-anchor" href="#_3-添加图标库到项目" aria-label="Permalink to &quot;3. 添加图标库到项目&quot;">​</a></h3><p>复制上述的 “<strong>iconfont.css</strong>”文件到<code>uni-app</code>根目录的<code>static</code>目录后(也可以为其他目录，例如：<code>assets</code>等)，打开“<strong>iconfont.css</strong>”，内部 css 代码如下：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e24067b8dcb1468997f61c2fa48d1aac~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=901&amp;h=151&amp;s=29745&amp;e=png&amp;b=1d1d1d" alt="Snipaste_2023-12-19_11-44-58.png"></p><p>删掉上图中圈出的部分，</p><blockquote><p>注意：</p><p>切记把<code>src: url(&#39;data:application/x-font-woff2......,&#39;</code> 最后的逗号<code>,</code>改成分号<code>;</code>。</p></blockquote><p>删除掉 css 中无用的部分，最终如下图所示：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9795c4880e904a429a0276e5cc1f51e8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=901&amp;h=102&amp;s=23402&amp;e=png&amp;b=202020" alt="image.png"></p><p>通过以上的操作步骤，我们最终得到了项目图标库生成的 css 样式，这样以后有新图标加入的时候，不用每次频繁修改项目设置中的图标前缀，只需要进行添加图标至项目后，下载文件到本地，替换现有的 css 文件即可。</p><p>接下来我们开始讲最重要的部分，如何使用这些图标</p><h2 id="四-组件化开发" tabindex="-1">四. 组件化开发 <a class="header-anchor" href="#四-组件化开发" aria-label="Permalink to &quot;四. 组件化开发&quot;">​</a></h2><h3 id="_1-原始引用" tabindex="-1">1. 原始引用 <a class="header-anchor" href="#_1-原始引用" aria-label="Permalink to &quot;1. 原始引用&quot;">​</a></h3><p>按照以前的前端项目开发，我们一般会直接引入 iconfont 文件，然后在前端中这样使用</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;iconfont iconfont-setting&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font-size: 20px;color: #fff;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>如上述代码所示，使用了 <code>setting</code> 图标，设置了图标大小以及图标颜色。虽说这样使用没有什么问题，但是每次都这样使用的话没办法进行统一管理，也多少有点繁琐了。</p><p>而且现在前端开发基本上都是组件化开发的理念，为了方便统一进行管理，去除繁琐，我们最终要开发一个 <code>Icon</code> 的组件进行使用。</p><h3 id="_2-图标组件" tabindex="-1">2. 图标组件 <a class="header-anchor" href="#_2-图标组件" aria-label="Permalink to &quot;2. 图标组件&quot;">​</a></h3><p>首先我们分析一下这个图标组件所需要承载的最简单的功能，那就展示图标，因此这个组件简要的功能主要包含：</p><ul><li><p>通过图标名称直接引用图标</p></li><li><p>支持修改图标样式</p></li><li><p>支持修改图标前缀，便于添加其他不同的 <code>iconfont</code> 库</p></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">text</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[ prefix, \`\${prefix}-\${name}\` ]&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ &#39;font-size&#39;: size, color: color }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; &lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;custom-icon&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    props: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 图标类名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        type: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        default: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 图标颜色</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      color: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        type: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        default: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#333&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 字体大小，单位rpx或px</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      size: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        type: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        default: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;16px&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 图标前缀</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      prefix: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        type: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        default: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;custom-icon&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>通过上述的代码，我们简单的实现了一个图标组件，主要提供了 4 个 props</p><ul><li><p>name：图标类名，例如：setting、home、user</p></li><li><p>color：图标颜色，例如：#333、red、blue</p></li><li><p>size：字体大小，例如：16px、40rpx</p></li><li><p>prefix：图标前缀，例如：custom-icon、other-icon</p></li></ul><p>当然，这个组件封装其实特别简单，在实际的项目开发中，我们可以根据项目的业务场景，将所需图标样式的复杂度进行一步步改造和优化，打造一款适合自己项目的图标库组件。</p><h3 id="_3-如何使用" tabindex="-1">3. 如何使用 <a class="header-anchor" href="#_3-如何使用" aria-label="Permalink to &quot;3. 如何使用&quot;">​</a></h3><p>在项目中可以进行这样使用：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">custom-icon</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setting&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;40rpx&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#333333&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">custom-icon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>加载后的图标如下图所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc3976cdbb8642f1b0851ce09f104f5c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=975&amp;h=180&amp;s=12652&amp;e=png&amp;b=fcfcfc" alt="image.png"></p><h3 id="_4-优缺点分析" tabindex="-1">4. 优缺点分析 <a class="header-anchor" href="#_4-优缺点分析" aria-label="Permalink to &quot;4. 优缺点分析&quot;">​</a></h3><p>对比直接使用 iconfont 样式的方式使用图标，使用组件化图标有以下几个优缺点：</p><p><strong>优点</strong></p><ul><li>使用简单快捷</li><li>便于统一管理和维护</li><li>便于多方协作</li><li>便于拓展功能</li></ul><p><strong>缺点</strong></p><p>一个最大的缺点就是需要额外开发一个组件进行使用，这个缺点可以忽略不计。</p><blockquote><p><strong>说明</strong>：图标前缀默认使用的我自己项目中的 custom-icon，组件中也提供了一个 prefix 的 props，如果我们项目中需要引入多个不同的图标前缀的 iconfont 库，那么这个 props 就发挥自己的作用了，只需要修改这个图标的前缀即可</p></blockquote><h2 id="五-总结" tabindex="-1">五. 总结 <a class="header-anchor" href="#五-总结" aria-label="Permalink to &quot;五. 总结&quot;">​</a></h2><p>通过本篇文章，我们了解了在前端项目中使用 iconfont 自定义图标库的方法和步骤。使用自定义图标库不仅能够提升页面的美观，还能减少图标资源的大小，提升页面加载速度。对于前端开发者来说，iconfont 是一个强大而便捷的工具。</p><p>在使用 iconfont 进行图标库的创建和管理时，我们需要注意以下几个注意事项：</p><ul><li><p>维护好自己的图标资源，以免出现图标名称混淆或冲突的情况，导致引用图标不明确。</p></li><li><p>修改 “<strong>iconfont.css</strong>” 时，注意修改最后的 <code>,</code> 为 <code>;</code>，避免导致引入样式文件出错，图标不展示等问题。</p></li></ul><h2 id="资源链接" tabindex="-1">资源链接 <a class="header-anchor" href="#资源链接" aria-label="Permalink to &quot;资源链接&quot;">​</a></h2><p><a href="https://www.iconfont.cn/" target="_blank" rel="noreferrer">iconfont - 阿里巴巴矢量图标库</a></p>`,71);function o(r,k,c,g,d,E){const s=l("ArticleFooter");return p(),a("div",null,[h,n(s,{link:["juejin::https://juejin.cn/post/7314121672886075443","weixin::https://mp.weixin.qq.com/s/tIuiI34Dwexcq_AGsDN5gg"]},null,8,["link"])])}const m=i(e,[["render",o]]);export{u as __pageData,m as default};
