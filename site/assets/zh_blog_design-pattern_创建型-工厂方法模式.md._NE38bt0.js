import{_ as i,c as a,I as n,aU as t,o as p,E as l}from"./chunks/framework.CpXV_ol5.js";const F=JSON.parse('{"title":"JS设计模式之“名片设计师” - 工厂方法模式","description":"","frontmatter":{"title":"JS设计模式之“名片设计师” - 工厂方法模式"},"headers":[],"relativePath":"zh/blog/design-pattern/创建型-工厂方法模式.md","filePath":"zh/blog/design-pattern/创建型-工厂方法模式.md","lastUpdated":1727083629000}'),h={name:"zh/blog/design-pattern/创建型-工厂方法模式.md"},e=t(`<h1 id="创建型-工厂方法模式" tabindex="-1">创建型 - 工厂方法模式 <a class="header-anchor" href="#创建型-工厂方法模式" aria-label="Permalink to &quot;创建型 - 工厂方法模式&quot;">​</a></h1><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bcf9de7379364df7b675005fefc93f5e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=745&amp;h=342&amp;s=122762&amp;e=png&amp;b=128383" alt="image.png"></p><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>上篇文章我们了解到什么是<strong>简单工厂模式</strong>，请参考上篇文章：<a href="https://juejin.cn/post/7275667546781990927" target="_blank" rel="noreferrer">JS 设计模式之 “神奇的魔术师” - 简单工厂模式</a>，不过这是工厂中最简单的一种，本篇文章我们将同大家一起认识一种更复杂的工厂模式，它将给我们提供复杂的对象创建场景，以模块化的思想实现我们复杂的需求。就像给我们设计不同的名片一样，我们暂且亲切的称呼它为“<strong>名片设计师</strong>”。</p><h2 id="一-什么是工厂方法模式" tabindex="-1">一. 什么是工厂方法模式 <a class="header-anchor" href="#一-什么是工厂方法模式" aria-label="Permalink to &quot;一. 什么是工厂方法模式&quot;">​</a></h2><h3 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h3><p><strong>工厂方法模式</strong>（<code>Factory Method Pattern</code>）是一种<strong>创建型设计模式</strong>，在软件开发中被广泛应用。它提供了一种将对象的创建过程封装起来的方式，使得代码可扩展性更好、更灵活。</p><p>工厂方法模式的<strong>主要思想是</strong>定义一个用于创建对象的<strong>接口</strong>，但将具体的对象创建延迟到子类中去实现。这样，客户端程序使用工厂方法来创建对象，而不需要知道具体的实现细节，从而实现了<strong>解耦</strong>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/47d0da7e5e25495fa0d10ce68159fa60~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=791&amp;h=359&amp;s=103429&amp;e=png&amp;b=fdf3f2" alt="fileOf7174.png"></p><p align="center">工厂方法模式类图</p><h3 id="使用步骤" tabindex="-1">使用步骤 <a class="header-anchor" href="#使用步骤" aria-label="Permalink to &quot;使用步骤&quot;">​</a></h3><p>在 <code>JavaScript</code> 中，可以使用工厂方法模式实现对象的创建和管理，具体的实现方式如下：</p><p>首先，定义一个基础工厂类，作为对象创建的接口，其中包含一个用于创建对象的方法（通常称为工厂方法）。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  createObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 子类需要实现该方法来创建具体对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然后，根据具体的需求，创建子类继承基础工厂类，并实现工厂方法来创建具体的对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteFactory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  createObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>最后，通过客户端代码来使用工厂方法创建对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> factory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> factory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>使用工厂方法模式的<strong>好处</strong>是，当需要新增一种对象时，只需要创建一个新的子类并实现工厂方法即可，而不需要修改客户端代码。这样，能够降低代码的<strong>耦合度</strong>，提高代码的<strong>可维护性</strong>和<strong>可扩展性</strong>。</p><p>工厂方法模式是一种简单而有效的对象创建方式，适用于需要创建多个具有相同行为的对象的场景，能够提供一种灵活的对象创建和管理机制。</p><h2 id="二-安全模式创建的工厂类" tabindex="-1">二. 安全模式创建的工厂类 <a class="header-anchor" href="#二-安全模式创建的工厂类" aria-label="Permalink to &quot;二. 安全模式创建的工厂类&quot;">​</a></h2><h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><p><strong>安全模式创建的工厂类</strong>（<code>Safe Factory Pattern</code>）是一种在 JavaScript 中实现工厂方法模式的方式，它可以确保只能通过工厂类的方法来创建对象，而不能直接实例化工厂类。</p><p>通过使用安全模式创建工厂类，可以确保工厂类的使用符合预期，同时也增强了代码的安全性和可靠性。以下是一个简单示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 创建对象的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上述示例中，我们使用了<strong>构造函数</strong>（<code>Factory</code>）来实现工厂类，并通过判断<code>this</code>对象是否是工厂类的实例来确保只能通过构造函数来创建工厂类的实例。这样，在使用时如果忘记使用<code>new</code>关键字来实例化工厂类，则会自动进行实例化，避免了直接实例化工厂类导致的问题。</p><p>通过使用<strong>安全模式创建的工厂类</strong>，可以实现更严格的对象创建和管理机制，同时保证了代码的安全性和一致性。在实际应用中，可以根据需求对工厂类进行扩展和定制，以满足具体的业务需求。</p><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><p>由此可见，<strong>安全模式创建的工厂类</strong>具有以下<strong>优点</strong>：</p><p><strong>1. 隐藏实例化细节：</strong> 安全模式的工厂类只能通过工厂方法来创建对象，而不允许直接实例化或继承该工厂类。这样可以隐藏具体对象的实例化细节，使得客户端无法直接访问和创建对象，只能通过工厂方法来获取实例。</p><p><strong>2. 防止子类破坏对象的创建逻辑：</strong> 由于安全模式的工厂类不能被继承，子类无法改变工厂方法中的创建逻辑。这确保了对象的创建过程不会被子类随意修改，防止了在创建过程中可能出现的错误或安全隐患。</p><p><strong>3. 提供一致的接口：</strong> 通过工厂方法来统一创建对象，工厂类可以根据不同的参数或条件返回不同类型的对象，但对外提供的接口是一致的。这样可以简化客户端的使用，客户端不需要知道具体的创建过程，只需要调用工厂方法并传入相应的即可获得所需对象。</p><h3 id="案例场景-日志工厂" tabindex="-1">案例场景：日志工厂 <a class="header-anchor" href="#案例场景-日志工厂" aria-label="Permalink to &quot;案例场景：日志工厂&quot;">​</a></h3><p>下面以一个<strong>Logger 工厂类</strong>的示例来说明安全模式创建工厂类的优点：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileLogger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 将日志信息写入文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DatabaseLogger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 将日志信息写入数据库</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Logger createLogger type) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;database&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DatabaseLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IllegalArgumentException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Invalid logger type.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上述示例中，<code>Logger</code>是一个抽象类，具体的日志记录逻辑由<code>FileLogger</code>和<code>DatabaseLogger</code>来实现。<code>LoggerFactory</code>是一个安全模式创建的工厂类，通过工厂方法<code>createLogger</code>来创建<code>Logger</code>的实例。客户端只需调用<code>LoggerFactory</code>的<code>createLogger</code>方法，并传入相应的参数（如<code>file</code>或<code>database</code>）即可获取对应的<code>Logger</code>实例。客户端无法直接实例化<code>Logger</code>类或<code>LoggerFactory</code>类，以保对象的创建逻辑被固定并且隐藏了具体实例化细节。这样的设计使得客户端使用起来更加简单方便，并且保护了对象创建过程的安全性和稳定性。</p><h2 id="三-简单工厂模式与工厂方法模式之间的对比" tabindex="-1">三. 简单工厂模式与工厂方法模式之间的对比 <a class="header-anchor" href="#三-简单工厂模式与工厂方法模式之间的对比" aria-label="Permalink to &quot;三. 简单工厂模式与工厂方法模式之间的对比&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e79818a6984463db253f26389f47197~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1001&amp;h=627&amp;s=518234&amp;e=png&amp;b=edd4c5" alt="fileOf7174.png"></p><p align="center">披萨工厂</p><h3 id="案例场景-披萨店点餐" tabindex="-1">案例场景：披萨店点餐 <a class="header-anchor" href="#案例场景-披萨店点餐" aria-label="Permalink to &quot;案例场景：披萨店点餐&quot;">​</a></h3><p>当你在一个披萨店点餐时，你可以通过简单工厂模式或工厂方法模式来创建不同类型的披萨。这里有两个例子来说明它们之间的区别：</p><p><strong>1. 简单工厂模式示例：</strong></p><p>考虑一个披萨店，它提供不同类型的披萨，如奶酪披萨（<code>Cheese Pizza</code>）、蔬菜披萨（<code>Vegetable Pizza</code>）和海鲜披萨（<code>Seafood Pizza</code>）等。使用简单工厂模式，我们可以创建一个披萨工厂类来处理披萨的实例化逻辑：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PizzaFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Pizza </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createPizza</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cheese&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CheesePizza</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vegetable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VegetablePizza</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;seafood&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SeafoodPizza</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IllegalArgumentException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Invalid pizza type.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Pizza</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 披萨的公共方法和属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CheesePizza</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Pizza</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 奶酪披萨特有的方法和属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 其他类型的披萨类类似，如VegetablePizza和SeafoodPizza</span></span></code></pre></div><p>使用简单工厂模式，我们只需要通过披萨工厂类（PizzaFactory）来创建不同类型的披萨对象，而不需要直接实例化特定类型的披萨。</p><p><strong>2. 工厂方法模式示例：</strong></p><p>假设我们的披萨店进一步发展，对于不同类型的披萨，现在要创建不同的披萨店来处理它们的制作。这里为每个披萨类型创建一个具体的披萨店类，用工厂方法模式实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PizzaStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> abstract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Pizza </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createPizza</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> orderPizza</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Pizza pizza </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createPizza</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 其他制作披萨的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CheesePizzaStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PizzaStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Pizza </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createPizza</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CheesePizza</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 其他类型的披萨店类类似，如VegetablePizzaStore和SeafoodPizzaStore</span></span></code></pre></div><p>在工厂方法模式中，我们定义了一个抽象的<code>PizzaStore</code>类，并在每个具体的店类（如<code>CheesePizzaStore</code>）中实现了创建具体披萨对象的方法。每个具体的店类负责创建特定的披萨类型，使得披萨的创建逻辑分散到不同的类中。</p><p>通过上述两个示例可以看出，简单工厂模式通过一个工厂类集中处理对象的创建逻辑，而工厂方法模式将对象的创建推迟到具体的子类中实现，从而使得不同的产品创建逻辑能够被更加灵活地扩展和修改。</p><p>由此可见，整体区别如下：</p><p><strong>工厂方法模式</strong>（<code>Factory Method Pattern</code>）和<strong>简单工厂模式</strong>（<code>Simple Factory Pattern</code>）是两种常见的工厂模式，它们之间有以下区别：</p><p><strong>1. 设计理念：</strong></p><ul><li>简单工厂模式的主要思想是通过一个工厂类来创建不同类型的对象，将对象的创建逻辑集中在一个地方。工厂类根据传入的参数或条件来决定创建哪种对象。</li><li>工厂方法模式的主要思想是将对象的创建延迟到子类中实现。定义一个抽象的工厂类，该类中声明一个工厂方法，由子类来实现该工厂方法来创建具体的对象。</li></ul><p><strong>2. 参与角色：</strong></p><ul><li>简单工厂模式通常只涉及一个工厂类（Simple Factory）和多个产品类（Product）。</li><li>工厂方法模式涉及一个抽象工厂类（Abstract Factory）、多个具体工厂类（Concrete Factory）和对应的产品类（Product）。</li></ul><p><strong>3. 可扩展性：</strong></p><ul><li>简单工厂模式的可扩展性相对较差，当需要新增一种产品时，需要修改工厂类的代码来增加对新产品的支持。</li><li>工厂方法模式的可扩展性较好，通过添加一个新的具体工厂类和对应的产品类，即可实现对新产品的支持，不需要修改抽象工厂类或其他已有类。</li></ul><p><strong>4. 对象创建的灵活性：</strong></p><ul><li>简单工厂模式在工厂类中集中了对象的创建逻辑，可能会导致工厂类变得较为庞大，一旦需要新增或修改某个产品的创建逻辑，就需要修改工厂类。</li><li>工厂方法模式将对象的创建委托给具体的工厂类，每个工厂类只负责创建一个具体的产品，使得代码更加模块化和灵活，容易扩展和维护。</li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>简单工厂模式适用于简单的<strong>对象创建场景</strong>，可以通过一个工厂类来集中对象的创建逻辑；而工厂方法模式适用于<strong>复杂的对象创建场景</strong>，需要根据具体的产品类型来创建相应的对象，通过子类来实现对象的创建逻辑。选择使用哪种模式取决于具体的需求和设计的复杂性。</p>`,62);function k(r,g,d,E,c,o){const s=l("ArticleFooter");return p(),a("div",null,[e,n(s,{link:"https://juejin.cn/post/7275971781986369551"})])}const u=i(h,[["render",k]]);export{F as __pageData,u as default};
