import{_ as t,c as p,l as i,a as s,t as e,I as h,aU as n,o as k,E as d}from"./chunks/framework.CpXV_ol5.js";const B=JSON.parse('{"title":"Vue 高级指令解析：掌握几个内置指令的各种妙用","description":"","frontmatter":{"title":"Vue 高级指令解析：掌握几个内置指令的各种妙用"},"headers":[],"relativePath":"zh/blog/vuejs2/Vue高级指令解析：掌握几个内置指令的各种妙用.md","filePath":"zh/blog/vuejs2/Vue高级指令解析：掌握几个内置指令的各种妙用.md","lastUpdated":1727083629000}'),E={name:"zh/blog/vuejs2/Vue高级指令解析：掌握几个内置指令的各种妙用.md"},o=n(`<h1 id="vue-高级指令解析-掌握几个内置指令的各种妙用" tabindex="-1">Vue 高级指令解析：掌握几个内置指令的各种妙用 <a class="header-anchor" href="#vue-高级指令解析-掌握几个内置指令的各种妙用" aria-label="Permalink to &quot;Vue 高级指令解析：掌握几个内置指令的各种妙用&quot;">​</a></h1><h2 id="vue-高级指令的重要性" tabindex="-1">Vue 高级指令的重要性 <a class="header-anchor" href="#vue-高级指令的重要性" aria-label="Permalink to &quot;Vue 高级指令的重要性&quot;">​</a></h2><p>Vue 高级指令是一种扩展 <code>Vue.js</code> 框架的功能的方式，可以让你在处理 <code>DOM</code> 元素时具有更多的控制权。它们可以通过自定义指令的方式进行编写和应用。</p><p>高级指令的重要性在于，它们使开发者能够通过 Vue 框架来创建更加复杂和灵活的交互体验。它们能够简化操作，提高效率，增强用户与应用程序的交互性。</p><p>应用场景可以包括但不限于以下几种：</p><ul><li>懒加载</li><li>自动聚焦</li><li>表单验证</li><li>动画效果</li><li>渲染优化</li></ul><p>高级指令的合理运用可以帮助开发者实现各种复杂的交互场景，提高开发效率和用户体验。本文主要介绍几种在<code>Vue.js</code>中特定场景下运用比较常见的指令，主要包括：</p><ul><li><code>v-once</code>：让元素或组件只渲染一次，不再随数据的变化而重新渲染。</li><li><code>v-pre</code>：跳过指定元素及其子元素的编译过程，直接将其原始内容渲染到页面上。</li><li><code>v-cloak</code>：防止页面加载时，展示 Vue 实例尚未编译完成的模板。</li></ul><h2 id="v-once" tabindex="-1"><code>v-once</code> <a class="header-anchor" href="#v-once" aria-label="Permalink to &quot;\`v-once\`&quot;">​</a></h2><p><code>v-once</code> 指令的主要作用是可以让元素或组件只渲染一次，不再随数据的变化而重新渲染。</p><p><strong><code>v-once</code>的用法：</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-once</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ message }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;changeMessage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Change Message&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, Vue.js!&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      changeMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;new message&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f7bd31eb4cb9435c92ae0c9f04629c1d~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=306&amp;h=186&amp;s=12205&amp;e=gif&amp;f=21&amp;b=fdfdfd" alt="0914-1.gif"></p><p>在上述例子中，<code>&lt;p&gt;</code>元素上添加了 <code>v-once</code> 指令，表示该元素只会渲染一次，不会随 <code>message</code> 数据的变化而重新渲染。当点击&quot;Change Message&quot;按钮时，<code>message</code> 的值会改变，但是<code>&lt;p&gt;</code>元素的内容不会更新。</p><p><strong><code>v-once</code>的应用场景：</strong></p><ol><li><p><strong>静态内容</strong>：对于一些静态且不需要动态更新的内容，可以使用 <code>v-once</code> 指令，避免不必要的渲染与性能消耗。</p></li><li><p><strong>优化性能</strong>：在某些情况下，特别是当有大量数据需要渲染时，可以使用 <code>v-once</code> 指令来减少渲染次数，提升应用性能。</p></li></ol><p><strong>注意</strong>：使用 <code>v-once</code> 指令会导致元素或组件的数据绑定失效，因此它应该谨慎使用，仅在必要时使用。当有需要更新的数据时，不应该使用 <code>v-once</code> 指令。</p><h2 id="v-pre" tabindex="-1"><code>v-pre</code> <a class="header-anchor" href="#v-pre" aria-label="Permalink to &quot;\`v-pre\`&quot;">​</a></h2><p><code>v-pre</code> 指令的作用是跳过指定元素及其子元素的编译过程，直接将其原始内容渲染到页面上。这个指令在一些特殊场景下非常有用，可以用来提高编译性能或避免对特定元素内容的误解。</p><p><strong><code>v-pre</code>的用法：</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-pre</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ message }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;changeMessage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Change Message&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;原数据&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      changeMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;新数据&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/482ec05dd68845c9ba0161970acf69ce~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=255&amp;h=150&amp;s=6264&amp;e=png&amp;b=fdfdfd" alt="image.png"></p>`,22),c=i("code",null,"<div>",-1),r=i("code",null,"message",-1),g=i("code",null,"<div>",-1),y=n(`<p><strong><code>v-pre</code>的应用场景：</strong></p><ol><li><p><strong>提高性能</strong>：当某些元素及其子元素的内容不需要 <code>Vue.js</code> 编译过程，并且不会发生变化时，可以使用 <code>v-pre</code> 指令来跳过编译，减少不必要的性能消耗。</p></li><li><p><strong>避免解析冲突</strong>：有时，某些元素内容可能包含类似 <code>Vue.js</code> 插值语法的字符串，但我们希望这些字符串能够原封不动地显示，而不被解析为 <code>Vue.js</code> 的指令或表达式。这时可以使用 <code>v-pre</code> 指令来避免解析冲突。</p></li></ol><p><strong>注意</strong>：使用 <code>v-pre</code> 指令会跳过编译过程，意味着该元素及其子元素的指令、表达式和插值语法都无效，也无法进行数据绑定。因此，<code>v-pre</code> 指令应谨慎使用，在确保不需要 <code>Vue.js</code> 编译的元素上使用。</p><p>因此，在使用 <code>v-pre</code> 指令的元素上，你应该避免使用动态绑定和指令。只有在确定不需要 <code>Vue.js</code> 编译的情况下才应该使用 <code>v-pre</code> 指令。</p><h2 id="v-cloak" tabindex="-1">v-cloak <a class="header-anchor" href="#v-cloak" aria-label="Permalink to &quot;v-cloak&quot;">​</a></h2><p><code>v-cloak</code> 是 <code>Vue.js</code> 中的一种特殊指令，用于防止页面加载时，展示 Vue 实例尚未编译完成的模板。它的主要应用场景是在使用 <code>Vue.js</code> 进行模板渲染时，防止页面出现短暂的未编译内容的闪烁。</p><p><strong><code>v-cloak</code> 的用法：</strong></p><ol><li>首先，在 CSS 中定义一个隐藏元素的类：</li></ol><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">v-cloak</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li>然后，在需要使用 <code>v-cloak</code> 的元素上添加该指令：</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-cloak</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 这里是页面内容 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {{ message }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="3"><li>确保 Vue 实例编译完成后，该元素会被正确显示。</li></ol><p>这样，在 Vue 实例编译前，元素会被隐藏起来，直到编译完成后，再将元素显示出来，避免了页面出现短暂的未编译内容的闪烁。</p>`,13),u=i("code",null,"<div>",-1),v=i("code",null,"v-cloak",-1),_=i("code",null,"Vue",-1),m=n('<p><strong>注意</strong>：要使 <code>v-cloak</code> 生效，你还在 <code>CSS</code> 中定义对应的样式。一般情况下，我们会给具有 <code>v-cloak</code> 指令的元素添加一个自定义的 CSS 类<code>[v-cloak] {display: none;}</code>，当 Vue 实例在编译过程中，具有 v-cloak 指令的元素会被隐藏起来，直到编译完成后才显示出来。</p><p>使用 <code>v-cloak </code>指令可以有效解决 Vue 实例初始化过程中可能出现元素闪动的问题，它能确保页面上只显示已经经过 Vue 实例编译的内容，提升用户体验。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本文简要介绍了<code>Vue</code>框架中几个常见的高级指令，它们在某种特定场景下发挥了各种妙用，提供了更复杂的功能场景方案，但是在使用高级指令时，需要注意掌握各个指令的用法和特点，合理选择和搭配不同的指令，从而实现所需的功能。同时，还需要注意控制指令的使用粒度，避免过度使用指令导致代码难以维护。</p><p>指令的使用也远不止这些，这些仅仅涉及到在 <code>Vue</code> 中内置的某些指令，当我们发现如果内置指令满足不了我们在项目中的使用场景时，<code>Vue</code> 允许开发者创建自定义指令，以满足特定的需求或扩展 <code>Vue</code> 的功能。自定义指令可以用于操作 <code>DOM</code>、添加样式、绑定事件等操作，同时这也需要我们完全理解自定义指令的编写过程，需要理解指令的生命周期钩子函数以及如何与 <code>DOM</code> 元素进行交互。可以根据实际需求，编写符合应用场景的自定义指令，以达到扩展 Vue 功能的目的。</p>',5);function F(a,b,V,C,A,D){const l=d("ArticleFooter");return k(),p("div",null,[o,i("p",null,[s("在上面的例子中，"),c,s("元素上添加了 v-pre 指令。它的子节点"),i("code",null,e(a.message),1),s("不会被 Vue.js 编译，而是直接渲染为"),i("code",null,e(a.message),1),s("。无论"),r,s("的值如何变化，"),g,s("元素都不会更新，仍然只显示"),i("code",null,e(a.message),1),s("。")]),y,i("p",null,[s("在上面的例子中，"),u,s("元素上添加了 "),v,s(" 指令。当"),_,s(" 实例编译完成后，会自动移除该指令对应的样式，然后显示"),i("code",null,e(a.message),1),s("解析后的内容。")]),m,h(l,{link:""})])}const j=t(E,[["render",F]]);export{B as __pageData,j as default};
