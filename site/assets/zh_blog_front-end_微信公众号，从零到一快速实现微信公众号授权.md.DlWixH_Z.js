import{_ as i,c as a,I as n,aU as p,o as t,E as l}from"./chunks/framework.CpXV_ol5.js";const u=JSON.parse('{"title":"从零到一快速实现一个微信公众号授权项目","description":"","frontmatter":{"title":"从零到一快速实现一个微信公众号授权项目"},"headers":[],"relativePath":"zh/blog/front-end/微信公众号，从零到一快速实现微信公众号授权.md","filePath":"zh/blog/front-end/微信公众号，从零到一快速实现微信公众号授权.md","lastUpdated":1727083629000}'),e={name:"zh/blog/front-end/微信公众号，从零到一快速实现微信公众号授权.md"},h=p(`<h1 id="从零到一快速实现一个微信公众号授权项目" tabindex="-1">从零到一快速实现一个微信公众号授权项目 <a class="header-anchor" href="#从零到一快速实现一个微信公众号授权项目" aria-label="Permalink to &quot;从零到一快速实现一个微信公众号授权项目&quot;">​</a></h1><h2 id="一-前言" tabindex="-1">一. 前言 <a class="header-anchor" href="#一-前言" aria-label="Permalink to &quot;一. 前言&quot;">​</a></h2><p>上一篇文章说到，微信官方团队发了一则公告，美其名曰：“为了优化开发体验，避免多个同一功能接口对开发者造成困扰，微信团队将对下发统一消息接口进行如下调整。” 正是由于这个调整，而将部分开发者带入了深渊！对于这个调整，众多的开发者褒贬不一。官方既然已经确定修改了，那么我们应当尽快的完成适配，以便于我们能正常的开发公众号和小程序应用。</p><p>关于微信官方团队发出的公告事宜的具体事项，有还未了解的同学可以浏览我之前的文章：</p><p><a href="https://juejin.cn/post/7289339087289778217" target="_blank" rel="noreferrer">突发！如何应对微信小程序与公众号下发统一消息接口调整</a></p><p>本文将会对上一篇文章中提到的解决方案之一进行详细的实现：<strong>彻底解决方案</strong></p><ol><li>重新写个微信公众号 h5 页面，授权获取 jscode，再来换取公众号 openid。</li><li>使用 openid 按照文档下发微信公众号模版消息，点击消息打开对应的小程序进行查看。</li></ol><h2 id="二-开发前准备" tabindex="-1">二. 开发前准备 <a class="header-anchor" href="#二-开发前准备" aria-label="Permalink to &quot;二. 开发前准备&quot;">​</a></h2><p>由于“下发统一消息接口”影响的是微信小程序内推送到公众号的功能，因此要重新实现这一套，我将默认大家都已经申请了<strong>公众号</strong>和<strong>小程序</strong>。如果你没有申请，确确实实是从零到一开发的，那么就简单看下面如何申请就可以了，很简单！</p><h3 id="_1-申请公众号" tabindex="-1">1. 申请公众号 <a class="header-anchor" href="#_1-申请公众号" aria-label="Permalink to &quot;1. 申请公众号&quot;">​</a></h3><ol><li><p>申请公众号开发者账号：前往 <a href="https://mp.weixin.qq.com/" target="_blank" rel="noreferrer">微信公众平台</a> 申请公众号开发者账号，并完成账号认证。</p></li><li><p>配置公众号开发设置：登录微信公众平台，在“开发-基本配置”中配置好公众号的相关信息，包括服务器配置、公众号名称、AppID、AppSecret 等。</p></li></ol><h3 id="_2-申请小程序" tabindex="-1">2. 申请小程序 <a class="header-anchor" href="#_2-申请小程序" aria-label="Permalink to &quot;2. 申请小程序&quot;">​</a></h3><ol><li><p>申请小程序：前往 <a href="https://mp.weixin.qq.com/cgi-bin/wx" target="_blank" rel="noreferrer">微信公众平台 | 小程序</a> 申请小程序，具体可以按照页面引导操作</p></li><li><p>如果你已经认证了公众号，可以复用公众号的资质快速注册小程序，如下图所示：</p></li></ol><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f4cbc26ddf3349399a0a8c375a13d684~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1463&amp;h=652&amp;s=119751&amp;e=png&amp;b=fefefe" alt="image.png"></p><h2 id="三-进入开发阶段" tabindex="-1">三. 进入开发阶段 <a class="header-anchor" href="#三-进入开发阶段" aria-label="Permalink to &quot;三. 进入开发阶段&quot;">​</a></h2><h3 id="_1-创建网页授权链接" tabindex="-1">1. 创建网页授权链接 <a class="header-anchor" href="#_1-创建网页授权链接" aria-label="Permalink to &quot;1. 创建网页授权链接&quot;">​</a></h3><p>在公众号菜单设置或 H5 页面中，创建一个用于获取用户授权的链接。链接的格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>https://open.weixin.qq.com/connect/oauth2/authorize</span></span>
<span class="line"><span>?appid=APPID</span></span>
<span class="line"><span>&amp;redirect_uri=REDIRECT_URI</span></span>
<span class="line"><span>&amp;response_type=code</span></span>
<span class="line"><span>&amp;scope=SCOPE</span></span>
<span class="line"><span>&amp;state=STATE</span></span>
<span class="line"><span>#wechat_redirect</span></span></code></pre></div><p>我们分析下上面的链接，其中主要的传递参数有：</p><ul><li>appid：公众号的 AppID <ul><li>公众号的唯一标识，可以在公众号后台获取到 AppID</li></ul></li><li>redirect_uri：用户同意授权后的回调 URL <ul><li>授权后重定向的回调链接地址，需使用 urlEncode 对链接进行处理</li></ul></li><li>response_type：返回类型，固定填写 code</li><li>scope：应用授权作用域 <ul><li>snsapi_base：不弹出授权页面，直接跳转，只能获取用户 openid</li><li>snsapi_userinfo：弹出授权页面，可通过 openid 拿到昵称、性别、所在地。并且， 即使在未关注的情况下，只要用户授权，也能获取其信息</li></ul></li><li>state：自定义参数 <ul><li>重定向后会带上 state 参数，开发者可以填写 a-zA-Z0-9 的参数值，最多 128 字节</li></ul></li><li>#wechat_redirect：固定传递 <ul><li>必须带此参数</li></ul></li></ul><p>注意：因为我们仅仅需要获取到 openid，所以我们不需要弹出授权页面拿到微信昵称、性别等资料。因此我们仅做静默授权获取 code 即可，这样实现起来比较简单</p><h3 id="_2-用户授权并回调" tabindex="-1">2. 用户授权并回调 <a class="header-anchor" href="#_2-用户授权并回调" aria-label="Permalink to &quot;2. 用户授权并回调&quot;">​</a></h3><p>用户在打开 H5 页面时，点击上一步生成的链接，会跳转到微信授权页面（我是用的静默授权），确认授权后，微信会跳转到上一步中指定的 REDIRECT_URI，并携带一个 code 参数。</p><p>这时候我们需要解析一下 URL，在回调的 URL 中，获取 URL 中的 code 参数。</p><h3 id="_3-使用-code-换取-openid" tabindex="-1">3. 使用 code 换取 openid <a class="header-anchor" href="#_3-使用-code-换取-openid" aria-label="Permalink to &quot;3. 使用 code 换取 openid&quot;">​</a></h3><p>使用 code 换取用户的 openid。可以使用服务器端的语言或框架来实现此步骤。可以通过以下 API 来换取 openid：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>https://api.weixin.qq.com/sns/oauth2/access_token</span></span>
<span class="line"><span>?appid=APPID</span></span>
<span class="line"><span>&amp;secret=APPSECRET</span></span>
<span class="line"><span>&amp;code=CODE</span></span>
<span class="line"><span>&amp;grant_type=authorization_code</span></span></code></pre></div><p>其中，APPID 和 APPSECRET 分别为公众号的 AppID 和 AppSecret，CODE 为上一步获取到的 code 参数。</p><blockquote><p>尤其注意：由于公众号的 secret 安全级别都非常高，必须只保存在服务器，不允许传给客户端。因此不建议使用前端直接获取 openid，建议使用后端语言实现此步骤。</p></blockquote><h3 id="_4-获取到-openid" tabindex="-1">4. 获取到 openid <a class="header-anchor" href="#_4-获取到-openid" aria-label="Permalink to &quot;4. 获取到 openid&quot;">​</a></h3><p>通过上一步的 API 调用，会返回一个包含 openid 的 JSON 数据。解析 JSON 数据，即可获取到用户的 openid。</p><p>至此，我们就完成了 openid 的获取，可以正常的使用它进行推送开发了！</p><h2 id="四-遇到的几个问题" tabindex="-1">四. 遇到的几个问题 <a class="header-anchor" href="#四-遇到的几个问题" aria-label="Permalink to &quot;四. 遇到的几个问题&quot;">​</a></h2><h3 id="_1-如何调试" tabindex="-1">1. 如何调试 <a class="header-anchor" href="#_1-如何调试" aria-label="Permalink to &quot;1. 如何调试&quot;">​</a></h3><p>其实调试问题，微信官方也已经考虑到了这个问题，在微信公众号的后台，他们提供了一下开发者工具，可以让我们在开发阶段进行便捷的测试，如下图所示：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c38742fb9d045558f00bba2653d87b9~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1276&amp;h=517&amp;s=91040&amp;e=png&amp;b=fdfdfd" alt="image.png"> 在这里，我们主要使用的是 <strong>“公众平台测试账号”</strong> 这个工具，下面我们看一下这个工具是如何使用的。</p><ul><li><strong>第一步</strong></li></ul><p>点击 <strong>“公众平台测试账号”</strong> ，用自己微信扫码进行登录，然后就进入到了主页，在主页中我们可以看到给我们生成了测试的 appID 和 appsecret，这两个重要的参数以供我们测试授权使用</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a5ec6cae0c14be4be25fe81e4358040~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1088&amp;h=260&amp;s=15792&amp;e=png&amp;b=fafafa" alt="image.png"></p><ul><li><strong>第二步</strong></li></ul><p>在当前页面中我们找到 <strong>“测试号二维码”</strong> 一栏，使用需要调试的微信扫码关注测试公众号，如下图所示：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d32cdeeb817144dea3b9e73304d2f49d~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1110&amp;h=331&amp;s=30509&amp;e=png&amp;b=fafafa" alt="image.png"></p><ul><li><strong>第三步</strong></li></ul><p>在当前页面继续向下滚动页面，找到 <strong>“网页授权获取用户基本信息”</strong>，点击修改，添加授权回调域名，如下图所示：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e32f957032c431292aa1a57f577b124~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=813&amp;h=660&amp;s=60542&amp;e=png&amp;b=f3f3f3" alt="image.png"></p><p>完成上面的两步后，我们就可以进行愉快的测试了，可以使用手机微信，或者是微信开发者工具进行调试！</p><blockquote><p>注意：调试阶段，可以使用域名或 IP 都可以，在正式上线环境下，必须使用备案的域名才可以！</p></blockquote><h3 id="_2-redirect-uri" tabindex="-1">2. redirect_uri <a class="header-anchor" href="#_2-redirect-uri" aria-label="Permalink to &quot;2. redirect_uri&quot;">​</a></h3><ul><li>redirect_uri 必须提前在微信公众号后台中维护好授权回调域名，否则会报 <strong>“10003：redirect_uri 域名与后台配置不一致”</strong></li><li>redirect_uri 必须使用 urlEncode 进行编码处理</li><li>使用 Vue 框架开发的，建议使用 history 路由模式，可以避免微信回调链接的各种参数拼接问题</li><li>使用 Vue 开发时，如果你非要使用 hash 路由模式，也不是不可以解决，只能在路由拦截器中处理一下 # 拼接的问题，重新整理成正确的路由链接就可以了</li></ul><h3 id="_3-重定向循环问题" tabindex="-1">3. 重定向循环问题 <a class="header-anchor" href="#_3-重定向循环问题" aria-label="Permalink to &quot;3. 重定向循环问题&quot;">​</a></h3><p>在开发调试的过程中遇到了这样一个问题，授权完成后，返回重定向页面，进入了死循环？结果就是关闭不了了，这是为什么呢？我猜测这是微信浏览器自己的 bug，不过时隔多年，微信并没有解决它。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/24120b31a73b4ab48773f230c35c1d35~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1372&amp;h=490&amp;s=77154&amp;e=png&amp;b=ffffff" alt="image.png"></p><p>以上面的页面跳转流程图为例，授权完成后，路由栈应该为只有页面 C，但结果却不是这样的。</p><p>结果是存在两个路由：页面 A、页面 C，在页面 C 中点返回，则返回到了页面 A，页面 A 会自动授权，则又进行了上述流程图的步骤，如此循环往复，结果就是退不出去！</p><p>如何做呢？总不能让用户手动关闭浏览器吧？</p><p>解决方案：我只能在页面 C 中添加一个按钮 - <strong>“返回”</strong>，点击返回可自动退出，解决了重定向问题。如果你有更好的实现方案，欢迎说来听听。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a916336fd7574e8683e19bcdf95b338e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=764&amp;h=547&amp;s=18822&amp;e=png&amp;b=ffffff" alt="image.png"></p><p>接下来我们实现这个返回功能就行了，WeixinJSBridge 提供了关闭浏览器的 API，下面是我自己的实现代码。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;back-view&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isWeixin&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;back-text&quot;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> @click=&quot;close&quot;&gt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> &lt;icon</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;arrow-left&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">icon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; 返回 &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">export default {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 关闭微信浏览器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (WeixinJSBridge) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          WeixinJSBridge.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;closeWindow&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 判断是否为微信浏览器环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    isWeixin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WeixinJSBridge </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WeixinJSBridge.invoke </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;function&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scss&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scoped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.back-view {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  position: fixed;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  left: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  right: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  bottom: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  padding: 15px 20px;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  background</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color: $color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">primary;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.back-text {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  color: white;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  font</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">weight: bold;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  font</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">size: 16px;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="五-总结" tabindex="-1">五. 总结 <a class="header-anchor" href="#五-总结" aria-label="Permalink to &quot;五. 总结&quot;">​</a></h2><p>至此，我们快速的完成了从零到壹实现一个微信公众号授权项目，成功的获取到了微信公众号的 openid，我们可以愉快的使用 openid 绑定到自己的系统进行项目开发了，可以按照标准化的流程进行下发微信公众号模版消息了。</p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html" target="_blank" rel="noreferrer">官方文档：微信网页开发 - 网页授权</a></p>`,62);function k(r,o,d,E,c,g){const s=l("ArticleFooter");return t(),a("div",null,[h,n(s,{link:["juejin::https://juejin.cn/post/7291133720903516219","weixin::https://mp.weixin.qq.com/s/jKKxS3nJTAeD2MfRh_BUsA"]},null,8,["link"])])}const m=i(e,[["render",k]]);export{u as __pageData,m as default};
