import{_ as i,c as l,I as a,aU as p,o as n,E as e}from"./chunks/framework.CpXV_ol5.js";const y=JSON.parse('{"title":"Rollup 入门指南：解密高效的 JavaScript 打包器","description":"","frontmatter":{"title":"Rollup 入门指南：解密高效的 JavaScript 打包器"},"headers":[],"relativePath":"zh/blog/tools/Rollup入门指南：解密高效的JavaScript打包器.md","filePath":"zh/blog/tools/Rollup入门指南：解密高效的JavaScript打包器.md","lastUpdated":1725606759000}'),t={name:"zh/blog/tools/Rollup入门指南：解密高效的JavaScript打包器.md"},h=p(`<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb4dbb9041ae429f8252c3cd755d6dd2~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1448&amp;h=572&amp;s=161268&amp;e=png&amp;b=ffffff" alt="image.png"></p><h2 id="一-引言" tabindex="-1">一. 引言 <a class="header-anchor" href="#一-引言" aria-label="Permalink to &quot;一. 引言&quot;">​</a></h2><p>在现代的 Web 开发中，JavaScript 模块打包器扮演着至关重要的角色。打包器可以将分散的模块代码转换成更适合在浏览器中运行的形式，从而帮助开发人员提高代码的可维护性和性能。而在诸多模块打包器中，Rollup 凭借独特的优势逐渐成为开发者们的首选。</p><p>Rollup 是一个现代的 JavaScript 模块打包器，它以简约、高效和可扩展性而闻名。与其他打包器相比，Rollup 专注于 ES 模块，并且提供了强大的 Tree Shaking 来减少不必要的代码，最大限度的优化和提升应用的性能。</p><p>在本篇文章中，我们将一步步介绍 Rollup 的基本用法，帮助你更好地将其应用于你的项目。</p><h2 id="二-什么是-rollup" tabindex="-1">二. 什么是 Rollup <a class="header-anchor" href="#二-什么是-rollup" aria-label="Permalink to &quot;二. 什么是 Rollup&quot;">​</a></h2><p>Rollup 是一种 JavaScript 模块打包工具，它可以将 JavaScript 模块打包成一个或多个独立的文件，用于在浏览器或其他环境中运行。它根据模块之间的依赖关系，将这些模块合并成一个或多个 bundle 文件。与其他常见的打包工具（如 Webpack 和 Parcel）相比，Rollup 的主要特点是：</p><ol><li><p><strong>Tree Shaking</strong>: Rollup 通过静态分析代码，可以检测到哪些模块没有被使用到，并且会将这些没有使用到的模块删除，以减小最终的 bundle 文件的体积。这个过程被称为 Tree Shaking，有助于减少不必要的代码和提升应用的性能。</p></li><li><p><strong>ES 模块（ESM）支持</strong>: Rollup 原生支持 ES 模块的语法，可以直接处理 ES 块的导入和导出。这使得开发者可以使用最新的 JavaScript 言特性，以更代化的方式组织和管理模块。</p></li><li><p><strong>插件系统</strong>: Rollup 提供了丰富的插件系统，允许开发者通过插件来扩展和定制构建过程。可以使用插件来进行代码转换、模块解析、资源处理等操作，以满足不同项目的需。</p></li><li><p><strong>简单和轻量</strong>: 相比于其他打包工具，Rollup 具有简单、轻量特点。它的配置简洁，配置选项较少，使用起来加直观和容易上手。</p></li></ol><p>总的来说，Rollup 被广泛应用于构建 JavaScript 库和组件，它可以帮助开发者将模块打包成更小、高效的 bundle 文件，减少不必要的代码和资源加载，提升应用的性能。它的 Tree Shaking 功能和对 ES 模块的原生支持使得它成为开发现代化 JavaScript 应用的有力工具。</p><h2 id="三-rollup-的核心概念" tabindex="-1">三. Rollup 的核心概念 <a class="header-anchor" href="#三-rollup-的核心概念" aria-label="Permalink to &quot;三. Rollup 的核心概念&quot;">​</a></h2><p>Rollup 有一些核心概念，理解这些概念对于使用 Rollup 非常重要。以下是 Rollup 的核心概念：</p><ol><li><p><strong>入口文件（Entry File）</strong>：入口文件是你的应用程序或库的主文件，是 Rollup 开始构建的起点。入口文件指定了依赖关系图的根节点。</p></li><li><p><strong>依赖关系图（Dependency Graph）</strong>：依赖关系图是 Rollup 根据入口文件和所有相关依赖自动构建的一张图表。它了各个模块之间的依赖关系，包括每个模块依赖的其他模块和导出的内容。</p></li><li><p><strong>模块（Module）</strong>：模是代码的单独单元，可以是一个文件或一个文件中的一个部分。每个模块都有自己的作域，并且可以导入和导出变量、函数和类等。</p></li><li><p><strong>导入（Import）和导出（Export）</strong>：通过导入和导出语法，模块可以与其他模块进行交互。导入语法允许模块使用其他模块中导出的内容，而导出语法允许模块将自己的内容暴露给其他模块使用。</p></li><li><p><strong>Bundle</strong>：Bundle 是 Rollup 构建输出的最终文件。它包含所有被捆绑在一起的模块和它们的依赖关系。Bundle 可以是单个 JavaScript 文件，也可以是多个文件组成的目录。</p></li><li><p><strong>模块格式（Module Format）</strong>：模块格式定义了将模块打包到 Bundle 中的方式。常见的模块格式包括 ES 模块（ESM），CommonJS 模块（CJS），AMD 模块以及全局变量 IIFE）等。</p></li><li><p><strong>插件（Plugins）</strong>：插件是 Rollup 的扩展，用于在构建过程中自定义和增强功能。它们可以在各个阶段进行代码转换、优化、添加附加功能和处理其他任务。通过使用插件，你可以根据自己的特定需求来扩展和定制 Rollup 的行为。</p></li><li><p><strong>Tree Shaking</strong>：Tree Shaking 是 Rollup 的一个重要特性，它能够通过静态分析准确识别未使用的代码，并将其从 Bundle 中删除。这样可以减小 Bundle 的大小，优化应用的性能。</p></li></ol><p>这些核心概念涵盖了 Rollup 的主要功能和基本操作。理这些概念将帮助你更好地使用 Rollup 构建和打包你的应用程序或库。</p><h2 id="四-安装和配置-rollup" tabindex="-1">四. 安装和配置 Rollup <a class="header-anchor" href="#四-安装和配置-rollup" aria-label="Permalink to &quot;四. 安装和配置 Rollup&quot;">​</a></h2><p>要安装和配置 Rollup，请按照以下步骤进行操作：</p><h3 id="_1-安装-node-js" tabindex="-1">1. 安装 Node.js <a class="header-anchor" href="#_1-安装-node-js" aria-label="Permalink to &quot;1. 安装 Node.js&quot;">​</a></h3><p>首先，确保你的计算机上已经安装了 Node.js，可以从官方网站（<a href="https://nodejs.org" target="_blank" rel="noreferrer">https://nodejs.org</a>）下载并安装适合你操作系统的最新版本。</p><h3 id="_2-创建项目" tabindex="-1">2. 创建项目 <a class="header-anchor" href="#_2-创建项目" aria-label="Permalink to &quot;2. 创建项目&quot;">​</a></h3><p>在你的项目文件夹中创建一个新的文件夹，作为你的 Rollup 项目的根目录。</p><h3 id="_3-初始化-npm" tabindex="-1">3. 初始化 npm <a class="header-anchor" href="#_3-初始化-npm" aria-label="Permalink to &quot;3. 初始化 npm&quot;">​</a></h3><p>在终端中，导航到你的项目根目录，并运行以下命令，初始化一个新的 npm 项目，并按照提示进行配置：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm init</span></span></code></pre></div><h3 id="_4-安装-rollup" tabindex="-1">4. 安装 Rollup <a class="header-anchor" href="#_4-安装-rollup" aria-label="Permalink to &quot;4. 安装 Rollup&quot;">​</a></h3><ul><li><p>全局安装 Rollup：在终端中运行以下命令，全局安装 Rollup：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install -g rollup</span></span></code></pre></div></li><li><p>本地安装 Rollup：在终端中运行以下命令，将 Rollup 作为项目的开发依赖项进行本地安装：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install --save-dev rollup</span></span></code></pre></div></li></ul><h3 id="_5-创建-rollup-配置文件" tabindex="-1">5. 创建 Rollup 配置文件 <a class="header-anchor" href="#_5-创建-rollup-配置文件" aria-label="Permalink to &quot;5. 创建 Rollup 配置文件&quot;">​</a></h3><p>在项目根目录中，创建一个名为<code>rollup.config.js</code>的文件，并配置 Rollup 的打包选项。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  input: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指定入口文件的路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    file: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist/bundle.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指定输出文件的路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    format: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;umd&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 指定输出的模块格式，可以是 &#39;umd&#39;, &#39;es&#39;, &#39;cjs&#39;, &#39;iife&#39; 等</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_6-编写源代码" tabindex="-1">6. 编写源代码 <a class="header-anchor" href="#_6-编写源代码" aria-label="Permalink to &quot;6. 编写源代码&quot;">​</a></h3><p>在<code>src</code>目录中，创建你的源代码文件。这些文件将会被 Rollup 打包成一个或多个输出文件。</p><h3 id="_7-运行-rollup" tabindex="-1">7. 运行 Rollup <a class="header-anchor" href="#_7-运行-rollup" aria-label="Permalink to &quot;7. 运行 Rollup&quot;">​</a></h3><p>在终端中运行以下命令，使用配置文件进行打包：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>rollup -c</span></span></code></pre></div><p>这将会根据配置文件中的设置来进行打包，并生成输出文件。</p><p>以上是基本的 Rollup 安装和配置步骤。你可以根据具体需求和项目结构，进一步配置 Rollup 插件、优化选项和其他设置，以满足你的需求。</p><h2 id="五-常用的-rollup-命令" tabindex="-1">五. 常用的 Rollup 命令 <a class="header-anchor" href="#五-常用的-rollup-命令" aria-label="Permalink to &quot;五. 常用的 Rollup 命令&quot;">​</a></h2><p>Rollup 提供了一些基本的命令和选项来构建和管理项目。下面是一些常用的 Rollup 命令的说明：</p><ol><li><p><code>rollup -c</code> 或 <code>rollup --config</code></p><ul><li>描述：根据配置文件构建项目</li><li>说明：Rollup 使用 rollup.config.js 为默认的配置文件，通过该命令可以根据配置文件中的设置构建项目。</li></ul></li><li><p><code>rollup --input &lt;入口文件&gt;</code></p><ul><li>描述：指定入口文件</li><li>说明：使用该命令可以手动指定入口文件，覆盖配置文件中的设置。</li></ul></li><li><p><code>rollup --output.file &lt;输出文件&gt;</code></p><ul><li>描述：指定输出文件</li><li>说明：使用该命令可以手动指定输出文件，覆盖配置文件中的设置。</li></ul></li><li><p><code>rollup --format &lt;输出格式&gt;</code></p><ul><li>描述：指定输出格式</li><li>说明：使用该命令可以手动指定输出的模块格式，如 esm、umd、iife 等覆盖配置文件中的设置。</li></ul></li><li><p><code>rollup --watch</code></p><ul><li>描述：监听文件变化，自动重新构建</li><li>说明：通过该命令可以启动监听模式，当文件发生变化时，Rollup 会自动重新构建项目。</li></ul></li><li><p><code>rollup --silent</code></p><ul><li>描述：静默模式，不输出构建信息</li><li>说明：使用该命可以启用静默模式，在构建过程中不输出任何构建信息。</li></ul></li><li><p><code>rollup --environment &lt;环境变量&gt;</code></p><ul><li>描述：指环境变量</li><li>说明：通过该命令可以指定环境变量，可以在配置文件或代码中使用这些变量。</li></ul></li><li><p><code>rollup --config &lt;配置文件&gt;</code></p><ul><li>描述：指定配置文件</li><li>说明：使用该命令可以手动指定一个自定义配置文件，覆盖默认的 rollup.config.js。</li></ul></li></ol><p>这些是一些常用的 Rollup 命令及其说明，你可以根据需要选择合适的命令来构建、调试和管理你的项目。同时，Rollup 还提供了许多其他选和插件来增强和定制功能，你可以通过<code>rollup --help</code>命令来查看所有可用的选项和命令。</p><h2 id="六-常用的-rollup-插件" tabindex="-1">六. 常用的 Rollup 插件 <a class="header-anchor" href="#六-常用的-rollup-插件" aria-label="Permalink to &quot;六. 常用的 Rollup 插件&quot;">​</a></h2><p>Rollup 的强大之处在于其丰富的插件生态系统。各种插件可以帮助我们在构建过程中进行代码转换、压缩、优化和其他各种增强功能。如 Babel、PostCSS 和 Uglify 等，它们可以用来优化和转换代码。下面将演示如何使用这些插件。</p><h3 id="_1-babel-插件" tabindex="-1">1. Babel 插件 <a class="header-anchor" href="#_1-babel-插件" aria-label="Permalink to &quot;1. Babel 插件&quot;">​</a></h3><p>使用 Babel 插件，我们可以将我们的代码从最新的 JavaScript 语法转换为更广泛支持的版本。我们可以使用@babel/preset-env 预设来配置所需的转换规则。</p><ul><li><p>安装 Babel 和 Rollup 的 Babel 插件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install --save-dev @babel/core @babel/preset-env rollup-plugin-babel</span></span></code></pre></div></li><li><p>在 Rollup 配置文件中添加 Babel 插件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> babel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rollup-plugin-babel&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  input: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    file: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist/bundle.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    format: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;umd&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    babel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      exclude: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node_modules/**&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 忽略node_modules目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      presets: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/preset-env&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 配置Babel预设</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>这样，Rollup 将使用 Babel 插件将 ES6+代码转换为兼容各种浏览器的 ES5 代码。</p><h3 id="_2-postcss-插件" tabindex="-1">2. PostCSS 插件 <a class="header-anchor" href="#_2-postcss-插件" aria-label="Permalink to &quot;2. PostCSS 插件&quot;">​</a></h3><p>使用 PostCSS 插件，我们可以对 CSS 文件进行转换和优化。我们可以使用 postcss-preset-env 预设来运行一系列 PostCSS 插件。</p><ul><li><p>安装 PostCSS 和 Rollup 的 PostCSS 插件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install --save-dev rollup-plugin-postcss postcss-preset-env</span></span></code></pre></div></li><li><p>在 Roll 配置文件中添加 PostCSS 插件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> postcss </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rollup-plugin-postcss&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  input: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    file: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist/bundle.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    format: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;umd&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    postcss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      plugins: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;postcss-preset-env&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)()]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>这样，Rollup 将会使用 PostCSS 插件对 CSS 文件进行转换和优化。</p><h3 id="_3-uglify-插件" tabindex="-1">3. Uglify 插件 <a class="header-anchor" href="#_3-uglify-插件" aria-label="Permalink to &quot;3. Uglify 插件&quot;">​</a></h3><p>使用 Uglify 插件，我们可以对生成的代码进行压缩和优化。</p><ul><li><p>安装 Uglify 和 Rollup 的 Uglify 插件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install --save-dev rollup-plugin-uglify</span></span></code></pre></div></li><li><p>在 Rollup 配置文件中添加 Uglify 插件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { uglify } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rollup-plugin-uglify&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  input: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    file: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist/bundle.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    format: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;umd&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uglify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>这样，Rollup 将使用 Uglify 插件对打包后的代码进行压缩和优化。</p><p>使用这些插件后，你可以在 Rollup 的构建过程中对代码进行更多的优化和转换操作。当然，还有许多其他的插件可供选择，你可以根据自己的需求选择合适的插件来增强 Rollup 的功能和灵活性。</p><h2 id="七-总结" tabindex="-1">七. 总结 <a class="header-anchor" href="#七-总结" aria-label="Permalink to &quot;七. 总结&quot;">​</a></h2><p>通过本篇文章，相信大家已经了解了 Rollup 这个强大的 JavaScript 模块打包器，并学习了如何使用它来优化代码打包。通过对本篇文章的学习，我们都已经学会了安装和配置 Rollup，了解了基本的命令和选项，掌握了一些常用的插件和最佳实践。希望这些知识和技巧能够帮助你在项目中更好地应用 Rollup，提升代码的可维护性和性能。</p><p>使用 Rollup 的好处是显而易见的：它可以帮助你在打包过程中自动移除未使用的代码、生成更小的打包体积，提供更好的代码分割和按需加载功能，同时还保留了 ES 模块的特性，使得你的代码更加可读和可维护。除此之外，Rollup 还提供了丰富的插件生态系统，可以满足各种特定需求的扩展和功能拓展。</p><p>然而，要成为一名真正的 Rollup 专家，还需要不断学习和实践。Rollup 的功能和选项非常丰富，可以根据不同的项目需求进行配置和定制。同时，也要关注 Rollup 社区的动态，了解最新的插件和功能，以便在工作中应用得最合适。</p><p>希望这篇 Rollup 入门指南能够帮助到你，为你在项目中的代码打包过程带来便利和高效。</p>`,58);function o(r,k,d,u,c,E){const s=e("ArticleFooter");return n(),l("div",null,[h,a(s,{link:"https://juejin.cn/post/7298161887882133558"})])}const b=i(t,[["render",o]]);export{y as __pageData,b as default};
