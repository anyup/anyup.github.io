import{_ as i,c as a,I as n,aU as l,o as h,E as t}from"./chunks/framework.CpXV_ol5.js";const F=JSON.parse('{"title":"探索 Blob 对象的应用场景和实例分析","description":"","frontmatter":{"title":"探索 Blob 对象的应用场景和实例分析"},"headers":[],"relativePath":"zh/blog/front-end/Blob实践-应用场景和实例分析.md","filePath":"zh/blog/front-end/Blob实践-应用场景和实例分析.md","lastUpdated":1727083629000}'),p={name:"zh/blog/front-end/Blob实践-应用场景和实例分析.md"},k=l(`<h1 id="探索-blob-对象的应用场景和实例分析" tabindex="-1">探索 Blob 对象的应用场景和实例分析 <a class="header-anchor" href="#探索-blob-对象的应用场景和实例分析" aria-label="Permalink to &quot;探索 Blob 对象的应用场景和实例分析&quot;">​</a></h1><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0344e2b33e1406890e1ec2e11db3ef7~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1458&amp;h=626&amp;s=188843&amp;e=png&amp;b=cfeaef" alt="image.png"></p><h2 id="一-引言" tabindex="-1">一. 引言 <a class="header-anchor" href="#一-引言" aria-label="Permalink to &quot;一. 引言&quot;">​</a></h2><p>当我们在开发 Web 应用程序时，常常会遇到需要处理二进制数据的情况。这时，Blob（Binary Large Object）对象就成为了一个非常有用的工具。Blob 对象可以用来表示一段二进制数据，它可以存储和操作各种类型的数据，从图片、音频和视频，到文件等。</p><p>上一篇文章，我们学习了 Blob 的一些常见操作以及使用方式，详细查看请点击以下链接：</p><p><a href="https://juejin.cn/post/7306694295246585895" target="_blank" rel="noreferrer">Blob 学习指南：从零开始学习 JavaScript Blob 对象的使用</a></p><p>在本篇文章中，我们将继续探讨 Blob 对象的应用场景和实例，帮助大家更好地理解和应用这一技术。</p><h2 id="二-文件上传和下载" tabindex="-1">二. 文件上传和下载 <a class="header-anchor" href="#二-文件上传和下载" aria-label="Permalink to &quot;二. 文件上传和下载&quot;">​</a></h2><p>当我们在网页应用程序中进行文件上传和下载时，Blob 对象是一个强大的工具。接下来，我们将学习如何使用 FormData 和 Blob 对象来实现文件上传和使用 Blob 对象来实现文件下载。</p><h3 id="_1-文件上传-通过-formdata-和-blob-对象实现" tabindex="-1">1. 文件上传：通过 FormData 和 Blob 对象实现 <a class="header-anchor" href="#_1-文件上传-通过-formdata-和-blob-对象实现" aria-label="Permalink to &quot;1. 文件上传：通过 FormData 和 Blob 对象实现&quot;">​</a></h3><p>文件上传是指将本地计算机上的文件发送到服务器端。在 JavaScript 中，可以通过 FormData 和 Blob 对象来实现文件上传。</p><p>首先，让我们来看看如何使用 FormData 和 Blob 对象来进行文件上传的步骤：</p><ol><li><strong>获取文件输入框并监听选择事件</strong>：首先，我们需要获取用户选择的文件，同时对文件输入框进行监听，当用户选择文件时触发事件，可以通过以下方式获取文件输入框并添加事件监听器。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fileInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;file-input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fileInput.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;change&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //这里处理文件上传逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ol start="2"><li><strong>获取选择的文件</strong>：从文件输入框中获取用户选择的文件。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fileInput.files[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ol start="3"><li><strong>创建 FormData 对象</strong>：创建一个 FormData 对象来存储文件数据。将文件添加到 FormData 对象中，可以使用 append() 方法将文件添加到 FormData 对象中。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> formData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FormData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">formData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;file&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, file)</span></span></code></pre></div><ol start="4"><li><strong>发送文件数据到服务器</strong>：通过使用 fetch 等方法发送文件数据到服务器，并在 body 中包含 FormData 对象。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://your-upload-api.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  body: formData</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 处理上传成功的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;文件上传成功&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 处理上传失败的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;文件上传失败&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span></code></pre></div><p>通过以上步骤，我们可以使用 FormData 和 Blob 对象来实现文件上传功能。在这个示例中，我们将用户选择的文件添加到 FormData 对象中，并使用 fetch 方法将 FormData 对象发送到服务器。</p><h3 id="_2-文件下载-使用-blob-对象实现" tabindex="-1">2. 文件下载：使用 Blob 对象实现 <a class="header-anchor" href="#_2-文件下载-使用-blob-对象实现" aria-label="Permalink to &quot;2. 文件下载：使用 Blob 对象实现&quot;">​</a></h3><p>文件下载是指从服务器端获取文件数据，并在客户端上将其保存为一个可下载的文件。在 JavaScript 中，同样可以使用 Blob 对象来实现文件下载。</p><p>以下是使用 Blob 对象实现文件下载的步骤：</p><ol><li><strong>发送请求获取文件数据</strong>：使用 fetch 方法发送请求到服务器以获取文件数据。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://your-download-api.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">blob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">blob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在这里处理文件下载逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;文件下载失败&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span></code></pre></div><ol start="2"><li><strong>创建下载链接</strong>：使用 URL.createObjectURL() 方法将 Blob 对象转换为可下载的链接。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> downloadLink</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">downloadLink.href </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createObjectURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blob)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">downloadLink.download </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;file.txt&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 设置下载的文件名</span></span></code></pre></div><ol start="3"><li><strong>触发点击事件进行文件下载</strong>：模拟点击创建的下载链接，触发下载。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">downloadLink.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>通过以上步骤，我们可以使用 Blob 对象来实现文件下载功能。在这个示例中，我们使用 fetch 方法获取文件数据并将其转换为 Blob 对象，然后创建一个可下载链接，通过触发点击事件来实现文件下载。</p><p>如何使用 FormData 和 Blob 对象实现文件上传和使用 Blob 对象来实现文件下载。通过些方法，我们可以轻松地在网页用程序中处理文件上传和下载的功能，提供更好的用户体验。</p><h2 id="三-canvas-画布保存" tabindex="-1">三. Canvas 画布保存 <a class="header-anchor" href="#三-canvas-画布保存" aria-label="Permalink to &quot;三. Canvas 画布保存&quot;">​</a></h2><p>当我们在 Canvas 进行创作时，可以使用 Blob 对象来进行处理，将整个 Canvas 保存为 Blob 格式的图片文件。</p><p>以下是保存画布为 Blob 格式的图片的步骤：</p><ol><li><strong>创建 Canvas 元素</strong>：首先，我们需要在 HTML 中创建一个 Canvas 元素，用于显示和编辑图片。</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">canvas</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;canvas&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">canvas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="2"><li><strong>获取 Canvas 上下文</strong>：使用 getContext() 方法获取 Canvas 的上下文。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> canvas</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;canvas&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canvas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="3"><li><strong>在 Canvas 上绘制内容</strong>：使用绘制 API 方法在 Canvas 上进行绘制，如绘制文本、图像等。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.font </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;30px Arial&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="4"><li><strong>将 Canvas 保存为 Blob</strong>：使用 toBlob() 方法将 Canvas 保存为 Blob 对象。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">canvas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBlob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">blob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 在这里处理 Blob 对象，保存为图片文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;image/jpeg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以设置输出的图片格式，如 image/jpeg、image/png 等</span></span></code></pre></div><p>通过以上的代码，我们可以将 Canvas 保存为 Blob 格式的图片文件。上述代码的实现是在 Canvas 上绘制了一段文本，并使用 toBlob() 方法将 Canvas 保存为 Blob 对象。</p><p>之后可以使用上面已经介绍过的文件下载的方式将图片进行下载到本地，运行代码如下图效果所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/495145a52f3947bfb5a4d96d534e2fd0~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1065&amp;h=355&amp;s=148054&amp;e=gif&amp;f=34&amp;b=fefefe" alt="record.gif"></p><h2 id="四-音频处理" tabindex="-1">四. 音频处理 <a class="header-anchor" href="#四-音频处理" aria-label="Permalink to &quot;四. 音频处理&quot;">​</a></h2><p>Blob 对象也可以用于处理音频数据，在前端开发中，常见的操作为音频数据转换为 Blob 对象并进行二次处理，下面我们看一下如何使用 Blob 对象处理音频数据，并将音频流转换为 Blob 对象进行处理的方法。</p><p>获取音频数据。音频数据可以来自不同的来源，例如麦克风录音、音频文件解码等。这里以获取麦克风录制的音频数据为例。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator.mediaDevices</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUserMedia</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ audio: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">stream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mediaRecorder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MediaRecorder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stream)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> chunks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 开始录制音频</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mediaRecorder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 监听音频数据的录制</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mediaRecorder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dataavailable&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      chunks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 停止录制音频</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      mediaRecorder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 将录制的音频数据转换为 Blob 对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> blob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Blob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chunks, { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;audio/wav&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 接下来可以对获取到的 Blob 对象进行二次处理</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 进行处理的代码写在这里</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 录制 5 秒后停止</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;获取麦克风权限出错：&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span></code></pre></div><ol><li><p>在上述代码中，我们使用了 <code>navigator.mediaDevices.getUserMedia</code> 方法获取了麦克风的音频数据流。然后通过 <code>MediaRecorder</code> 对象进行音频录制，并将录制的音频数据存储在 <code>chunks</code> 数组中。</p></li><li><p>在 <code>dataavailable</code> 事件监听器中，我们监听并收集音频数据的录制结果。</p></li><li><p>在适当的时机（例如录制了一段特定长度的音频后），我们停止录制，并将 <code>chunks</code> 数组中的音频数据转换为 Blob 对象。</p></li><li><p>接下来，你可以对获取到的 Blob 对象进行二次处理，例如保存到本地、上传到服务器、进行音频处理等。根据你的需求进行相应的处理操作。</p></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df1b95c8442343dbaa00f83be3946d2f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1047&amp;h=490&amp;s=124981&amp;e=gif&amp;f=32&amp;b=fdfdfd" alt="record.gif"></p><blockquote><p>请注意，在根据具体需求进行二次处理时，你可能需要使用适当的音频处理库或技术，例如 Web Audio API 进行音频解码、WebRTC 进行实时通信等。</p></blockquote><h2 id="五-视频处理" tabindex="-1">五. 视频处理 <a class="header-anchor" href="#五-视频处理" aria-label="Permalink to &quot;五. 视频处理&quot;">​</a></h2><p>Blob 不仅能处理音频数据，也能进行视频处理，Blob 对象一般可用于处理视频流和转换视频数据。下面我们看一下如何使用 Blob 对象处理视频流，并将视频数据转换为 Blob 对象进行二次处理。</p><h3 id="_1-处理视频流" tabindex="-1">1. 处理视频流 <a class="header-anchor" href="#_1-处理视频流" aria-label="Permalink to &quot;1. 处理视频流&quot;">​</a></h3><p>处理视频流通常涉及从摄像头或其他视频源中获取视频流，并对其进行处理、展示或传输等操作。在 JavaScript 中，我们可以使用 Blob 对象来处理视频流。</p><p>以下是使用 Blob 对象处理视频流的步骤：</p><ol><li><strong>获取视频流</strong>：首先，我们需要获取视频流。可以使用 getUserMedia() 方法获取摄像头视频流。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator.mediaDevices</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUserMedia</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ video: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">stream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在这里处理视频流逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;获取视频流失败&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span></code></pre></div><ol start="2"><li><strong>创建 MediaRecorder 对象</strong>：使用 MediaRecorder 对象来处理视频流。将视频流作为参数传递给 MediaRecorder 对象的构造函数。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mediaRecorder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MediaRecorder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stream)</span></span></code></pre></div><ol start="3"><li><strong>监听录制事件</strong>：使用 ondataavailable 事件监听 MediaRecorder 对象的录制数据可用事件。在这个事件中，我们可以获取到 Blob 对象，表示录制的视频数据。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> chunks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mediaRecorder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ondataavailable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  chunks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="4"><li><strong>停止录制并处理 Blob 对象</strong>：在停止录制时，我们可以将收集到的视频数据合并为一个 Blob 对象，并进行处理。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mediaRecorder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onstop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> videoBlob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Blob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chunks, { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;video/webm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可设置输出的视频格式</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 在这里处理 Blob 对象，进行进一步的视频处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上面的示例中，首先获取了摄像头的视频流，并使用 <code>MediaRecorder</code> 对象进行录制。在录制过程中，监听了 <code>ondataavailable</code> 事件，收集录制的视频数据，然后在停止录制时将这些数据合并为 Blob 对象。</p><h3 id="_2-将视频数据转为-blob-对象并进行二次处理" tabindex="-1">2. 将视频数据转为 Blob 对象并进行二次处理 <a class="header-anchor" href="#_2-将视频数据转为-blob-对象并进行二次处理" aria-label="Permalink to &quot;2. 将视频数据转为 Blob 对象并进行二次处理&quot;">​</a></h3><p>除了处理视频流，我们还可以将现有的视频数据转换为 Blob 对象，并进行二次处理。</p><p>以下是将视频数据转为 Blob 对象并进行二次处理的步骤：</p><ol><li><strong>加载视频数据</strong>：使用 <code>XMLHttpRequest</code> 或 <code>fetch</code> 方法加载视频数据，得到视频数据的 <code>ArrayBuffer</code> 或 Blob 对象。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;video.mp4&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 替换为你自己的视频路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">blob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">blob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在这里处理视频数据逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;加载视频数据失败&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span></code></pre></div><ol start="2"><li><strong>进行二次处理</strong>：获得视频数据的 Blob 对象后，我们可以进行二次处理，如截取指定时间段的视频、添加水印、转换格式等操作。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 假设我们要将视频数据转为 base64 格式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onloadend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> base64Data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reader.result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;,&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 在这里处理 base64 数据，进行进一步的二次处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readAsDataURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blob)</span></span></code></pre></div><p>通过以上步骤，我们可以将现有的视频数据转换为 Blob 对象，并进行二次处理。这将帮助我们方便地在网页应用程序中进行视频处理，并实现各种需要的功能。</p><p>在以上的示例代码中，加载视频数据得到 Blob 对象后，可以使用 FileReader 对象将 Blob 对象转换为 base64 格式的数据。</p><h2 id="六-注意事项" tabindex="-1">六. 注意事项 <a class="header-anchor" href="#六-注意事项" aria-label="Permalink to &quot;六. 注意事项&quot;">​</a></h2><p>处理大型 Blob 对象时，有一些注意事项需要考虑：</p><ol><li><p><strong>内存消耗</strong>：将大型 Blob 对象读入内存可能会消耗大量的内存资源，特别是在移动设备上。这可能会影响应用程序的性能和稳定性。因此，在操作大型 Blob 对象时，要特别注意内存消耗，并及时释放不再需要的资源。</p></li><li><p><strong>分块处理</strong>：如果可能，可以考虑将大型 Blob 对象分成多个较小的块进行处理。这样可以降低单个操作的内存消耗，并且可以更好地控制整个处理过程。</p></li><li><p><strong>异步处理</strong>：在处理大型 Blob 对象时，建议使用异步方式进行处理。这样可以避免阻塞主线程，提高用户体验，并且可以更好地管理资源和进度。</p></li><li><p><strong>流式处理</strong>：对于较大的 Blob 对象，可以考虑使用流式处理的方式，逐步读取和处理数据，而不是一次性读取整个 Blob 对象。这样可以减少内存消耗，并且适用于边读取边处理的场景。</p></li></ol><p>处理大型 Blob 对象时，要注意通过合理的处理策略，可以更好地管理资源、提高性能，并确保应用程序的稳定性和可靠性。</p><h2 id="七-总结" tabindex="-1">七. 总结 <a class="header-anchor" href="#七-总结" aria-label="Permalink to &quot;七. 总结&quot;">​</a></h2><p>在本篇文章中，我们探讨了 Blob 对象的应用场景和实例。Blob 对象作为一种表示二进制数据的工具，可以被用于进行文件上传、图片和音视频处理等操作，在 Web 开发中具有广泛的应用。</p><p>通过本文，我们主要学习到了 Blob 对象用于在前端实现文件上传功能，通过将文件转换为 Blob 对象，可以更加灵活地进行文件处理和传输。同时，Blob 对象也可以用于实现图片的下载功能，通过将 Canvas 中的图像转换为 Blob 对象，并提供下载链接，用户可以方便地将图片保存到本地。另外，Blob 对象还可以在音视频处理中起到重要作用，如音频录制、视频剪辑等。</p><p>Blob 对象作为一种处理二进制数据的工具，在 Web 开发中具有广泛的应用场景。它可以帮助开发者更加灵活地处理和操作各种二进制数据，为用户提供更好的使用体验。</p>`,84);function e(r,E,d,o,g,c){const s=t("ArticleFooter");return h(),a("div",null,[k,n(s,{link:"https://juejin.cn/post/7308992638468456485"})])}const b=i(p,[["render",e]]);export{F as __pageData,b as default};
