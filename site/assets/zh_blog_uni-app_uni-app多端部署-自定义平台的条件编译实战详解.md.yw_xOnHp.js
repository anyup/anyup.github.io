import{_ as a,c as i,I as t,aU as n,o as p,E as e}from"./chunks/framework.CpXV_ol5.js";const b=JSON.parse('{"title":"玩转uni-app多端部署：自定义平台的条件编译实战详解","description":"","frontmatter":{"title":"玩转uni-app多端部署：自定义平台的条件编译实战详解"},"headers":[],"relativePath":"zh/blog/uni-app/uni-app多端部署-自定义平台的条件编译实战详解.md","filePath":"zh/blog/uni-app/uni-app多端部署-自定义平台的条件编译实战详解.md","lastUpdated":1725606759000}'),l={name:"zh/blog/uni-app/uni-app多端部署-自定义平台的条件编译实战详解.md"},h=n(`<h1 id="玩转uni-app多端部署-自定义平台的条件编译实战详解" tabindex="-1">玩转uni-app多端部署：自定义平台的条件编译实战详解 <a class="header-anchor" href="#玩转uni-app多端部署-自定义平台的条件编译实战详解" aria-label="Permalink to &quot;玩转uni-app多端部署：自定义平台的条件编译实战详解&quot;">​</a></h1><h2 id="一-前言" tabindex="-1">一. 前言 <a class="header-anchor" href="#一-前言" aria-label="Permalink to &quot;一. 前言&quot;">​</a></h2><p>在使用 uni-app 进行跨平台开发的过程中，经常会遇到需要针对不同平台或不同环境进行条件编译的情况。条件编译是一种在编译过程中根据指定条件选择不同代码路径的技术，可以帮助我们在不同平台或环境下编写不同的代码，以适应不同的平台实现逻辑。</p><p>在 uni-app 中，可以说条件编译是 uni-app 实现多端部署的核心思想，通过条件编译，我们可以根据当前的平台、环境或配置选项来控制代码的执行逻辑，从而实现定制化的开发需求。</p><p>在我之前的开发项目中，不止需要已有平台的条件编译，还涉及到<strong>自定义平台条件编译</strong>，以适应项目中<strong>同一套代码，多端部署</strong>的场景。</p><p>通过本篇文章，你将学习到以下知识：</p><p align="center"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b6e798f324b4730a5728e7ef523eba4~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=887&amp;h=851&amp;s=81911&amp;e=png&amp;b=ffffff" alt="image.png"></p><p>接下来我将详细介绍 uni-app 中条件编译的使用和自定义平台，帮助大家更好地利用条件编译优化自己的应用开发过程。</p><h2 id="二-什么是编译器" tabindex="-1">二. 什么是编译器 <a class="header-anchor" href="#二-什么是编译器" aria-label="Permalink to &quot;二. 什么是编译器&quot;">​</a></h2><p>uni-app 为什么能实现一套代码、多端运行，多端部署的功能？其最核心的功能是通过 <strong>编译器 + 运行时</strong> 实现的，我梳理了一下，如下图整体流程图所示：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1ada850aa6c45c89a875329c8707d17~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1050&amp;h=669&amp;s=215829&amp;e=png&amp;b=fffefe" alt="Snipaste_2024-03-07_18-12-51.png"></p><blockquote><p>好家伙，不看不知道，一看吓一跳，一堆小程序平台？？</p></blockquote><h3 id="_1-编译器和运行时" tabindex="-1">1. 编译器和运行时 <a class="header-anchor" href="#_1-编译器和运行时" aria-label="Permalink to &quot;1. 编译器和运行时&quot;">​</a></h3><p><strong>编译器</strong>：将 uni-app 统一代码编译生成每个平台支持的特有代码；如：在小程序平台，编译器将 <code>.vue</code> 文件拆分生成 <code>wxml</code>、<code>wxss</code>、<code>js</code> 等代码。</p><p><strong>运行时</strong>：动态处理数据绑定、事件代理，保证 Vue 和平台宿主数据的一致性。</p><h3 id="_2-编译器的实现逻辑" tabindex="-1">2. 编译器的实现逻辑 <a class="header-anchor" href="#_2-编译器的实现逻辑" aria-label="Permalink to &quot;2. 编译器的实现逻辑&quot;">​</a></h3><p>uni-app 项目根据所依赖的 Vue 版本不同，编译器的实现也不同，目前 uni-app 的代码支持 Vue 2 和 Vue 3 两种语言版本。</p><p>Vue 2 版本的 uni-app 编译器基于 <code>Wepback</code> 实现，而 Vue 3 版本的 uni-app 编译器基于 <code>Vite</code> 实现，编译速度更快。</p><p>可以通过 <code>manifest.json</code> 文件中切换 Vue 的使用版本，如下图所示：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de17da0d00ce47ceb4bf6219652054c7~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=823&amp;h=155&amp;s=16676&amp;e=png&amp;b=fbf6e5" alt="Snipaste_2024-03-07_18-22-12.png"></p><h3 id="_3-注意事项" tabindex="-1">3. 注意事项 <a class="header-anchor" href="#_3-注意事项" aria-label="Permalink to &quot;3. 注意事项&quot;">​</a></h3><p>初始化 uni-app 项目有两种方式，通过 <strong>HBuilderX</strong> 创建和使用 <strong>cli</strong> 方式创建，下面来说一下这两种创建方式在编译器方面的使用差异：</p><ul><li><p>使用 <strong>cli</strong> 方式创建的项目，编译器安装在项目下，编译器不会跟随 <strong>HBuilderX</strong> 升级。如需升级编译器，可以参考：更新依赖到指定版本。</p></li><li><p>使用 <strong>HBuilderX</strong> 创建的项目，编译器在 <strong>HBuilderX</strong> 的安装目录下的 <code>plugin</code> 目录，随着 <strong>HBuilderX</strong> 的升级会自动升级编译器。</p></li></ul><p>因此，为了避免出现一些更新问题，建议使用 <strong>HBuilderX</strong> 直接创建项目，便于适时更新到最新版的编译器，优化一些 <strong>bug</strong>。</p><blockquote><p>提示：经常跟随官方更新也会有问题，有些旧版本的代码在新版上有可能会不兼容！注意可能有坑！</p></blockquote><h2 id="三-条件编译" tabindex="-1">三. 条件编译 <a class="header-anchor" href="#三-条件编译" aria-label="Permalink to &quot;三. 条件编译&quot;">​</a></h2><p>uni-app 已经将常用的组件、API 封装到框架中，我们可以按照 uni-app 规范开发即可保证多平台兼容，大部分业务均可直接满足，但每个平台有自己的一些特性，因此必然会存在一些无法跨平台的情况。</p><p>详细了解可参见 uni-app 的相关文档说明：</p><ul><li><p><a href="https://uniapp.dcloud.net.cn/component/" target="_blank" rel="noreferrer">uni-app 组件使用手册</a></p></li><li><p><a href="https://uniapp.dcloud.net.cn/api/" target="_blank" rel="noreferrer">uni-app API 使用手册</a></p></li></ul><p>当我们在写代码涉及到多平台时，由于每个平台的实现代码可能有所不同，因此如果是大量写 <code>if else</code>，会造成代码执行性能低下和管理混乱，编译到不同的工程后二次修改，会让后续升级变的很麻烦。</p><p>由以上这个背景， uni-app 参考在 C 语言中的一些实践经验，为其提供了类似的条件编译手段，通过 <code>#ifdef</code>、<code>#ifndef</code> 的方式，为小程序端、Web 端、App 端 等不同客户端编译不同的代码，在一个工程里优雅的完成了平台个性化实现。</p><p>那么接下来我们看一下什么是条件编译及其使用方法？</p><h3 id="_1-什么是条件编译" tabindex="-1">1. 什么是条件编译 <a class="header-anchor" href="#_1-什么是条件编译" aria-label="Permalink to &quot;1. 什么是条件编译&quot;">​</a></h3><p>条件编译其实是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。</p><p><strong>条件判断规则</strong></p><p>以 <code>#ifdef</code> 或 <code>#ifndef</code> 加 <code>%PLATFORM%</code> 开头，以 <code>#endif</code> 结尾。</p><p>完整的判断方式为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>#ifdef  %PLATFORM%</span></span>
<span class="line"><span>此部分为实现对应平台的代码</span></span>
<span class="line"><span>#endif</span></span></code></pre></div><p>参数说明：</p><p><code>#ifdef</code>：if defined 仅在某平台存在 <code>#ifndef</code>：if not defined 除了某平台均存在 <code>%PLATFORM%</code>：平台名称</p><h3 id="_2-支持的平台" tabindex="-1">2. 支持的平台 <a class="header-anchor" href="#_2-支持的平台" aria-label="Permalink to &quot;2. 支持的平台&quot;">​</a></h3><p>目前 uni-app 条件编译所支持的平台大概有 24 个，分别如下：</p><h4 id="引擎-编译器相关" tabindex="-1">引擎+编译器相关 <a class="header-anchor" href="#引擎-编译器相关" aria-label="Permalink to &quot;引擎+编译器相关&quot;">​</a></h4><table><thead><tr><th>值</th><th>生效条件</th><th>值</th><th>生效条件</th></tr></thead><tbody><tr><td>VUE3</td><td>用于区分 vue2 和 3</td><td>VUE2</td><td>用于区分 vue2 和 3</td></tr><tr><td>UNI-APP-X</td><td>用于区分是否是 uni-app x 项目</td><td>uniVersion</td><td>用于区分编译器的版本</td></tr></tbody></table><h4 id="app-相关" tabindex="-1">APP 相关 <a class="header-anchor" href="#app-相关" aria-label="Permalink to &quot;APP 相关&quot;">​</a></h4><table><thead><tr><th>值</th><th>生效条件</th><th>值</th><th>生效条件</th></tr></thead><tbody><tr><td>APP</td><td>App</td><td>APP-PLUS</td><td>编译为 App 时</td></tr><tr><td>APP-PLUS-NVUE 或 APP-NVUE</td><td>App nvue 页面</td><td>APP-ANDROID</td><td>App Android 平台</td></tr><tr><td>APP-IOS</td><td>App iOS 平台</td><td></td><td></td></tr></tbody></table><h4 id="web-相关" tabindex="-1">Web 相关 <a class="header-anchor" href="#web-相关" aria-label="Permalink to &quot;Web 相关&quot;">​</a></h4><table><thead><tr><th>值</th><th>生效条件</th><th>值</th><th>生效条件</th></tr></thead><tbody><tr><td>H5</td><td>H5</td><td>WEB</td><td>web</td></tr></tbody></table><h4 id="小程序相关" tabindex="-1">小程序相关 <a class="header-anchor" href="#小程序相关" aria-label="Permalink to &quot;小程序相关&quot;">​</a></h4><table><thead><tr><th>值</th><th>生效条件</th><th>值</th><th>生效条件</th></tr></thead><tbody><tr><td>MP</td><td>包括所有小程序</td><td>MP-WEIXIN</td><td>微信小程序</td></tr><tr><td>MP-ALIPAY</td><td>支付宝小程序</td><td>MP-BAIDU</td><td>百度小程序</td></tr><tr><td>MP-TOUTIAO</td><td>抖音小程序</td><td>MP-LARK</td><td>飞书小程序</td></tr><tr><td>MP-QQ</td><td>QQ 小程序</td><td>MP-KUAISHOU</td><td>快手小程序</td></tr><tr><td>MP-JD</td><td>京东小程序</td><td>MP-360</td><td>360 小程序</td></tr></tbody></table><h4 id="快应用相关" tabindex="-1">快应用相关 <a class="header-anchor" href="#快应用相关" aria-label="Permalink to &quot;快应用相关&quot;">​</a></h4><table><thead><tr><th>值</th><th>生效条件</th></tr></thead><tbody><tr><td>QUICKAPP-WEBVIEW</td><td>包括所有快应用</td></tr><tr><td>QUICKAPP-WEBVIEW-UNION</td><td>快应用联盟</td></tr><tr><td>QUICKAPP-WEBVIEW-HUAWEI</td><td>快应用华为</td></tr></tbody></table><h3 id="_3-支持的文件" tabindex="-1">3. 支持的文件 <a class="header-anchor" href="#_3-支持的文件" aria-label="Permalink to &quot;3. 支持的文件&quot;">​</a></h3><p>我们主要可以在以下的文件中使用条件编译，如下所示：</p><ul><li><strong>主文件</strong>：包括 .vue/.nvue/.uvue 文件</li><li><strong>API 文件</strong>：包括 .js/.uts 文件</li><li><strong>样式文件</strong>：包括 css 文件和各预编译语言文件，如：.scss、.less、.stylus、.ts、.pug 文件</li><li><strong>配置文件</strong>：pages.json 文件</li></ul><h3 id="_4-支持的场景" tabindex="-1">4. 支持的场景 <a class="header-anchor" href="#_4-支持的场景" aria-label="Permalink to &quot;4. 支持的场景&quot;">​</a></h3><p>uni-app 的条件编译能支持以下几种场景，具体如图所示：</p><h4 id="api-的条件编译" tabindex="-1">API 的条件编译 <a class="header-anchor" href="#api-的条件编译" aria-label="Permalink to &quot;API 的条件编译&quot;">​</a></h4><p>简言之，同一功能实现，可能有不同的逻辑处理，比如：在 js 文件中，或者在 Vue 文件中的 script 代码中有不同的逻辑处理方式，使用方式如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #ifdef  %PLATFORM%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">该平台特有的API实现;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #endif</span></span></code></pre></div><h4 id="组件的条件编译" tabindex="-1">组件的条件编译 <a class="header-anchor" href="#组件的条件编译" aria-label="Permalink to &quot;组件的条件编译&quot;">​</a></h4><p>在 template 模版中，可能会在不同的平台展示不同的组件，或者是展示效果不同，或者是在某一平台不需要展示，使用方式如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--  #ifdef  %PLATFORM% --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">该平台特有的组件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--  #endif --&gt;</span></span></code></pre></div><h4 id="样式的条件编译" tabindex="-1">样式的条件编译 <a class="header-anchor" href="#样式的条件编译" aria-label="Permalink to &quot;样式的条件编译&quot;">​</a></h4><p>在不同的平台下有差异性的样式处理，使用方式如下：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*  #ifdef  %PLATFORM%  */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">该平台特有的样式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*  #endif  */</span></span></code></pre></div><h4 id="pages-json-的条件编译" tabindex="-1">pages.json 的条件编译 <a class="header-anchor" href="#pages-json-的条件编译" aria-label="Permalink to &quot;pages.json 的条件编译&quot;">​</a></h4><p>不同平台下的特有功能，以及小程序平台的分包，都可以通过 <code>pages.json</code> 的条件编译来更好地实现。这样，就不会在其它平台产生多余的资源，进而减小包体积。</p><p>例如：在 <code>pages.json</code> 中配置 pages 页面路由，在 H5 平台下编译 “<strong>测试 1</strong>” 页面，在微信小程序页面下编译 “<strong>测试 2</strong>” 页面</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // #ifdef H5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pages/test1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;navigationBarTitleText&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;测试1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // #endif</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // #ifdef MP-WEIXIN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pages/test2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;navigationBarTitleText&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;测试2&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // #endif</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><blockquote><p>特别注意：json 的条件编译，一定要注意最后&quot;,&quot;分隔符的所属问题，不能有多余的逗号，可能会出现异常情况，导致编译失败！</p></blockquote><h4 id="static-目录的条件编译" tabindex="-1">static 目录的条件编译 <a class="header-anchor" href="#static-目录的条件编译" aria-label="Permalink to &quot;static 目录的条件编译&quot;">​</a></h4><p>在不同平台，引用的静态资源可能也存在差异，通过 static 的条件编译可以解决此问题，static 目录下新建不同平台的专有目录，目录名称均为小写，专有目录下的静态资源只有在特定平台才会编译进去。</p><p>如以下目录结构，a.png 只有在微信小程序平台才会编译进去，b.png 在所有平台都会被编译，合理的利用 static 目录的条件编译能够大大的减小包体积，在微信小程序的分包实践中尤为重要！</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>┌─static</span></span>
<span class="line"><span>│  ├─mp-weixin</span></span>
<span class="line"><span>│  │  └─a.png</span></span>
<span class="line"><span>│  └─b.png</span></span>
<span class="line"><span>├─main.js</span></span>
<span class="line"><span>├─App.vue</span></span>
<span class="line"><span>├─manifest.json</span></span>
<span class="line"><span>└─pages.json</span></span></code></pre></div><h3 id="_3-注意事项-1" tabindex="-1">3. 注意事项 <a class="header-anchor" href="#_3-注意事项-1" aria-label="Permalink to &quot;3. 注意事项&quot;">​</a></h3><p>关于条件编译，有以下几个注意事项需要在编程的过程中重点关注一下：</p><ol><li>条件编译是利用注释实现的，在不同语法里注释写法不一样，不要使用错误的注释编写代码，可能会造成一些问题，具体注释形式如下所示：</li></ol><ul><li>在 js/uts 文件中， 使用 <code>//</code> 注释</li><li>在 css 文件中， 使用 <code>/* */</code> 注释</li><li>在 vue/nvue/uvue 模板里使用 <code>&lt;!-- 注释 --&gt;</code></li></ul><ol start="2"><li><p>条件编译 APP-PLUS 包含 APP-NVUE 和 APP-VUE ；</p></li><li><p>对于未定义平台名称，可能是名称写错了，也可能是低版本 HBuilderX 没有这个平台，此时的条件编译，<code>#ifdef</code> 中的代码不会生效，而 <code>#ifndef</code> 中的代码会生效；</p></li><li><p>使用条件编译请保证编译前和编译后文件的语法正确性，即要保障无论条件编译是否生效都能通过语法校验。比如：json 文件中不能有多余的逗号，js 中不能重复导入；</p></li><li><p>Android 和 iOS 平台不支持通过条件编译来区分，如果需要区分 Android、iOS 平台，请通过调用 <code>uni.getSystemInfo</code> 来获取平台信息。支持 <code>ifios</code>、<code>ifAndroid</code> 代码块，可方便编写判断。</p></li></ol><h2 id="四-自定义条件编译平台" tabindex="-1">四. 自定义条件编译平台 <a class="header-anchor" href="#四-自定义条件编译平台" aria-label="Permalink to &quot;四. 自定义条件编译平台&quot;">​</a></h2><h3 id="_1-背景-我为什么要进行自定义平台" tabindex="-1">1. 背景（我为什么要进行自定义平台） <a class="header-anchor" href="#_1-背景-我为什么要进行自定义平台" aria-label="Permalink to &quot;1. 背景（我为什么要进行自定义平台）&quot;">​</a></h3><p>在开发 Web 时，可能有时候需要将同一套代码编译发布到不同的站点，比如多个不同的微信 h5 站，这些站点可能有不同的差异性处理。在开发小程序时，也经常有扩展小程序平台，比如同一套代码，我需要发布到多个小程序，可能这些小程序之间少许有些差异。因此，uni-app 通过在 <code>package.json</code> 文件中增加 uni-app 扩展节点，可实现自定义条件编译平台。</p><p>在我之前开发的<strong>实际项目</strong>中，同一套代码需要部署多个平台，大概有 <strong>10</strong> 个平台，而且这几个平台可能有 <strong>90%</strong> 以上的代码是相同的，因此我就没有必要重新开发一套代码了。这多个平台的含义是：在微信小程序有多个平台，在 H5 网站有多个平台，可能在 APP 中也有多个平台，在这些平台之间，可能有或多或少的差异，比如：</p><ul><li>功能的差异性，页面展示不同，tabbar 数量等</li><li>请求 API 的差异性，对应的后端服务 API 不同</li><li>全局变量的差异性，主题配色变量，默认语言等</li></ul><p>因此，以上这些差异就会要求在代码中处理不同平台之间的差异性，以下是我的实际项目中的自定义平台：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b1d8cb6f0ad44f2a446242babe49d6f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=746&amp;h=628&amp;s=213297&amp;e=png&amp;b=f5f3e4" alt="Snipaste_2024-03-09_11-12-31.png"></p><blockquote><p>除此之外，还有两个 APP 平台，但是目前 uni-app 不支持自定义 APP 的基准平台！</p></blockquote><p>如何增加 uni-app 扩展节点，总结一下有以下几个步骤可以快速完成一个全新平台的编译：</p><ul><li>声明配置，添加新平台</li><li>在代码中使用新平台条件编译</li><li>编译到新平台</li></ul><h3 id="_2-第一步-声明配置-添加新平台" tabindex="-1">2. 第一步： 声明配置，添加新平台 <a class="header-anchor" href="#_2-第一步-声明配置-添加新平台" aria-label="Permalink to &quot;2. 第一步： 声明配置，添加新平台&quot;">​</a></h3><p>在 package.json 中添加 uni-app 节点，添加以下配置，使新定义的平台生效：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   &quot;uni-app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;custom-h5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;自定义H5平台&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		    &quot;browser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;chrome&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;UNI_PLATFORM&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;h5&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;define&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;CUSTOM-H5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;custom-mp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;自定义小程序平台&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;UNI_PLATFORM&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mp-weixin&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;define&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;CUSTOM-MP&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><p><strong>参数说明：</strong></p><p>正确的结构就是如上所示，下面说一下这几个参数的具体含义</p><ul><li><strong>title</strong>：自定义扩展名称， 在 <strong>HBuilderX</strong> 中会显示在 运行/发行 菜单中</li><li><strong>browser</strong>：运行到的目标浏览器，仅当 <strong>UNI_PLATFORM</strong> 为 h5 时有效</li><li><strong>env</strong>：环境变量 <ul><li><strong>UNI_PLATFORM</strong>：基准平台</li><li><strong>MY_TEST</strong>：其他自定义环境变量</li></ul></li><li><strong>define</strong>：自定义条件编译 <ul><li><strong>CUSTOM-H5</strong>：自定义条件编译常量，建议为大写</li></ul></li></ul><p><strong>注意事项：</strong></p><ul><li><p>只能扩展 web 和小程序平台，不能扩展 app 平台。并且扩展小程序平台时只能基于指定的基准平台扩展子平台，不能扩展基准平台。也就是说 <strong>UNI_PLATFORM</strong> 仅支持填写 uni-app 默认支持的基准平台，目前仅限如下枚举值：<code>h5</code>、<code>mp-weixin</code>、<code>mp-alipay</code>、<code>mp-baidu</code>、<code>mp-toutiao</code>、<code>mp-qq</code>。</p></li><li><p><code>browser</code> 仅在 <code>UNI_PLATFORM</code> 为 h5 时有效,目前仅限如下枚举值：chrome、firefox、ie、edge、safari、hbuilderx。</p></li><li><p><code>package.json</code> 文件中不允许出现注释，否则扩展配置无效。</p></li></ul><h3 id="_3-第二步-在代码中使用条件编译" tabindex="-1">3. 第二步：在代码中使用条件编译 <a class="header-anchor" href="#_3-第二步-在代码中使用条件编译" aria-label="Permalink to &quot;3. 第二步：在代码中使用条件编译&quot;">​</a></h3><p>接下来，可以在代码里使用自定义的条件编译，为这个新平台编写专用代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 新的自定义微信小程序平台</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #ifdef CUSTOM-MP</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 微信小程序 代码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #endif</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 新的自定义H5平台</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #ifdef CUSTOM-H5</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * H5 代码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #endif</span></span></code></pre></div><h3 id="_4-第三步-编译到新平台" tabindex="-1">4. 第三步：编译到新平台 <a class="header-anchor" href="#_4-第三步-编译到新平台" aria-label="Permalink to &quot;4. 第三步：编译到新平台&quot;">​</a></h3><p>运行时可以执行面向新平台的编译运行，发行时可以执行面向新平台的编译发行。如下图所示，我们点击运行和发行，已经都有了我们刚才已经自定义好的平台名称。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c849de570c4e4ba393bbb511a3d37ad9~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1286&amp;h=569&amp;s=450380&amp;e=png&amp;b=f9f4e5" alt="Snipaste_2024-03-08_18-02-41.png"></p><h2 id="五-总结" tabindex="-1">五. 总结 <a class="header-anchor" href="#五-总结" aria-label="Permalink to &quot;五. 总结&quot;">​</a></h2><p>条件编译是 uni-app 实现一套代码、多端运行，多端部署的核心思想，uni-app 在条件编译方面不止是处理 js，任何代码都可以多端条件编译，因此可以大大降低了在实际项目的多端开发时的繁琐问题。</p><p>而关于你是否需要自定义平台，关键在于项目里复用的代码多还是个性的代码多，如果都是复用的代码多，并且对应的服务端是一致的，所以仍然可以自定义平台多端部署，而个性的代码放到不同平台的目录下，进行差异化维护。</p><h2 id="资源文档" tabindex="-1">资源文档 <a class="header-anchor" href="#资源文档" aria-label="Permalink to &quot;资源文档&quot;">​</a></h2><ul><li><p><a href="https://uniapp.dcloud.net.cn/component/" target="_blank" rel="noreferrer">uni-app 组件使用手册</a></p></li><li><p><a href="https://uniapp.dcloud.net.cn/api/" target="_blank" rel="noreferrer">uni-app API 使用手册</a></p></li><li><p><a href="https://uniapp.dcloud.net.cn/tutorial/platform.html" target="_blank" rel="noreferrer">uni-app 条件编译处理多端差异</a></p></li><li><p><a href="https://uniapp.dcloud.net.cn/collocation/package.html#uni-app-%E5%B1%9E%E6%80%A7" target="_blank" rel="noreferrer">package.json 扩展 uni-app 属性</a></p></li><li><p><a href="https://uniapp.dcloud.net.cn/collocation/vue-config.html" target="_blank" rel="noreferrer">vue.config.js 说明</a></p></li></ul>`,109);function d(o,r,k,c,u,g){const s=e("ArticleFooter");return p(),i("div",null,[h,t(s,{link:"https://juejin.cn/post/7344970197131329575"})])}const f=a(l,[["render",d]]);export{b as __pageData,f as default};
