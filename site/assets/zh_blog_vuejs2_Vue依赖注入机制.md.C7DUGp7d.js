import{_ as i,c as e,I as a,aU as n,o as p,E as t}from"./chunks/framework.CpXV_ol5.js";const u=JSON.parse('{"title":"组件通信的“传送门”：深入剖析Vue中的依赖注入机制","description":"","frontmatter":{"title":"组件通信的“传送门”：深入剖析Vue中的依赖注入机制"},"headers":[],"relativePath":"zh/blog/vuejs2/Vue依赖注入机制.md","filePath":"zh/blog/vuejs2/Vue依赖注入机制.md","lastUpdated":1727083629000}'),l={name:"zh/blog/vuejs2/Vue依赖注入机制.md"},d=n(`<h1 id="组件通信的-传送门-深入剖析vue中的依赖注入机制" tabindex="-1">组件通信的“传送门”：深入剖析Vue中的依赖注入机制 <a class="header-anchor" href="#组件通信的-传送门-深入剖析vue中的依赖注入机制" aria-label="Permalink to &quot;组件通信的“传送门”：深入剖析Vue中的依赖注入机制&quot;">​</a></h1><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c6151c22183647ec99b190454895d572~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=741&amp;h=348&amp;s=130074&amp;e=png&amp;b=fef4f3" alt="image.png"></p><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>在 <code>Vue.js</code> 中，我们经常会遇到组件之间需要共享数据的情况。一种常见的解决方案是通过 <code>props</code> 和 <code>$emit</code> 事件来进行数据传递，但对于多层嵌套的组件结构或共享状态的场景，这种方式显得繁琐而不直观。</p><p>幸运的是，Vue.js 提供了一个稍微优雅的解方案：<strong>依赖注入</strong> - <code>provide</code>和<code>inject</code>。</p><p><code>provide</code>和<code>inject</code>是 Vue.js 2.2.0 版本引入的一对 API，它们为父组件所有子组件之间提供了一种特殊的通机制。通过在父组件使用<code>provide</code>提供数据，然后在子组件中使用<code>inject</code>引入，我们可以实现组件间的数据共享，避免了繁琐的 <code>props</code> 传递事件监听。</p><p>在本文，我们将深入研究<code>provide</code>和<code>inject</code>的使用和注意事项，探讨它们在组件之间传递数据和状态共享中的应用场景，以及需要注意的一些细节。</p><h2 id="一-理解-provide和inject" tabindex="-1">一. 理解 <code>provide</code>和<code>inject</code> <a class="header-anchor" href="#一-理解-provide和inject" aria-label="Permalink to &quot;一. 理解 \`provide\`和\`inject\`&quot;">​</a></h2><h3 id="是什么" tabindex="-1">是什么？ <a class="header-anchor" href="#是什么" aria-label="Permalink to &quot;是什么？&quot;">​</a></h3><p><code>provide</code>和<code>inject</code>是 Vue.js 2.2.0 版本引入的新特性，用于解决组件间跨层级通信的问题。它们的出现主要是为了弥补 <code>props</code> 和事件通信在层级较深的组件之间传递数据时的不便之处。</p><p>在传统的 <code>props</code> 和事件通信中，如果一个组件嵌套在多个层级的组件内部，需要将数据逐层通过 props 传递给子组件，或者通过触发事件来向父组件发送数据。这种方式在层级较深时会导致代码冗余，同时也增加了组件之间的耦合度。</p><p>为了简化跨层级组件间的通信，<code>Vue.js</code> 引入了<code>provide</code>和<code>inject</code>通过在父组件中使用<code>provide</code>定义数据，并在子组件中使用<code>inject</code>进行注入，可以实现子组件直接获取父组件提供的数据，而不需要逐层传递 props 或触发事件。</p><p><code>provide</code>和<code>inject</code>的出现使得跨层级组件间的通信更加灵活和高效。它们适用于一些全局配置项、主题/样式传递以及跨层级组件通信等场景，可以有效地减少组件之间的耦合度，并提高代码的可维护性和复用性。</p><p>需要注意的是，<code>provide</code>和<code>inject</code>并不是响应式的，也就是说当父组件中的数据发生变化时，子组件不会自动更新。因此，在使用<code>provide</code>和<code>inject</code>时需要注意数据的更新问题，可以使用响应式的数据或计算属性来解决。</p><h3 id="作用和优势" tabindex="-1">作用和优势 <a class="header-anchor" href="#作用和优势" aria-label="Permalink to &quot;作用和优势&quot;">​</a></h3><p><code>provide</code>和<code>inject</code>是 Vue.js 中用于跨组件层级通信的高级特性。它们的作用和优势如下：</p><p>作用：</p><ol><li><p><strong>跨层级数据传递</strong>：<code>provide</code>和<code>inject</code>允许在父组件中提供数据，并在子孙组件中进行注入，实现跨层级的数据传递，避免了通过 <code>props</code> 逐层传递数据的繁琐和冗余。</p></li><li><p><strong>简化组件通信</strong>：通过将数据提供给整个组件树中的各个子组件，<code>provide</code>和<code>inject</code>使得组件之间的通信更加直接和简洁。不需要逐层传递 <code>props</code> 或触发事件，子组件可以直接注入的数据中获取所需的信息。</p></li><li><p><strong>全局配置和共享状态</strong>：<code>provide</code>和<code>inject</code>适用于一些全局配置项或共享状态的传递，比如应用程序的主题、用户身份认证信息等。这些数据可以被所有子组件共享和访问，避免了通过 <code>props</code> 或 <code>Vuex</code> 来传递和管理全局数据的复性。</p></li></ol><p>优势：</p><ol><li><p><strong>简化代码</strong>：相比较手动传递 props 或触发事件的方式，<code>provide</code>和<code>inject</code>减少了组件间的耦合度，简化了代码逻辑，提高了代码的可读性和维护性。特别适用于层级较深的组件通信场景。</p></li><li><p><strong>高效性能</strong>：由于数据直接注入到子组件中，<code>provide</code>和<code>inject</code>的数据访问效率较高，减少了数据在组件树中的传递次数，有利于提升应用程序的性能。</p></li><li><p><strong>灵活性</strong>：<code>provide</code>和<code>inject</code>提供了更灵活的数据传递方式，可以在父组件中动态提供数据，并在子组件中进行注入。这使得组件之间的关系更加松散，便于组件的重用和组合。</p></li></ol><p>需要注意的是，<code>provide</code>和<code>inject</code>并非适用于所有情况，它们应谨慎使用。在组件之间的通信模式选择上，需要考虑数据的层级关系、组件之间的耦合度以及数据的更新方式等因素。</p><h3 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h3><p><code>provide</code>和<code>inject</code>的实现原理涉及 <code>Vue.js</code> 底层的依赖注入系统。</p><p>在 <code>Vue.js</code> 中，依赖注入是一种设计模式，用于解决组件之间的依赖关系。<code>Vue.js</code> 的依赖注入实际上是通过&quot;<strong>向上寻找</strong>&quot;方式来实现的，即当一个组件需要使用某个依时，它会向上遍历父级组件，直到找一个提供了该依赖的组件。</p><p>具体来说，<code>provide</code>和<code>inject</code>是基于 <code>Vue.js</code> 的响应式系统和虚拟 DOM 实现的。当一个组件使用<code>provide</code>提供数据时，<code>Vue.js</code> 会将该数据保存在当前组件的<code>_provided</code>属性中，同时将该数据转化为响应式数据。这样，当数据发生改变时，依赖于该数据的子组件也会自动更新。</p><p>当一个组件使用<code>inject</code>引入数据时，<code>Vue.js</code> 会从当前组件开始向上遍历父级组件，查找与<code>provide</code>提供的数据匹配的数据，并将其设置为当前组件的响应式数据。如果没有找到匹配的数据，<code>inject</code>的默认值将会生效需要注意的是，<code>provide</code>和<code>inject</code>的绑定是在组件的创建阶段完成的，它并不会受到组树的动态变化影响。一旦提供和引入的发生改变，只有在组重新创建的情况下会生效。</p><p>总的来说，<code>provide</code>和<code>inject</code>实现通过 <code>Vue.js</code> 底层依赖入系统，结合响应式系统和虚拟 DOM，实现了组件之间的数据共享和动更新。这为我们提供了一种便捷的方来解决多层嵌套组件之间的数据传递和状态管理问题</p><h2 id="二-provide-如何使用" tabindex="-1">二. <code>provide</code> 如何使用 <a class="header-anchor" href="#二-provide-如何使用" aria-label="Permalink to &quot;二. \`provide\` 如何使用&quot;">​</a></h2><h3 id="在组件中定义-provide" tabindex="-1">在组件中定义 <code>provide</code> <a class="header-anchor" href="#在组件中定义-provide" aria-label="Permalink to &quot;在组件中定义 \`provide\`&quot;">​</a></h3><p>在 <code>Vue.js</code> 中，通过<code>provide</code>可以在父组件中定义要共享的数据或方法，以供子孙组件进行注入和使用。<code>provide</code>的使用方法如下：</p><ol><li><p>在父组件中使用<code>provide</code>属性来定义要提供的数据或方法。<code>provide</code>是一个对象，其中以键值对的形式定义要提供的内容。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  provide: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, world!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;This is method from the parent component.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上述例子中，父组件通过<code>provide</code>提供了一个名为<code>message</code>的字符串数据和一个名为<code>foo</code>的方法。</p></li></ol><h3 id="数据定义的不同方式" tabindex="-1">数据定义的不同方式 <a class="header-anchor" href="#数据定义的不同方式" aria-label="Permalink to &quot;数据定义的不同方式&quot;">​</a></h3><p>在 Vue.js 中，可以使用<code>provide</code>来提供数据给子组件，这样子组件可以通过<code>inject</code>来获取这些数据。<code>provide</code>提供数据的方式可以分为以下三种：静态值（String、Number）、动态（data、computed）和方法（函数）。</p><ol><li><p>静态值（String、Number）： 在<code>provide</code>选项中可以直接提供静态字符串或数字值。这些值对于所有的子组件来说是静态且不会随着时间的推移而改变的。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  provide: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, world!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这例子中，通过<code>provide</code>选项提供了名为<code>message</code>的静态字符串值名为<code>count</code>的静态数值。</p></li><li><p>动态值（data、computed）： 在<code>provide</code>选项中可以使用组件实例中的<code>data</code>或<code>computed</code>属性来提供动态的数据。这些数据是响应式的，当它们发生变化时，被注入的子组件也将得到更新。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  computed: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     countVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.count,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      message: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.countVal,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>在这个例子中，通过<code>provide</code>选项提供了<code>message</code>和<code>count</code>两个动态值，这两个值是通过组件实例中的<code>data</code>属性和<code>computed</code>属性来提供的。</p></li><li><p>方法（函数） 在<code>provide</code>选项中可以提供一个方法，通过方法的调用来提供数据。方法可以接受参数并返回相应的值。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, world!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      return.message;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.count;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      message: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个例子中，通过<code>provide</code>选项提供了<code>message</code>和<code>count</code>两个数据，这两个数据是通过调用组件实例中的方法来获取的。</p></li></ol><p>通过这三种不同的方式，可以根据需要来提供静态的值、动态的值（data、computed）以方法（函数）。在子组件中可以通过<code>inject</code>选项来注入和使用这些提供的数据。</p><h2 id="二-inject-如何使用" tabindex="-1">二. <code>inject</code> 如何使用 <a class="header-anchor" href="#二-inject-如何使用" aria-label="Permalink to &quot;二. \`inject\` 如何使用&quot;">​</a></h2><h3 id="在组件中使用-inject" tabindex="-1">在组件中使用 <code>inject</code> <a class="header-anchor" href="#在组件中使用-inject" aria-label="Permalink to &quot;在组件中使用 \`inject\`&quot;">​</a></h3><p>在 Vue.js 中，可以使用<code>inject</code>选项在组件中注入父组件通过<code>provide</code>提供的数据。通过在组件选项中定义<code>inject</code>来声明需要注入的数据，然后可以在组件中使用这些注入的数据。下面是关于<code>inject</code>的使用以及如何在组件中使用<code>inject</code>的说明：</p><ol><li><p><code>inject</code>选项的使用： 在 Vue 组件中，可以使用<code>inject</code>选项来注入父组件通过<code>provide</code>提供的数据。<code>inject</code>可以是一个数组，也可以是一个对象。如果是数组，那么数组的元素就是要注入的数据的键名；如果是对象，那么对象的键名就是要注入的数据的键名，而键值可以是一个字符串，表示该数据的默认值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  inject: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;count&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个例子中，<code>inject</code>选项是一个数组，它注入了名为<code>message</code>和<code>count</code>的数据。</p></li><li><p>在组件中使用<code>inject</code>： 当注入的数据被声明为<code>inject</code>选项中的键名后，就可以在组件实例中使用这些数据。数据可以通过<code>this</code>访问。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  inject: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;count&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 &#39;Hello, world!&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.count) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个子中，通过<code>this可以访问注入的</code>message<code>和</code>count\`。</p></li><li><p>使用默认值： 组件中可以通过在<code>inject</code>选项中使用对象来设置注入数据的默认值。如果父组件提供相应的数据组件使用默认值。</p></li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     inject: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        message: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: &#39;Default message&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message);       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 &#39;Default message&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.count);         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><p>在这个例子中，如果父组件没有提供<code>message</code>和<code>count</code>的数据，那么组件会使用指定的默认值。</p><p>总结来说，在组件中使用<code>inject</code>可以注入父组件通过<code>provide</code>提供的数据。可以通过数组或对象声明需要注入的数据，并在组件中使用这些注入的数据。如果没有提供相应的数据，可以设置默认值。通过<code>inject</code>，可以在组件中获取到父组件提供的数据，实现跨组件的数据传递和共享。</p><h3 id="声明式注入和函数式注入" tabindex="-1">声明式注入和函数式注入 <a class="header-anchor" href="#声明式注入和函数式注入" aria-label="Permalink to &quot;声明式注入和函数式注入&quot;">​</a></h3><p>在 <code>Vue.js</code> 中，<code>inject</code>可以通过两种方式进行注入：声明式注入和函数式注入。</p><ol><li><strong>声明式注入</strong>：</li></ol><p>声明式注入是通过在组件选项中使用<code>inject</code>选项来声明需要注入的数据。<code>inject</code>可以是一个数组，数组的元素就是要注入的数据的键名。也可以是一个对象，对象的键名就是要注入的数据的键名，而键值可以是一个字符串，表示该数据的默认值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  inject: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 &#39;Hello, world!&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过在父组件的<code>provide</code>选项中提供了<code>message</code>数据，然后在子组件中使用<code>inject</code>选项声明了需要注入的<code>message</code>。</p><ol start="2"><li><strong>函数式注入</strong>： 函数式注入是在组件中使用<code>inject</code>函数来手动注入数据。<code>inject</code>函数接收一个参数，就是要注入的数据的键名，然后返回对应的注入数据。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$options.inject.message </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 手动注入 message 数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 &#39;Hello, world!&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过在子组件<code>created</code>钩子函数中使用<code>inject</code>函数来手动注入父组件提供的<code>message</code>数据。</p><p><strong>小结</strong></p><p>无论是声明式注入还是函数式注入，都可以实现父组件到子组件的数据注入。声明式注入更简洁，直接在组件选项中声明即可，而函数式注入则可以更加灵活地手控制注入的时机和方式，适用于特殊场景下的数据注入需求。</p><blockquote><p><strong>需要注意</strong>，在使用<code>inject</code>注入数据时，注入的数据是响应式的，当父组件提供的数据发生变化时，子组件也会相应地得到更新。但是，由于 Vue 的响应系统只能监听对象的属性的变化，而无法监听到对象本身的替换或重赋值，所以在使用<code>inject</code>注入的数据对象在父组件中发生整体替换时，子组件无法得更新。</p></blockquote><h3 id="数据和作用域" tabindex="-1">数据和作用域 <a class="header-anchor" href="#数据和作用域" aria-label="Permalink to &quot;数据和作用域&quot;">​</a></h3><p>在 <code>Vue.js</code> 中，<code>inject</code>注入的数据可以是<strong>任意数据类型</strong>，包括基本类型、对象、数组和函数等。作用域方面，<code>inject</code>注入的数据具有以下几个特点：</p><ol><li><p><strong>数据类型</strong>：<code>inject</code>注入的数据可以是任意合法的 <code>JavaScript</code> 数据类型，包括字符串、数字、布尔、对象、数组等。无论是基础类型还是复杂类型，都可以通过<code>inject</code>注入到组件中使用。</p></li><li><p><strong>数据来源</strong>：<code>inject</code>注入的数据是来自父组件通过<code>provide</code>提供的数据。父组件将数据通过<code>provide</code>选项提供，然后在子组件中使用<code>inject</code>选项声明需要注入的数据，以实现数据的传递和共享。</p></li><li><p><strong>作用域</strong>：<code>inject</code>注入的数据的作域是由父组件决定的。只有在父组件中<code>provide</code>选项提供的数据，子组件才通过<code>inject</code>选项来注入使用。也就是说，在父组件范围内声明的<code>provide</code>和 <code>inject</code>数据，可以在子组中访问和使用。而在其他件范围内提供的数据是无法通过<code>inject</code>注入使用的。</p></li><li><p><strong>更新响应</strong>：当父组件中通过<code>provide</code>提供的数据发生变化时，子组件中通过<code>inject</code>注入的数据会相应地更新。这意味着，如果父组件中的提供的数据发生更新，那么在子组件中通过<code>inject</code>注的数据也会随之更新。</p></li></ol><blockquote><p><strong>需要注意</strong>，虽然可以任意注入数据类型，但在使用时可能需要进行一些判断和类型转换操作，以确保数据正确使用。</p></blockquote><p>综上所述，<code>inject</code>注入的数据可以是意数据类型，并且作用域是由父组件决定的，只有在父组件通过<code>provide</code>提供的数据才能在子组中通过<code>inject</code>注入使用。同时，当父组件提的数据发生变化时，通过<code>inject</code> 注入的数据也会相应的更新。</p><h2 id="三-应用场景" tabindex="-1">三. 应用场景 <a class="header-anchor" href="#三-应用场景" aria-label="Permalink to &quot;三. 应用场景&quot;">​</a></h2><p><code>provide</code>和<code>inject</code>是在 <code>Vue.js</code> 中用于组件之间传递数据的一个机制，适用于以下场景：</p><ol><li><strong>跨层级组件通信</strong>：</li></ol><p>当组件层级比较深，需要在不同层级的组件之间进行数据传递时，可以使用<code>provide</code>和<code>inject</code>。父组件通过<code>provide</code>提供数据，然后子组件通过<code>inject</code>注入使用。这样就可以避 props 层层传递或使用事件总线等方式进行通信。</p><ol start="2"><li><strong>全局配置项，公共数据或状态共享</strong>：</li></ol><p>当多个组件需要共享一些公共的数据或状态时，可以使用<code>provide\`\`inject</code>来共享这些数据。在顶层组件中通过<code>provide</code>提数据，然后在任意子组件中通过<code>inject</code>注入使用。这样就可以方地共享数据，避免了数据在组件之的多次传递。</p><ol start="3"><li><strong>插件或第三方库集成</strong>：</li></ol><p>当需要将一些插件或三方库的功能封装到一个组件中，并让其他组件共享其功能时可以使用<code>provide</code>和<code>inject</code>。通过在封装的组件中通过<code>provide</code>提供插件或库的实或方法，然后在其他组件中通过<code>inject</code>注入使用。这样可以让其他件方便地使用插件或库的功能，提高代码复用性。</p><blockquote><p><strong>需要注意</strong>，<code>provide</code>和<code>inject</code>并不适用于所有场景。在大部分情况下，推荐使用 <code>props</code> 和 <code>$emit</code> 事件来进行组件之间的通信。<code>provide</code>和<code>inject</code>的使用该谨慎，避免滥用，以确保代码的可读性和维护性。</p></blockquote><h2 id="四-注意事项" tabindex="-1">四. 注意事项 <a class="header-anchor" href="#四-注意事项" aria-label="Permalink to &quot;四. 注意事项&quot;">​</a></h2><p>在使用<code>provide</code>和<code>inject</code>时，需要注意以下几点：</p><ol><li><p><strong>版本兼容性</strong>：<code>provide</code>和<code>inject</code>是 Vue.js 2.2.0 版本引入的特性，所以在使用前需要确保 Vue 的版本在 2.2.0 及以上。</p></li><li><p><strong>依赖关系</strong>：<code>provide</code>和<code>inject</code>是依赖于组件关系的。只有在要共享数据组件的父级组件使用<code>provide</code>，并且在要使用这些数据的子组中使用<code>inject</code>，能建立起正确的依赖关系。</p></li><li><p><strong>命名冲突</strong>：多个组件使用相的键名进行\`\`时，后面提供的数据会覆盖前面提供的数据。在使用时需要确保键名的唯性，以避免命冲突。</p></li><li><p><strong>对象引用</strong>：在使用<code>provide</code>时，提供任意类型的数据，包括对象。当提供的数据对象时，子组件使用时会继承父组件所提供对象引用。这意味着，如果在子组件中修改了该对象中的属性或方法，也会影响到父组件中的相应对象。</p></li><li><p><strong>不适合响应式</strong>：尽管可以提供对象类型的数据，但是不推荐提供响应式的数据。因为在子组件中使用 <code>inject</code>接收到的数据不会保持响应式，子组件无法侦听其变化。如果需要响应式数据，可以考虑使用 Vue 的状态管理工具（<code>Vuex</code>）或其他全状态管理方法。</p><p>不适合响应式是 <code>Vue.js</code> 框架刻意为之的，Vue 的官方是这么说的，如下图所示</p></li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5395a08399e4812ad30eac808b4a1f7~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=755&amp;h=84&amp;s=24623&amp;e=png&amp;b=ffffff" alt="image.png"></p><ol start="6"><li><strong>限制注意事项</strong>：如开发者指南所述，在 Vue 3 及以上版本中，<code>provide</code>和<code>inject</code>有一些限制，包括在 Setup 函数无法使用<code>provide</code>和<code>inject</code>。因此，在使用时注意检查版本以及相关文档的说明。</li></ol><p>正确认识和合理运用以上注意事项将帮助我们更好地使用<code>provide</code>和<code>inject</code>，从实现组件间的数据传递和共享。</p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>在本文中，我们详细讲解了 <code>Vue.js</code> 中的<code>provide</code>和<code>inject</code>的使用和注意事项。</p><p>通过<code>provide</code>和<code>inject</code>，我们可以实现组件之间的数据共享，避免了繁琐的 props 传递和事件监听。这使得我们可以更轻松地在组件树中传递数据，提高了代码的可维护性和可读性。</p><p>但需要注意的是，<code>provide</code>和<code>inject</code>要谨慎使用。在使用时，需要注意版本兼容性、依赖关系、命名冲突、对象引用和不适合响应式的情况。同时，在 <code>Vue 3</code> 及以上版本中，<code>provide</code>和<code>inject</code>有一些限制需要注意。</p><p>希望本文对你理解和运用<code>provide</code>和<code>inject</code>有所助。通过合理地使用这特性，你可以更好地织和管理组件之间数据传递，提升开发效率。</p><blockquote><p>如果你需要了解其他的组件通信方式，可以查看本人之前的文章</p><p><a href="https://juejin.cn/post/7281601361984569344" target="_blank" rel="noreferrer">组件通信的桥梁：探索 Vue 事件总线的原理与应用</a></p></blockquote><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><p><a href="https://v2.cn.vuejs.org/v2/api/#provide-inject" target="_blank" rel="noreferrer">依赖注入 - Vue 2 官方文档</a></p><p><a href="https://cn.vuejs.org/api/composition-api-dependency-injection.html#provide" target="_blank" rel="noreferrer">依赖注入 - Vue 3 官方文档</a></p>`,83);function o(c,h,k,r,E,g){const s=t("ArticleFooter");return p(),e("div",null,[d,a(s,{link:"https://juejin.cn/post/7282603893356036096"})])}const v=i(l,[["render",o]]);export{u as __pageData,v as default};
