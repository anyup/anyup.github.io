import{_ as i,c as a,I as l,aU as n,o as p,E as h}from"./chunks/framework.CpXV_ol5.js";const y=JSON.parse('{"title":"剖析 Rollup 的高级特性：代码拆分、Tree-shaking 和 插件系统","description":"","frontmatter":{"title":"剖析 Rollup 的高级特性：代码拆分、Tree-shaking 和 插件系统"},"headers":[],"relativePath":"zh/blog/tools/Rollup高级特性：代码拆分、Tree-shaking和插件系统.md","filePath":"zh/blog/tools/Rollup高级特性：代码拆分、Tree-shaking和插件系统.md","lastUpdated":1725606759000}'),t={name:"zh/blog/tools/Rollup高级特性：代码拆分、Tree-shaking和插件系统.md"},e=n(`<h2 id="一-前言" tabindex="-1">一. 前言 <a class="header-anchor" href="#一-前言" aria-label="Permalink to &quot;一. 前言&quot;">​</a></h2><p>上一篇文章，我们通过 Rollup 入门指南，了解到 Rollup 作为一款强大的 JavaScript 模块打包工具，为开发者提供了许多优势和便利，让我们能够更好地管理和优化我们的前端项目。</p><p>想要详细了解一下 Rollup 入门的知识点，请参考上一篇文章：</p><p><a href="https://juejin.cn/post/7298161887882133558" target="_blank" rel="noreferrer">Rollup 入门指南：解密高效的 JavaScript 打包器</a></p><p>在本篇文章中，我们将深入的了解到 Rollup 的进阶应用，帮助开发者充分利用 Rollup 的特性和优势，从而优化 JavaScript 模块的打包流程。我们将了解到 Rollup 的 Tree Shaking、ES 模块支持、动态导入和代码分割等功能，并结合实际场景，看一下如何高效地使用 Rollup 来构建现代 Web 应用和库。</p><p>希望通过本篇文章，能为大家带来对 Rollup 更深入的了解，掌握 Rollup 的高级用法，了解如何利用其强大的特性来优化项目打包、提升性能，并在实际开发中灵活应用 Rollup，充分发挥其优势，激发对前端开发的探索和创新。</p><h2 id="二-rollup-的高级配置和扩展功能" tabindex="-1">二. Rollup 的高级配置和扩展功能 <a class="header-anchor" href="#二-rollup-的高级配置和扩展功能" aria-label="Permalink to &quot;二. Rollup 的高级配置和扩展功能&quot;">​</a></h2><p>首先，我们思考一个问题，当我们开发的项目越来越庞大且复杂时，如何通过配置文件中的高级选项和使用 Rollup API 来处理更复杂的项目需求？</p><p>当对更复杂的项目需求时，通过配置文件中的高级选项和使用 Rollup API 可以帮助我们处理各种挑战。</p><h3 id="_1-通过配置文件处理更复杂的项目需求" tabindex="-1">1. 通过配置文件处理更复杂的项目需求 <a class="header-anchor" href="#_1-通过配置文件处理更复杂的项目需求" aria-label="Permalink to &quot;1. 通过配置文件处理更复杂的项目需求&quot;">​</a></h3><h4 id="运行多个输入文件" tabindex="-1">运行多个输入文件 <a class="header-anchor" href="#运行多个输入文件" aria-label="Permalink to &quot;运行多个输入文件&quot;">​</a></h4><p>在某些情况下，我们的项目无法简单地使用单个入口文件进行打包。Rollup 允许我们通过 <code>input</code> 选项传入一个数组来指定多个输入文件，以支持多个入口文件的打包。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// rollup.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  input: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/main1.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/main2.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dir: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    format: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;umd&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过上述配置，Rollup 将处理多个入口文件并将它们打包到指定的输出目录中。这种情况下，我们可以在配置文件中利用数组或其他数据结构来组织多个入口文件。</p><h4 id="自定义输出文件名" tabindex="-1">自定义输出文件名 <a class="header-anchor" href="#自定义输出文件名" aria-label="Permalink to &quot;自定义输出文件名&quot;">​</a></h4><p>在一些情况下，我们需要自定义输出文件的名称，比如为不同模块生成不同的输出文件名。Rollup 允许我们在 <code>output</code> 选项中使用函数来自定义输出文件的名称。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// rollup.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  input: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/main.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">format</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`dist/bundle.\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">format</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.js\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    format: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;es&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;umd&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上述示例中，我们使用了一个函数来动态生成不同输出格式对应的文件名。这种方式可以让我们更灵活地处理不同输出文件的命名需求。</p><h3 id="_2-使用-rollup-api-处理更复杂的项目需求" tabindex="-1">2. 使用 Rollup API 处理更复杂的项目需求 <a class="header-anchor" href="#_2-使用-rollup-api-处理更复杂的项目需求" aria-label="Permalink to &quot;2. 使用 Rollup API 处理更复杂的项目需求&quot;">​</a></h3><p>除了通过配置文件，我们还可以利用 Rollup 提供的 API 来处理更复杂的项目需求。通过使用 Rollup 的 API，我们可以在构建过程中动态地修改配置、添加自定义插件、处理外部依赖等操作。</p><h4 id="动态修改配置" tabindex="-1">动态修改配置 <a class="header-anchor" href="#动态修改配置" aria-label="Permalink to &quot;动态修改配置&quot;">​</a></h4><p>在某些情况下，我们可能需要根据特定的条件动态修改 Rollup 的配置。通过 Rollup API，我们可以动态地生成和修改配置对象，并在构建时使用。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rollup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rollup&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./rollup.config.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 根据特定条件动态修改配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  config.output.file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;dist/bundle.min.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bundle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rollup.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rollup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bundle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config.output)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>通过使用 Rollup API，我们可以根据特定的条件动态修改配置对象，以满足不同环境下的需求。</p><h4 id="添加自定义插件" tabindex="-1">添加自定义插件 <a class="header-anchor" href="#添加自定义插件" aria-label="Permalink to &quot;添加自定义插件&quot;">​</a></h4><p>Rollup API 提供了丰富的 API 方法，允许我们在构建过程中添加自定义插件。这样我们可以根据个性化需求自定义处理逻辑，比如处理特定类型的资源、优化代码等操作。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rollup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rollup&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customPlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./custom-plugin.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./rollup.config.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bundle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rollup.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rollup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugins: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">customPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.plugins]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bundle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config.output)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>通过引入自定义插件并将其添加到 Rollup 的中，我们可以实现更多自定义的构建逻辑。</p><blockquote><p>总的来说，通过配置文件中的高级选项和使用 Rollup API，我们可以更好地处理复杂的项目需求，满足不同场景下的打包和构建要求。</p></blockquote><h2 id="三-tree-shaking-和-dead-code-elimination" tabindex="-1">三. Tree Shaking 和 Dead Code Elimination <a class="header-anchor" href="#三-tree-shaking-和-dead-code-elimination" aria-label="Permalink to &quot;三. Tree Shaking 和 Dead Code Elimination&quot;">​</a></h2><p>Tree Shaking 和 Dead Code Elimination 是用于优化 JavaScript 代码体积的技术，它们能够有效地减小打包后的文件大小。</p><h3 id="_1-tree-shaking-摇树优化" tabindex="-1">1. Tree Shaking（摇树优化） <a class="header-anchor" href="#_1-tree-shaking-摇树优化" aria-label="Permalink to &quot;1. Tree Shaking（摇树优化）&quot;">​</a></h3><p>Tree Shaking 是指通过静态分析代码，并且只保留用到的部分，从而去除未使用的代码（未引用的模块和变量）。其核心思想是通过静态分析代码的引用关系，识别出未被引用的代码，并在打包时将其去除，从而减小最终打包后的文件大小。</p><p>在实际应用中，Tree Shaking 通常与 ES6 模块一起使用，因为 ES6 模块具有静态导入特性，使得 Tree Shaking 技术更容易实现。</p><h3 id="_2-dead-code-elimination-死代码消除" tabindex="-1">2. Dead Code Elimination（死代码消除） <a class="header-anchor" href="#_2-dead-code-elimination-死代码消除" aria-label="Permalink to &quot;2. Dead Code Elimination（死代码消除）&quot;">​</a></h3><p>Dead Code Elimination 是指在编译过程中将未被执行的代码（无法触及到的代码路径）从程序中去除的优化技术。这些未被执行的代码通常来自于条件分支、循环、函数等结构，通过静态分析和代码流分析，编译器能够识别和移除这些未被执行的代码，从而减小最终打包后的文件大小。</p><p>在 Rollup 中，Tree Shaking 和 Dead Code Elimination 通常是自动处理的，但我们也可以通过配置和插件进一步优化和控制这些优化技术的应用。</p><h3 id="_3-在-rollup-中使用-tree-shaking-和-dead-code-elimination" tabindex="-1">3. 在 Rollup 中使用 Tree Shaking 和 Dead Code Elimination <a class="header-anchor" href="#_3-在-rollup-中使用-tree-shaking-和-dead-code-elimination" aria-label="Permalink to &quot;3. 在 Rollup 中使用 Tree Shaking 和 Dead Code Elimination&quot;">​</a></h3><p>Rollup 对 Tree Shaking 和 Dead Code Elimination 有很好的支持，并且默认开启这些优化技术。通过以下示例，演示如何在 Rollup 中使用这些技术来减小打包体积：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// rollup.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { terser } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rollup-plugin-terser&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  input: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/main.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    file: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist/bundle.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    format: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;es&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">terser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上述示例中，我们使用了 Rollup 自带的<code>rollup-plugin-terser</code>插件，它能够对打包后的代码进行压缩和混淆，并且默认开启了 Tree Shaking 和 Dead Code Elimination。通过使用这个插件，我们可以在构建时自动应用这些优化技术，从而减小打包后的文件体积。</p><p>除了使用插件外，我们还可以通过配置文件中的<code>output</code>选项来控制输出文件的格式，例如选择<code>&quot;es&quot;</code>格式以支持 ES6 的模块特性，从而更好地利用 Tree Shaking 和 Dead Code Elimination。</p><blockquote><p>总的来说，Rollup 在默认配置下已经很好地支持 Tree Shaking 和 Dead Code Elimination，并且通过特定的插件和配置选项，我们可以更进一步优化和定制这些优化技术的应用。</p></blockquote><h2 id="四-动态导入和代码分割" tabindex="-1">四. 动态导入和代码分割 <a class="header-anchor" href="#四-动态导入和代码分割" aria-label="Permalink to &quot;四. 动态导入和代码分割&quot;">​</a></h2><p>Rollup 中的动态导入特性和代码分割是两个非常强大的功能，它们可以帮助我们优化项目的性能和加载速度，尤其适用于大型复杂的前端应用。</p><h3 id="_1-动态导入" tabindex="-1">1. 动态导入 <a class="header-anchor" href="#_1-动态导入" aria-label="Permalink to &quot;1. 动态导入&quot;">​</a></h3><p>动态导入允许我们在代码运行时根据需要动态加载模块。在 Rollup 中，使用动态导入语法<code>import()</code>实现动态加载，例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./module.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 使用加载的模块</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Rollup 在打包时会识别动态导入语法，并将动态加载的模块拆分成单独的块，这样可以避免一次性加载大量代码，提高页面加载速度。动态导入可以帮助我们按需加载模块，从而减小初始加载时间，提高应用性能。</p><h3 id="_2-代码分割" tabindex="-1">2. 代码分割 <a class="header-anchor" href="#_2-代码分割" aria-label="Permalink to &quot;2. 代码分割&quot;">​</a></h3><p>在 Rollup 中，代码分割可以通过动态导入实现，也可以通过配置<code>output.manualChunks</code>来手动进行代码分割。通过代码分割，我们可以将一次性加载的大块代码拆分成多个小块，在需要时动态加载，从而优化页面加载性能。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  input: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dir: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    format: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;es&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    manualChunks: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      vendor: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vendor1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vendor2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上述配置中，通过<code>manualChunks</code>指定将<code>vendor1</code>和<code>vendor2</code>这两个模块单独拆分成名为<code>vendor</code>的块。</p><p>代码分割的优势在于减小初始加载时间，提高应用性能。通过动态导入和手动配置代码分割，我们能够更好地组织和管理代码，降低加载压力，提升用户体验。</p><p>总之，Rollup 的动态导入和代码分割功能为开发者提供了强大的工具，帮助我们优化应用性能，提高用户体验。合理利用代码分割和动态导入，可以使前端应用更加高效、便捷。</p><h3 id="_3-应用场景" tabindex="-1">3. 应用场景 <a class="header-anchor" href="#_3-应用场景" aria-label="Permalink to &quot;3. 应用场景&quot;">​</a></h3><h4 id="懒加载模块" tabindex="-1">懒加载模块 <a class="header-anchor" href="#懒加载模块" aria-label="Permalink to &quot;懒加载模块&quot;">​</a></h4><p>在大型网页或应用中，某些模块可能在初始加载时并不需要，可以使用动态导入特性来在需要时才加载这些模块，从而减小初始加载体积，提高加载速度。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 懒加载模块示例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./modules/dialog.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openDialog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h4 id="路由级代码分割" tabindex="-1">路由级代码分割 <a class="header-anchor" href="#路由级代码分割" aria-label="Permalink to &quot;路由级代码分割&quot;">​</a></h4><p>对于单页面应用（SPA）的路由管理，可以使用代码分割来将不同路由对应的模块拆分成独立的文件，然后在路由切换时动态加载对应的模块，从而提高页面切换的速度和响应性。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 路由级代码分割示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> routes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;/page1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./pages/Page1.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;/page2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./pages/Page2.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onRouteChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  routes[route]().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过以上应用场景的示例，我们可以看到动态导入特性和代码分割在现代 Web 应用开发中的重要作用，它们能够帮助我们优化模块加载和提高应用性能。在实际项目中，合理利用这两个特性可以显著提升用户体验，特别是在大型复杂的前端应用中。</p><h2 id="五-rollup-生态系统" tabindex="-1">五. Rollup 生态系统 <a class="header-anchor" href="#五-rollup-生态系统" aria-label="Permalink to &quot;五. Rollup 生态系统&quot;">​</a></h2><p>Rollup 拥有丰富的生态系统，包括强大的插件、与各种框架和构建工具的集成，以及与开发服务器的配合使用，为开发者提供了不少灵活的选择和便利。</p><h3 id="_1-rollup-插件市场" tabindex="-1">1. Rollup 插件市场 <a class="header-anchor" href="#_1-rollup-插件市场" aria-label="Permalink to &quot;1. Rollup 插件市场&quot;">​</a></h3><p>Rollup 的插件市场提供了大量的插件，可以帮助开发者实现各种需求和优化。在<code>https://www.npmjs.com/</code>上，可以搜索到各类 Rollup 的插件，例如用于压缩代码的<code>rollup-plugin-terser</code>、处理 CSS 的<code>rollup-plugin-postcss</code>、处理图片的<code>rollup-plugin-image</code>等等。</p><h3 id="_2-与其他工具集成的方法" tabindex="-1">2. 与其他工具集成的方法 <a class="header-anchor" href="#_2-与其他工具集成的方法" aria-label="Permalink to &quot;2. 与其他工具集成的方法&quot;">​</a></h3><h4 id="与框架集成" tabindex="-1">与框架集成 <a class="header-anchor" href="#与框架集成" aria-label="Permalink to &quot;与框架集成&quot;">​</a></h4><p>Rollup 可以与多种流行的框架集成，例如 React、Vue、Angular 等。利用对应的插件，可以轻松地将 Rollup 与这些框架一起使用。例如，对于 Vue，可以使用<code>@rollup/plugin-vue</code>插件来处理.vue 单文件组件；对于 React，则可以使用<code>@rollup/plugin-node-resolve</code>和<code>@rollup/plugin-commonjs</code>来处理 React 相关的模块。</p><h4 id="与构建工具集成" tabindex="-1">与构建工具集成 <a class="header-anchor" href="#与构建工具集成" aria-label="Permalink to &quot;与构建工具集成&quot;">​</a></h4><p>Rollup 可以和许多构建工具集成，比如 Webpack、Parcel 等。这意味着可以在现有的项目中引入 Rollup 作为模块打包工具，或者使用 Rollup 处理特定的模块，以满足项目的需求。</p><h4 id="与开发服务器的配合使用" tabindex="-1">与开发服务器的配合使用 <a class="header-anchor" href="#与开发服务器的配合使用" aria-label="Permalink to &quot;与开发服务器的配合使用&quot;">​</a></h4><p>在开发过程中，Rollup 还可以与开发服务器结合使用，实现实时预览和热更新。例如，可以使用<code>rollup-plugin-livereload</code>插件来实现页面的热更新，或者结合其他开发服务器实现类似功能。</p><blockquote><p>总结：Rollup 作为一款现代化的 JavaScript 模块打包工具，拥有强大而丰富的生态系统，它与各种框架、构建工具和开发服务器的集成方式多样，插件市场也提供了丰富多样的插件，为开发者提供了丰富的选择和便捷的使用体验。因此，在实际开发中，可以根据需求灵活选择和利用 Rollup 的插件和集成方式，以满足项目的要求。</p></blockquote><h2 id="六-rollup-应用场景" tabindex="-1">六. Rollup 应用场景 <a class="header-anchor" href="#六-rollup-应用场景" aria-label="Permalink to &quot;六. Rollup 应用场景&quot;">​</a></h2><ol><li><p><strong>构建现代 Web 应用</strong>: 适用于构建现代的 Web 应用，尤其是性能有要求的项目，如单页面应用（SPA）。</p></li><li><p><strong>按需加载</strong>: 适用于需要进行按需加载的景，能够通过动态导入和代码割来提高应用的加载速度和性能。</p></li><li><p><strong>库和组件的打包</strong>: 适用于打包库、组件工具库，Rollup 的 Tree Shaking 特性有助于最小化终输出的体积。</p></li><li><p><strong>集成框架</strong>: 与前端框架（如 Vue、React、Angular 等）结合使用，通过对应的插件实现更高效的模块打包和优化。</p></li></ol><h2 id="七-总结" tabindex="-1">七. 总结 <a class="header-anchor" href="#七-总结" aria-label="Permalink to &quot;七. 总结&quot;">​</a></h2><p>通过深入了解 Rollup 的高级特性，相信您已经为自己的前端开发之旅增添了一份宝贵的工具。相比于其他的打包模块，Rollup 有以下价格优势，简单总结一下：</p><ol><li><p><strong>Tree Shaking</strong>: 支持静态分析和摇树优化（Tree Shaking），能够在打包过程中去除未使用的，从而减小最终打包的体积。</p></li><li><p><strong>ES 模块支持</strong>: 天生支持 ES 模块，可直接处理 ES6 块，提供更现代化和准的模块化开发体验。</p></li><li><p><strong>轻量快速</strong>: 在构建速和输出包的大小上都有较好的表现，适合于构建高性能的应用程序。</p></li><li><p><strong>动态导入和代码分割</strong>: 支持动导入特性和分割，可以帮优化模块加载和提高应用性。</p></li><li><p><strong>插件生态</strong>: 拥有丰富的插件生态系统，能够满足各种需求，帮助开发处理各种模块的需求。</p></li></ol><p>Rollup 不仅为现代 JavaScript 模块化开发带来了便利和高效的工作流，更为我们展示了如何通过精益求精的态度不断提升自身的技术水平。正如前文介绍，尤其是 Rollup 的 Tree Shaking、ES 模块支持、动态导入和代码分割等功能，无疑都为我们的项目打包、性能优化和模块化开发提供了强大的支持。</p><h2 id="八-学习资源" tabindex="-1">八. 学习资源 <a class="header-anchor" href="#八-学习资源" aria-label="Permalink to &quot;八. 学习资源&quot;">​</a></h2><p>以下是 Rollup 的官方文档、教程和其他有用的资源链接：</p><ol><li><p><strong>Rollup 官方文档</strong>：Rollup 官方文档是学习和掌握 Rollup 的重要资源，其中包含了详细 API、配置指南、插件开发等内容。</p><ul><li><a href="https://rollupjs.org/guide/en/" target="_blank" rel="noreferrer">Rollup 官方文档</a></li></ul></li><li><p><strong>GitHub 仓库</strong>：Rollup 的 GitHub 仓库是 Rollup 的源代码托管和技术讨论的重要平台，也是获取最新版本和问题追踪的地方。</p><ul><li><a href="https://github.com/rollup/rollup" target="_blank" rel="noreferrer">Rollup 仓库</a></li></ul></li><li><p><strong>Rollup 教程</strong>：Rollup 的教程和指南可以帮助初学者快速了解 Rollup 的基本用和常见场景。</p><ul><li><a href="https://cn.rollupjs.org/" target="_blank" rel="noreferrer">Rollup 中文文档</a></li><li><a href="https://www.rollupjs.com/" target="_blank" rel="noreferrer">Rollup 中文教程</a></li></ul></li><li><p><strong>Rollup 插件</strong>：Rollup 插件市场是获取各类插件的重要途径，在 NPM 上搜索各种 Rollup 插件。</p><ul><li><a href="https://www.npmjs.com/search?q=rollup-plugin" target="_blank" rel="noreferrer">Rollup 插件市场</a></li></ul></li></ol>`,84);function k(r,o,d,E,g,c){const s=h("ArticleFooter");return p(),a("div",null,[e,l(s,{link:"https://juejin.cn/post/7298646156425756706"})])}const F=i(t,[["render",k]]);export{y as __pageData,F as default};
