import{_ as i,c as a,I as t,aU as e,o as h,E as n}from"./chunks/framework.CpXV_ol5.js";const F=JSON.parse('{"title":"JavaScript Set 必备指南：深入理解 Set 的特性和方法","description":"","frontmatter":{"title":"JavaScript Set 必备指南：深入理解 Set 的特性和方法"},"headers":[],"relativePath":"zh/blog/front-end/Set必备指南-深入理解Set的特性和方法.md","filePath":"zh/blog/front-end/Set必备指南-深入理解Set的特性和方法.md","lastUpdated":1727083629000}'),p={name:"zh/blog/front-end/Set必备指南-深入理解Set的特性和方法.md"},l=e(`<h1 id="javascript-set-必备指南-深入理解-set-的特性和方法" tabindex="-1">JavaScript Set 必备指南：深入理解 Set 的特性和方法 <a class="header-anchor" href="#javascript-set-必备指南-深入理解-set-的特性和方法" aria-label="Permalink to &quot;JavaScript Set 必备指南：深入理解 Set 的特性和方法&quot;">​</a></h1><p align="center"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db92c5656c5c4579b4f7c3a398bd1e8d~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=589&amp;h=351&amp;s=97954&amp;e=png&amp;b=fdfafa" alt="image.png"></p><h2 id="一-了解-set" tabindex="-1">一. 了解 Set <a class="header-anchor" href="#一-了解-set" aria-label="Permalink to &quot;一. 了解 Set&quot;">​</a></h2><h3 id="_1-概念和用途" tabindex="-1">1. 概念和用途 <a class="header-anchor" href="#_1-概念和用途" aria-label="Permalink to &quot;1. 概念和用途&quot;">​</a></h3><p>Set 是 JavaScript 中的一种集合（collection）数据结构，它类似于数组，但是集合中的元素是唯一的，不允许重复。Set 提供了一种存储不重复数值或对象的机制，可以用于存储一组唯一的值，并且拥有一些方便的方法来操作这些值。</p><h3 id="_2-为什么使用-set" tabindex="-1">2. 为什么使用 Set <a class="header-anchor" href="#_2-为什么使用-set" aria-label="Permalink to &quot;2. 为什么使用 Set&quot;">​</a></h3><ul><li><strong>唯一性：</strong> Set 中的元素是唯一的，不允许重复。这使得 Set 成为一种方便的去重工具，可以快速地剔除数组或其他数据结构中重复的元素。</li><li><strong>性能优势：</strong> 由于 Set 的内部实现使用了哈希表等高效数据结构，因此在查找和插入元素时具有较好的性能，特别是在处理大量数据时，使用 Set 可以提高处理效率。</li><li><strong>丰富的方法：</strong> Set 提供了丰富的操作方法，如添加元素、删除元素、查找元素、集合运算等，使得开发者能够方便地对集合进行操作。</li></ul><p>JavaScript 的 Set 数据结构提供了一种高效、方便且具有唯一性的集合存储机制，适用于处理需要唯一性数据的场景，例如去重、标记已访问元素等。</p><h2 id="二-创建-set" tabindex="-1">二. 创建 Set <a class="header-anchor" href="#二-创建-set" aria-label="Permalink to &quot;二. 创建 Set&quot;">​</a></h2><h3 id="_1-使用构造函数创建-set" tabindex="-1">1. 使用构造函数创建 Set <a class="header-anchor" href="#_1-使用构造函数创建-set" aria-label="Permalink to &quot;1. 使用构造函数创建 Set&quot;">​</a></h3><p>在 JavaScript 中，您可以使用 Set 构造函数来创建一个新的 Set 实例。具体操作如下:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个空的 Set</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mySet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建包含初始元素的 Set</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> initialSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><h3 id="_2-添加元素到-set" tabindex="-1">2. 添加元素到 Set <a class="header-anchor" href="#_2-添加元素到-set" aria-label="Permalink to &quot;2. 添加元素到 Set&quot;">​</a></h3><p>可以使用 <code>add</code> 方法将元素添加到 Set 中，确保每个元素都是唯一的，不会重复添加:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个空的 Set</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mySet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加元素到 Set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mySet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mySet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mySet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_3-从数组创建-set" tabindex="-1">3. 从数组创建 Set <a class="header-anchor" href="#_3-从数组创建-set" aria-label="Permalink to &quot;3. 从数组创建 Set&quot;">​</a></h3><p>可以使用数组的元素来创建一个 Set 实例，数组中的重复元素将被自动去重：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个包含重复元素的数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duplicatesArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用数组来创建 Set，同时来去重</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uniqueSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(duplicatesArray)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 此时 uniqueSet 为 {2, 3, 4, 5}</span></span></code></pre></div><p>通过上述方法，您可以很容易地创建 Set 并向其中添加元素，也可以通过数组快速地创建并去重一个 Set 对象。</p><h2 id="三-set-的特性" tabindex="-1">三. Set 的特性 <a class="header-anchor" href="#三-set-的特性" aria-label="Permalink to &quot;三. Set 的特性&quot;">​</a></h2><p>Set 是一种数据结构，它包含一组唯一且无序的值。在 JavaScript 中，Set 以对象的形式存在，其中的值只能出现一次。以下是 Set 的一些特性说明：</p><h3 id="_1-唯一性" tabindex="-1">1. 唯一性 <a class="header-anchor" href="#_1-唯一性" aria-label="Permalink to &quot;1. 唯一性&quot;">​</a></h3><p>Set 中的值必须是唯一的。如果将相同的值加入 Set 多次，只会存储一次这使得 Set 成为去重数据的想结构。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uniqueSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uniqueSet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uniqueSet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uniqueSet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uniqueSet) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: Set(2) {1, 2}</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f281d44d93242f2aa45204aed455a58~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=835&amp;h=139&amp;s=18207&amp;e=png&amp;b=181818" alt="image.png"></p><h3 id="_2-无序性" tabindex="-1">2. 无序性 <a class="header-anchor" href="#_2-无序性" aria-label="Permalink to &quot;2. 无序性&quot;">​</a></h3><p>在 Set 中，值的排列顺序不是照插入的顺序来决定的。这意味着无法依赖 Set 的顺序性进行操作。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unorderedSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unorderedSet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unorderedSet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unorderedSet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(unorderedSet) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: Set(3) {3, 1, 2}</span></span></code></pre></div><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3be48fd980644883826d49ca2abae5c5~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=835&amp;h=139&amp;s=18054&amp;e=png&amp;b=181818" alt="image.png"></p><h3 id="_3-可迭代性" tabindex="-1">3. 可迭代性 <a class="header-anchor" href="#_3-可迭代性" aria-label="Permalink to &quot;3. 可迭代性&quot;">​</a></h3><p>Set 是可通过迭代器进行遍历，可以使用 for... 循环或者 Array.from 方法将 Set 转换数组。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iterableSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iterableSet) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6126e26dae9647e79643fe0c1d171a07~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=835&amp;h=164&amp;s=17125&amp;e=png&amp;b=181818" alt="image.png"></p><h3 id="_4-长度属性" tabindex="-1">4. 长度属性 <a class="header-anchor" href="#_4-长度属性" aria-label="Permalink to &quot;4. 长度属性&quot;">​</a></h3><p>Set 实例有 size 属性，表示 Set 中值的数量。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sizedSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sizedSet.size) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: 5</span></span></code></pre></div><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d715c351a5a2418cac5f8fb0f38526d6~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=835&amp;h=134&amp;s=16512&amp;e=png&amp;b=181818" alt="image.png"></p><h3 id="_5-添加和删除" tabindex="-1">5. 添加和删除 <a class="header-anchor" href="#_5-添加和删除" aria-label="Permalink to &quot;5. 添加和删除&quot;">​</a></h3><p>Set 具有添加值的 add 方法，移值的 delete 方法，以及清空所有值的 clear 方法。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> addDeleteSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">addDeleteSet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">addDeleteSet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(addDeleteSet) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: Set(2) {1, 2}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">addDeleteSet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(addDeleteSet) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: Set(1) {2}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">addDeleteSet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(addDeleteSet) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: Set(0) {}</span></span></code></pre></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ee4b4ca908c4d2286f9bde22f44597c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=835&amp;h=163&amp;s=21210&amp;e=png&amp;b=181818" alt="image.png"></p><h3 id="_6-判断值是否存在" tabindex="-1">6. 判断值是否存在 <a class="header-anchor" href="#_6-判断值是否存在" aria-label="Permalink to &quot;6. 判断值是否存在&quot;">​</a></h3><p>可以使用 has 方法来检查某一特定值是否存在 Set 中。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hasSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hasSet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hasSet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: false</span></span></code></pre></div><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ebdf0884583f45508acaeca376a04937~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=835&amp;h=147&amp;s=17929&amp;e=png&amp;b=181818" alt="image.png"></p><h3 id="_7-引用" tabindex="-1">7. 引用 <a class="header-anchor" href="#_7-引用" aria-label="Permalink to &quot;7. 引用&quot;">​</a></h3><p>在 Set 中存储的值弱引用的，意味着如果没有其他引用指向 Set 中的某个值，那么这个值可能会被垃圾回收。</p><blockquote><p>总的来说 Set 是一种非常有用的数据结构，特别适用于需要存储唯值并且不需要考虑顺序的情况。它的高效去重能力和集合操作特性，使得它在实际开发中有着广泛的应用。</p></blockquote><h2 id="四-set-的方法" tabindex="-1">四. Set 的方法 <a class="header-anchor" href="#四-set-的方法" aria-label="Permalink to &quot;四. Set 的方法&quot;">​</a></h2><h3 id="_1-添加元素-add" tabindex="-1">1. 添加元素：<code>add()</code> <a class="header-anchor" href="#_1-添加元素-add" aria-label="Permalink to &quot;1. 添加元素：\`add()\`&quot;">​</a></h3><p>使用 <code>add()</code> 方法向 Set 中添加新的元素。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mySet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mySet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mySet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mySet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_2-删除元素-delete" tabindex="-1">2. 删除元素：<code>delete()</code> <a class="header-anchor" href="#_2-删除元素-delete" aria-label="Permalink to &quot;2. 删除元素：\`delete()\`&quot;">​</a></h3><p>使用 <code>delete()</code> 方法从 Set 中删除指定的元素。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mySet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从 Set 中删除元素 2</span></span></code></pre></div><h3 id="_3-检查元素是否存在-has" tabindex="-1">3. 检查元素是否存在：<code>has()</code> <a class="header-anchor" href="#_3-检查元素是否存在-has" aria-label="Permalink to &quot;3. 检查元素是否存在：\`has()\`&quot;">​</a></h3><p>使用 <code>has()</code> 方法检查指定元素是否存在于 Set 中。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mySet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 检查 Set 中是否存在元素 1，返回结果为 true 或</span></span></code></pre></div><h3 id="_4-清空-set-clear" tabindex="-1">4. 清空 Set：<code>clear()</code> <a class="header-anchor" href="#_4-清空-set-clear" aria-label="Permalink to &quot;4. 清空 Set：\`clear()\`&quot;">​</a></h3><p>使用 <code>clear()</code> 方法清空 Set 中所有元素。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mySet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 清空 Set</span></span></code></pre></div><h3 id="_5-获取-set-的大小-size-属性" tabindex="-1">5. 获取 Set 的大小：size 属性 <a class="header-anchor" href="#_5-获取-set-的大小-size-属性" aria-label="Permalink to &quot;5. 获取 Set 的大小：size 属性&quot;">​</a></h3><p>使用 <code>size</code> 属性获取 Set 内元素数量。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> setSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mySet.size; 获取 Set 的大小</span></span></code></pre></div><p>掌握以上的这些方法能够帮助你在开发过程中，熟练的对 Set 进行元素的增查操作，以及 Set 的大小信息。</p><h2 id="五-注意事项" tabindex="-1">五. 注意事项 <a class="header-anchor" href="#五-注意事项" aria-label="Permalink to &quot;五. 注意事项&quot;">​</a></h2><p>通过上面的了解，我们基本认识到了 Set 的特性以及最常用的使用方法，但是在使用 Set 时，有几个注意事项需要我们提前了解一下，下面是我总结的使用 Set 时需要注意的几个事项：</p><h3 id="_1-值的唯一性" tabindex="-1">1. 值的唯一性 <a class="header-anchor" href="#_1-值的唯一性" aria-label="Permalink to &quot;1. 值的唯一性&quot;">​</a></h3><p>Set 中的值必须是唯一的，相同的值不会被重复存储。这意味着当你向一个 Set 中添加已存在的值时，不会有任何变化。因此，要确保你向 Set 添加的值是唯一的，否则可能会导致意外的结果。</p><h3 id="_2-对象引用" tabindex="-1">2. 对象引用 <a class="header-anchor" href="#_2-对象引用" aria-label="Permalink to &quot;2. 对象引用&quot;">​</a></h3><p>Set 存储的是值的引用，而不是复制。这意味着当你向 Set 添加一个对象时，实际存储的是对象的引用而不是对象本身。这可能会导致一些意想不到的结果，特别是在修改对象时。请注意在修改对象后检查 Set 中的值是否也会被修改。</p><h3 id="_3-nan-的处理" tabindex="-1">3. NaN 的处理 <a class="header-anchor" href="#_3-nan-的处理" aria-label="Permalink to &quot;3. NaN 的处理&quot;">​</a></h3><p>在 Set 中，NaN 被视为是相同的值，即 NaN 只能存储一次。这可能与你的预期不同，因为在其他地方 NaN 通常被视为是不相同的值。所以，确保在使用 Set 存储 NaN 时，不会出现重复的情况。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;one&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;two&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;one&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;two&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01308bf9eec647b0ab7b43109c455829~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=835&amp;h=131&amp;s=18005&amp;e=png&amp;b=181818" alt="image.png"></p><h3 id="_4-不支持索引访问" tabindex="-1">4. 不支持索引访问 <a class="header-anchor" href="#_4-不支持索引访问" aria-label="Permalink to &quot;4. 不支持索引访问&quot;">​</a></h3><p>Set 不支持通过索引来访问值，因为它的值是无序的。如果你需要通过索引访问值，请考虑使用 Array。</p><h3 id="_5-类型转换" tabindex="-1">5. 类型转换 <a class="header-anchor" href="#_5-类型转换" aria-label="Permalink to &quot;5. 类型转换&quot;">​</a></h3><p>当我们向 Set 中添加值的时候，不会进行类型转换，即 &#39;1&#39;和 1 是不相同的</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set)</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8d75846507ba4d89976eaedea9940955~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=835&amp;h=131&amp;s=16822&amp;e=png&amp;b=181818" alt="image.png"></p><p>在使用 Set 时需要针对具体场景进行合理的选择和注意。尽管 Set 在去重和集合操作等方面非常实用，但也需要注意它的特性和限制，以便正确使用和处理数据。</p><h2 id="六-总结" tabindex="-1">六. 总结 <a class="header-anchor" href="#六-总结" aria-label="Permalink to &quot;六. 总结&quot;">​</a></h2><p>通过对本文的学习，我们都知道了 Set 是 JavaScript 中的一种数据结构，它提供了一种用于存储唯一值的机制，同时还具备高效的数据操作能力。</p><p>首先，我们了解了 Set 的核心特性：<strong>唯一性</strong>、<strong>无序性</strong>、<strong>可迭代性</strong>以及<strong>长度属性</strong>等。这些特性使得 Set 成为一个强大的去重工具，并且具备高效的集合操作能力。</p><p>紧接着，我们逐一介绍了 Set 的各种方法的使用。我们学习了如何向 Set 中添加和删除值，通过 <code>add</code>、<code>delete</code> 和 <code>clear</code> 方法完成这些操作。我们还了解了如何判断某个值是否存在于 Set 中，通过 <code>has</code> 方法可以快速判断。</p><p>在实际开发中，Set 有着广泛的应用。无论是从一个数组中快速去重重复的值，还是利用集合操作来处理数据，Set 都能提供便利且高效的解决方案。</p><p>总而言之，Set 是 JavaScript 中的一个重要而强大的数据结构。通过深入理解 Set 的特性和方法，我们能够更好地应用它来解决实际问题。</p>`,88);function k(d,r,E,g,c,o){const s=n("ArticleFooter");return h(),a("div",null,[l,t(s,{link:"https://juejin.cn/post/7301511024167632922"})])}const u=i(p,[["render",k]]);export{F as __pageData,u as default};
