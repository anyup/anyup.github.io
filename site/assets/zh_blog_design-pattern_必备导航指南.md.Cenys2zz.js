import{_ as r,c as e,I as d,aU as a,o,E as n}from"./chunks/framework.CpXV_ol5.js";const _=JSON.parse('{"title":"JavaScript 经典设计模式系列之导航指南","description":"","frontmatter":{"title":"JavaScript 经典设计模式系列之导航指南"},"headers":[],"relativePath":"zh/blog/design-pattern/必备导航指南.md","filePath":"zh/blog/design-pattern/必备导航指南.md","lastUpdated":1725683959000}'),s={name:"zh/blog/design-pattern/必备导航指南.md"},c=a('<h1 id="javascript-经典设计模式系列之导航指南" tabindex="-1">JavaScript 经典设计模式系列之导航指南 <a class="header-anchor" href="#javascript-经典设计模式系列之导航指南" aria-label="Permalink to &quot;JavaScript 经典设计模式系列之导航指南&quot;">​</a></h1><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d676c4fcb3344231a7731004ac98a58d~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=669&amp;h=321&amp;s=105552&amp;e=png&amp;b=138383" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f48059ff93f74982bd96e51024f2f739~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1576&amp;h=602&amp;s=167810&amp;e=png&amp;b=fefefe" alt="image.png"></p><p align="center">JavaScript经典设计模式</p><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p><strong>设计模式</strong>是一种解决<strong>代码组织</strong>、<strong>代码复用</strong>和<strong>代码可维护性</strong>等问题的技术方法。它通过将代码以特定的方式组织起来，使代码结构更加<strong>清晰</strong>、<strong>可读性更高</strong>、<strong>易于维护</strong>和<strong>扩展</strong>。为了在开发中能更优秀的完成功能，我们应该学习并掌握常用的设计模式。</p><p><code>JavaScript</code>总共有23种经典的设计模式，如上图所示，下面我将会简单的逐一进行讲解，希望大家先了解每个设计模式的基本概念，之后我会有更多的文章进行详细的讲解：</p><h2 id="创建型设计模式" tabindex="-1">创建型设计模式 <a class="header-anchor" href="#创建型设计模式" aria-label="Permalink to &quot;创建型设计模式&quot;">​</a></h2><blockquote><p><strong>创建型设计模式</strong>主要关注对象的创建过程，它们提供了一种机制来创建对象的实例，使代码与具体对象的创建过程解耦。</p></blockquote><table><thead><tr><th>设计模式</th><th>英文</th><th>定义</th><th>深入修炼</th></tr></thead><tbody><tr><td>1. 简单工厂模式</td><td><code>Simple Factory Pattern</code></td><td>通过工厂函数或类来创建对象，隐藏具体实例化的过程，返回一个统一的接口。</td><td><a href="https://juejin.cn/post/7275667546781990927" target="_blank" rel="noreferrer"> “神奇的魔术师” </a></td></tr><tr><td>2. 工厂模式</td><td><code>Factory Pattern</code></td><td>通过工厂函数或类来创建对象，隐藏具体实例化的过程，返回一个统一的接口。</td><td><a href="https://juejin.cn/post/7275971781986369551" target="_blank" rel="noreferrer">“名片设计师”</a></td></tr><tr><td>3. 抽象工厂模式</td><td><code>Abstract Factory Pattern</code></td><td>提供一个创建一系列相关或相互依赖对象的接口，而不需要具体指定每个对象的具体类。</td><td><a href="https://juejin.cn/post/7276363520555925560" target="_blank" rel="noreferrer"> “幽灵工厂” </a></td></tr><tr><td>4. 建造者模式</td><td><code>Builder Pattern</code></td><td>将一个复杂对象的构建过程和它的表示分离，通过指挥者按照一定的顺序调用建造者来创建对象。</td><td><a href="https://juejin.cn/post/7276716177120084029" target="_blank" rel="noreferrer"> “分即是合” </a></td></tr><tr><td>5. 原型模式</td><td><code>Prototype Pattern</code></td><td>使用原型对象作为模板来创建对象，使用原型链继承属性和方法。</td><td><a href="https://juejin.cn/post/7278104060237266980" target="_blank" rel="noreferrer"> “语言之魂” </a></td></tr><tr><td>6. 单例模式</td><td><code>Singleton Pattern</code></td><td>保证一个类只有一个实例，并提供一个全局访问点来获取该实例。</td><td><a href="https://juejin.cn/post/7277787934849105955" target="_blank" rel="noreferrer"> “单孑独立”</a></td></tr></tbody></table><h2 id="结构型设计模式" tabindex="-1">结构型设计模式 <a class="header-anchor" href="#结构型设计模式" aria-label="Permalink to &quot;结构型设计模式&quot;">​</a></h2><blockquote><p><strong>结构型设计模式</strong>主要关注对象之间的组织方式，以及对象之间的关系和交互方式。</p></blockquote><table><thead><tr><th>设计模式</th><th>英文</th><th>定义</th><th>深入修炼</th></tr></thead><tbody><tr><td>1. <strong>外观模式</strong></td><td><code>Facade Pattern</code></td><td>提供了一个统一的接口，用来简化底层系统的复杂性。</td><td><a href="https://juejin.cn/post/7280007606243180580" target="_blank" rel="noreferrer"> 简化复杂系统调用的利器 </a></td></tr><tr><td>2. <strong>适配器模式</strong></td><td><code>Adapter Pattern</code></td><td>将一个类的接口转换成期望的另一个接口，使原本因接口不兼容而不能一起工作的类可以一起工作。</td><td><a href="https://juejin.cn/post/7281088108925861948" target="_blank" rel="noreferrer"> 接口天然的“翻译官” </a></td></tr><tr><td>3. <strong>代理模式</strong></td><td><code>Proxy</code></td><td>为其他对象提供一种代理，以便控制对这个对象的访问。</td><td><a href="https://juejin.cn/post/7281536156327002152" target="_blank" rel="noreferrer"> 对象的“虚拟与现实” </a></td></tr><tr><td>4. <strong>装饰器模式</strong></td><td><code>Decorator Pattern</code></td><td>动态地给对象添加额外的职责，可以封装原始对象，以便在执行其核心职责前后进行扩展。</td><td><a href="https://juejin.cn/post/7283776161527070757" target="_blank" rel="noreferrer"> 优雅的给对象增添“魔法” </a></td></tr><tr><td>5. <strong>桥接模式</strong></td><td><code>Bridge Pattern</code></td><td>将抽象和实现分离开来，使它们可以独立变化，通过桥接来连接抽象和实现。</td><td><a href="https://juejin.cn/post/7293176193323237414" target="_blank" rel="noreferrer"> 搭建跨越维度的通路 </a></td></tr><tr><td>6. <strong>组合模式</strong></td><td><code>Composite Pattern</code></td><td>将对象组合成树结构，以表示“分-整体”的层次结构，使客户端可以一致地处理单个对象和组合对象。</td><td><a href="https://juejin.cn/post/7294088944835952640" target="_blank" rel="noreferrer"> 打造灵活高效的对象层次结构 </a></td></tr><tr><td>7. <strong>享元模式</strong></td><td><code>Flyweight Pattern</code></td><td>通过共享对象，减少内存使用，提高性能。</td><td><a href="https://juejin.cn/post/7294597695478628388" target="_blank" rel="noreferrer"> 优化对象内存占用的利器 </a></td></tr></tbody></table><h2 id="行为型设计模式" tabindex="-1">行为型设计模式 <a class="header-anchor" href="#行为型设计模式" aria-label="Permalink to &quot;行为型设计模式&quot;">​</a></h2><blockquote><p><strong>行为型设计模式</strong>主要关注对象之间的交互和通信方式，以及对象如何以一种灵活的方式完成任务和行为。</p></blockquote><table><thead><tr><th>设计模式</th><th>英文</th><th>定义</th><th>深入修炼</th></tr></thead><tbody><tr><td>1. <strong>模板方法模式</strong></td><td><code>Template Method Pattern</code></td><td>定义一个操作中的算法的骨架，将一些步骤的实现延迟到子类中。</td><td><a href="https://juejin.cn/post/7297159273906028585" target="_blank" rel="noreferrer"> 打破束缚，解密代码复用的精髓 </a></td></tr><tr><td>2. <strong>观察者模式</strong></td><td><code>Observer Pattern</code></td><td>定义了一种对象之间的依赖关系，当一个对象的状态发生变化时，其相关的对象都会得到通知并自动更新。</td><td><a href="https://juejin.cn/post/7300929241949077539" target="_blank" rel="noreferrer"> 观察者与可观察对象的巧妙互动 </a></td></tr><tr><td>3. <strong>状态模式</strong></td><td><code>State Pattern</code></td><td>允许对象在其内部状态改变时改变其行为，对象看起来似乎修改了它的类。</td><td><a href="https://juejin.cn/post/7310041127180943369" target="_blank" rel="noreferrer"> 优雅地管理应用中产生的不同状态 </a></td></tr><tr><td>4. <strong>策略模式</strong></td><td><code>Strategy Pattern</code></td><td>定义一系列的算法，封装每个算法，并使它们可以互相替换，使得算法的变化不影响使用算法的客户端。</td><td><a href="https://juejin.cn/post/7314519123177209868" target="_blank" rel="noreferrer"> 灵活、可扩展的编程利器 </a></td></tr><tr><td>5. <strong>职责链模式</strong></td><td><code>Chain of Responsibility Pattern</code></td><td>让多个对象都有机会处理请求，从而避免请求发送者与接收者之间的耦合关系。</td><td><a href="https://juejin.cn/post/7340472228927373352" target="_blank" rel="noreferrer"> 优雅地处理请求流程 </a></td></tr><tr><td>6. <strong>命令模式</strong></td><td><code>Command Pattern</code></td><td>将一个请求封装成一个对象，从而使你可以用不同的请求对客户进行参数化。</td><td><a href="https://juejin.cn/post/7365830295394484243" target="_blank" rel="noreferrer"> 打造可撤销的操作命令 </a></td></tr><tr><td>7. <strong>访问者模式</strong></td><td><code>Visitor Pattern</code></td><td>在不改变对象结构的前提下，定义作用于对象结构中的各个元素操作。</td><td><a href="./.html"></a></td></tr><tr><td>8. <strong>中介者模式</strong></td><td><code>Mediator Pattern</code></td><td>用一个中介对象来封装一系列的对象交互，使对象之间解耦。</td><td><a href="./.html"></a></td></tr><tr><td>9. <strong>备忘录模式</strong></td><td><code>Memento Pattern</code></td><td>在不破坏对象封装的前提下，捕获内部对象的状态，并在对象外部保存这个状态，使得以后可以恢复对象到原来的状态。</td><td><a href="./.html"></a></td></tr><tr><td>10. <strong>迭代器模式</strong></td><td><code>Iterator Pattern</code></td><td>提供一种方法，顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部结构。</td><td><a href="./.html"></a></td></tr><tr><td>11. <strong>解释器模式</strong></td><td><code>Interpreter Pattern</code></td><td>定义语言文法的一种表示，用来解释语言中的句子。</td><td><a href="./.html"></a></td></tr></tbody></table><h2 id="为什么要学习设计模式" tabindex="-1">为什么要学习设计模式 <a class="header-anchor" href="#为什么要学习设计模式" aria-label="Permalink to &quot;为什么要学习设计模式&quot;">​</a></h2><p>学习设计模式对于前端开发者来说非常重要，设计模式可以帮助我们：</p><ol><li><p><strong>提高代码质量</strong>：设计模式是经过多年实践总结出来的最佳实践，它们可以帮助开发者写出更高质量、更可维护的代码。</p></li><li><p><strong>促进团队协作</strong>：设计模式提供了一种共享的设计思想和术语，使得团队成员之间更容易沟通和理解彼此的代码。</p></li><li><p><strong>加快开发速度</strong>：设计模式提供了一些经过验证的解决方案，并且封装了一些通用的逻辑，可以减少开发时间并提高开发效率。</p></li><li><p><strong>更好的扩展性和灵活性</strong>：设计模式可以帮助开发者将代码解耦合，从而使得代码更加灵活、可扩展和可重用。</p></li><li><p><strong>跨语言应用</strong>：许多设计模式的思想是通用的，不仅适用于JS，还适用于其他编程语言。通过学习设计模式可以将这些技能应用于其他语言和项目中，提高自己的跨领域竞争力。</p></li></ol><p>总之，学习设计模式可以帮助JS开发者写出更高质量、更可维护的代码，提高团队的协作效率，加快开发速度，并具备更好的扩展性和灵活性，使开发者能够更好地应对复杂的软件开发挑战。</p><h2 id="如何更好的学习掌握设计模式" tabindex="-1">如何更好的学习掌握设计模式 <a class="header-anchor" href="#如何更好的学习掌握设计模式" aria-label="Permalink to &quot;如何更好的学习掌握设计模式&quot;">​</a></h2><p>要更好地学习和掌握设计模式，可以考虑以下学习方法：</p><ol><li><p><strong>理论学习</strong>：了解每个设计模式的基本概念、原理和使用场景。参考经典的设计模式资料等获取理论知识。</p></li><li><p><strong>实践演练</strong>：通过实际项目的实践来应用和理解。尝试在自己的项目中应用设计模式，将理论知识转化为实际应用。</p></li><li><p><strong>重构既有项目</strong>：将学到的设计模式知识应用到既有中进行重构，重构过程中可以尝试将一些重复代码进行抽象和优化，以提高代码的可读性和可维护性。</p></li><li><p><strong>深入理解设计原则</strong>：设计模式背后往往有一些通用的设计原则，如单一职责原则、开闭原则、迪米特法则等。深入理解这些设计原则，可以帮助更好地理解和应用设计模式。</p></li></ol><p>通过以上的学习方法，可以逐渐提高对<code>JavaScript</code>设计模式的理解和应用能力，不断提升自己的编程水平和开发技能。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本文的主要目的是先让大家了解下基本概念，对于每一种设计模式的详细解读，会在后续的文章中进行详细讲解，敬请期待！</p>',26);function p(l,h,i,g,f,b){const t=n("ArticleFooter");return o(),e("div",null,[c,d(t,{link:"https://juejin.cn/post/7274912999562149943"})])}const j=r(s,[["render",p]]);export{_ as __pageData,j as default};
