import{_ as a,c as i,I as p,aU as n,o as e,E as t}from"./chunks/framework.CpXV_ol5.js";const F=JSON.parse('{"title":"探索包管理新视界 - 使用 pnpm","description":"","frontmatter":{"title":"探索包管理新视界 - 使用 pnpm"},"headers":[],"relativePath":"zh/blog/tools/PNPM包管理探索.md","filePath":"zh/blog/tools/PNPM包管理探索.md","lastUpdated":1725606759000}'),l={name:"zh/blog/tools/PNPM包管理探索.md"},h=n(`<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/429161557ebb4e889bba2cd427950be3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1007&amp;h=272&amp;s=98248&amp;e=png&amp;b=e2dddc" alt="image.png"></p><h2 id="一、认识-pnpm" tabindex="-1">一、认识 pnpm <a class="header-anchor" href="#一、认识-pnpm" aria-label="Permalink to &quot;一、认识 pnpm&quot;">​</a></h2><h3 id="_1-什么是-pnpm" tabindex="-1">1. 什么是 pnpm？ <a class="header-anchor" href="#_1-什么是-pnpm" aria-label="Permalink to &quot;1. 什么是 pnpm？&quot;">​</a></h3><p>pnpm 是一个用于管理 JavaScript 项目依赖的包管理工具。pnpm 的全称为 &quot;Performant npm&quot;，它旨在提供更快速、更高效的依赖管理体验。相较于传统的 npm 和 Yarn，pnpm 采用了一种全新的依赖管理方式，通过共享依赖来减少磁盘占用，同时提供了快速的安装和更新速度。</p><p>pnpm 的核心特点包括：</p><ol><li><strong>空间共享</strong>：在安装依赖时将相同版本的库共享，从而减少磁盘占用。</li><li><strong>快速安装</strong>：采用符号链接技术，使得安装依赖时速度更快。</li><li><strong>并行安装</strong>：支持依赖并行安装，提升安装速度。</li><li><strong>高效更新</strong>：能够通过软连接的方式快速更新依赖。</li><li><strong>锁定版本</strong>：支持锁定依赖版本，确保在不同开发环境下一致性。</li></ol><p>pnpm 通过其独特的依赖管理方式和性能优势，为 JavaScript 项目的开发和部署提供了更高效的依赖管理解决方案。</p><h3 id="_2-为什么选择使用-pnpm" tabindex="-1">2. 为什么选择使用 pnpm？ <a class="header-anchor" href="#_2-为什么选择使用-pnpm" aria-label="Permalink to &quot;2. 为什么选择使用 pnpm？&quot;">​</a></h3><p>平时我们用的包工具管理主要有 npm 和 Yarn，为什么我们还要去多选用 pnpm 的考虑？下面我们分析一下使用 pnpm 的主要原因。</p><p>pnpm 主要有几个优势，这也是 pnpm 项目创立之初的初心：</p><ol><li><p><strong>节省磁盘空间</strong>：pnpm 会在本地磁盘上维护一个共享的依赖包存储库，当你在不同项目中安装相同版本的依赖包时，pnpm 会将其存储在共享存储库中，避免了重复下载和存储依赖包。</p></li><li><p><strong>提高安装速度</strong>：pnpm 使用符号链接技术和并行安装，因此能够显著提高依赖包的安装速度，尤其对于大型项目而言，这意味着能够大幅缩短依赖安装的时间成本。</p></li><li><p><strong>高效更新</strong>：pnpm 的软链接方式可以让更新依赖包的操作更为高效，因为它能够复用已有的依赖，而无需重复下载和存储。</p></li><li><p><strong>生态兼容</strong>：pnpm 兼容现有的 npm 生态，可以无缝使用大部分基于 npm 的包和工具，而且它还支持 Yarn 的 lockfile 格式，方便与使用 Yarn 的项目进行集成和迁移。</p></li></ol><p>综上所述，选择使用 pnpm 可以带来磁盘空间、安装速度、更新效率、版本管理等多方面的优势，特别是对于需要频繁安装依赖和维护大型项目的开发团队而言，pnpm 提供了一种显著改善依赖管理体验的解决方案。</p><h2 id="二、使用-pnpm" tabindex="-1">二、使用 pnpm <a class="header-anchor" href="#二、使用-pnpm" aria-label="Permalink to &quot;二、使用 pnpm&quot;">​</a></h2><h3 id="_1-安装-pnpm" tabindex="-1">1. 安装 pnpm <a class="header-anchor" href="#_1-安装-pnpm" aria-label="Permalink to &quot;1. 安装 pnpm&quot;">​</a></h3><p>通常有以下两种方式安装 pnpm，如下面所示</p><ol><li><p>在全局安装 pnpm（推荐）：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm</span></span></code></pre></div></li><li><p>在项目中安装 pnpm： 如果你不想在全局范围内安装 pnpm，可以通过以下命令在项目中安装：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm</span></span></code></pre></div></li><li><p>兼容性</p></li></ol><p>以下是各版本 pnpm 与各版本 Node.js 之间的兼容性说明。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9a0f234d7624ec9875784288418360f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=489&amp;h=329&amp;s=24127&amp;e=png&amp;b=fcfcfc" alt="image.png"></p><h3 id="_2-初始化项目" tabindex="-1">2. 初始化项目 <a class="header-anchor" href="#_2-初始化项目" aria-label="Permalink to &quot;2. 初始化项目&quot;">​</a></h3><p>在你的项目根目录下，通过以下命令初始化一个新的 pnpm 项目</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><p>按照提示填写项目的相关信息，包括项目名称、版本、描述等，即可初始化一个 pnpm 项目。</p><h3 id="_3-配置文件介绍" tabindex="-1">3. 配置文件介绍 <a class="header-anchor" href="#_3-配置文件介绍" aria-label="Permalink to &quot;3. 配置文件介绍&quot;">​</a></h3><p>pnpm 的配置文件是 <code>pnpm-workspace.yaml</code>，它支持配置工作区（workspace）、依赖版本控制、日志等信息。一个典型的配置文件示例如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;packages/*&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;apps/*&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;examples/*&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tools/*&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">devDependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  typescript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.4.4</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  eslint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.1.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">peerDependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  react</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;react-dom&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">hoistPattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span></span></code></pre></div><p>上述配置文件中：</p><ul><li><code>packages</code> 字段指定了工作区中的包的位置，它们可以是文件夹路径的模式匹配。</li><li><code>devDependencies</code> 字段指定了开发环境下的依赖及其版本。</li><li><code>peerDependencies</code> 字段指定了当前项目的对等依赖。</li><li><code>hoistPattern</code> 字段指定了哪些包应该被提升到顶层依赖。</li></ul><p>你可以根据项目的需要，具体配置文件中的内容。</p><h2 id="三、管理依赖" tabindex="-1">三、管理依赖 <a class="header-anchor" href="#三、管理依赖" aria-label="Permalink to &quot;三、管理依赖&quot;">​</a></h2><p>管理依赖是项目开发过程中非常重要的一部分，下面将介绍如何使用 pnpm 来进行依赖管理：</p><h3 id="_1-安装依赖" tabindex="-1">1. 安装依赖 <a class="header-anchor" href="#_1-安装依赖" aria-label="Permalink to &quot;1. 安装依赖&quot;">​</a></h3><p>通过以下命令可以安装项目所需的依赖包：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">package-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>在根目录添加依赖</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">package-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span></span></code></pre></div><p>你也可以一次性安装项目中所有的依赖：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><h3 id="_2-更新依赖" tabindex="-1">2. 更新依赖 <a class="header-anchor" href="#_2-更新依赖" aria-label="Permalink to &quot;2. 更新依赖&quot;">​</a></h3><p>若要更新依赖到它们的最新版本，可以执行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span></code></pre></div><h3 id="_3-卸载依赖" tabindex="-1">3. 卸载依赖 <a class="header-anchor" href="#_3-卸载依赖" aria-label="Permalink to &quot;3. 卸载依赖&quot;">​</a></h3><p>若要卸载不再需要的依赖，可以使用以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remove</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">package-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h3 id="_4-锁定版本" tabindex="-1">4. 锁定版本 <a class="header-anchor" href="#_4-锁定版本" aria-label="Permalink to &quot;4. 锁定版本&quot;">​</a></h3><p>pnpm 能够自动生成用于锁定依赖版本的 <code>pnpm-lock.yaml</code> 文件。当运行 <code>pnpm install</code> 时，pnpm 会根据该文件确保依赖安装的版本与锁定的版本一致。你可以通过以下命令生成锁定文件：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save</span></span></code></pre></div><h3 id="_5-清除缓存" tabindex="-1">5. 清除缓存 <a class="header-anchor" href="#_5-清除缓存" aria-label="Permalink to &quot;5. 清除缓存&quot;">​</a></h3><p>有时候，npm 或 pnpm 的缓存可能会导致一些奇怪的问题。尝试清理缓存，然后重新安装依赖。对于 pnpm，可以使用以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cache</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clean</span></span></code></pre></div><p>注意：自 pnpm v7 起，清理缓存的命令已更新为</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> store</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prune</span></span></code></pre></div><p>通过以上方法，你可以轻松地管理项目中的依赖，包括安装、更新、卸载以及版本锁定。希望这些信息能对你有所帮助。</p><h2 id="四、本地开发" tabindex="-1">四、本地开发 <a class="header-anchor" href="#四、本地开发" aria-label="Permalink to &quot;四、本地开发&quot;">​</a></h2><p>在本地开发过程中，使用 pnpm 进行依赖管理和本地调试是非常常见的，下面我将介绍相关内容：</p><h3 id="_1-利用本地包" tabindex="-1">1. 利用本地包 <a class="header-anchor" href="#_1-利用本地包" aria-label="Permalink to &quot;1. 利用本地包&quot;">​</a></h3><p>你可以在项目中使用本地已存在的包作为依赖，从而进行开发和调试。在 <code>package.json</code> 文件中，你可以将本地路径指向依赖的位置，例如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;my-local-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file:../path-to-local-package&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这样就可以在项目中使用本地的包进行开发、等操作。</p><h3 id="_2-开发依赖和生产依赖" tabindex="-1">2. 开发依赖和生产依赖 <a class="header-anchor" href="#_2-开发依赖和生产依赖" aria-label="Permalink to &quot;2. 开发依赖和生产依赖&quot;">​</a></h3><p>在 <code>package.json</code> 文件中，有两种类型的依赖：开发依赖和生产依赖。开发赖通常指的是在发、测试和构建过程中需要使用的依赖包，而不会在最终的产品中包含；生产依赖则是最终产品运行时需要用到的依赖包。你可以使用以下命令来添加开发依赖和生产依赖：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">package-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 安装开发依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">package-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-prod</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 安装生产依赖</span></span></code></pre></div><h3 id="_3-使用-pnpm-进行本地调试" tabindex="-1">3. 使用 pnpm 进行本地调试 <a class="header-anchor" href="#_3-使用-pnpm-进行本地调试" aria-label="Permalink to &quot;3. 使用 pnpm 进行本地调试&quot;">​</a></h3><p>当你需要在本地试项目时，pnpm 提供了一些命令来帮助你进行本地开发调试，例如：</p><ul><li><code>pnpm start</code>: 启动项目的开发服务器或者运行一些开发时需要的脚本。</li><li><code>pnpm run &lt;script-name&gt;</code>: 运行 <code>package.json</code> 文件中定义的脚本。</li><li><code>pnpm test</code>: 运行项目的测试脚本。</li><li><code>pnpm dev</code>: 启动开发式，通常用于本地开发调试。</li></ul><p>这些命令可以根据你的项目需求和配置来进行调整和使用，帮你进行本地开发和调试工作。希望以上信息能帮助到你。</p><h2 id="五、与其他包管理工具对比" tabindex="-1">五、与其他包管理工具对比 <a class="header-anchor" href="#五、与其他包管理工具对比" aria-label="Permalink to &quot;五、与其他包管理工具对比&quot;">​</a></h2><h3 id="_1-介绍" tabindex="-1">1. 介绍 <a class="header-anchor" href="#_1-介绍" aria-label="Permalink to &quot;1. 介绍&quot;">​</a></h3><ul><li><p>npm（Node Package Manager）是 Node.js 默认的包管理工具，在社区中拥有广泛的用户和生态系统。它具有丰富的功能和强大的生态支持。</p></li><li><p>yarn 是由 Facebook 开发的包管理工具，旨在解决 npm 在性能和一致性方面的一些问题。yarn 具有类似的命令和功能，可以与 npm 兼容，并通过并行下载和缓存机制来提高安装和更新的速度。yarn 在性能上较 npm 有一些优势，特别在大型项目或复杂的依赖关系中更为明显。</p></li><li><p>pnpm 是一个相对较新的包管理工具，与 npm 和 yarn 不同的是，pnpm 使用一种称为“符号链接”的技术来实现依赖的共享。这意味着 pnpm 不会将每个依赖都复制到项目目录中，而是在全局缓存中共享它们。这样可以节省磁盘空间，并且在安装和更新时也更加高效。</p></li></ul><h3 id="_2-对比" tabindex="-1">2. 对比 <a class="header-anchor" href="#_2-对比" aria-label="Permalink to &quot;2. 对比&quot;">​</a></h3><p>pnpm、yarn 和 npm 都是流行的 JavaScript 包管理工具，它们有各自的特点和优势。</p><p>引用官方的对比角度，从以下几个方面来对比一下 pnpm、Yarn 和 npm 之间的区别</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/85ae2fe7d7eb4015ba80ae7814f49f72~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=928&amp;h=789&amp;s=88897&amp;e=png&amp;b=fbfbfb" alt="image.png"></p><p>下面主要从性能、空间占用、生态系统、使用体验上对 pnpm、Yarn 和 npm 进行对比</p><ul><li><p><strong>性能</strong>：yarn 和 pnpm 在包的安装和更新速度上通常优于 npm，特别是在较大项目或多依赖的情况下。这是因为它们使用了并行下载和缓存机制。</p></li><li><p><strong>空间占用</strong>：由于符号链接的使用，pnpm 在磁盘空间使用方面相对于 npm 和 yarn 较少。这对于包含大量依赖项的项目尤为重要。</p></li><li><p><strong>生态系统</strong>：npm 的生态系统非常庞大，拥有广泛的社区支持和包资源。相比之下，yarn 和 pnpm 虽然也能使用 npm 的 registry，但没有独立的生态系统，它们的资源库与 npm 是一样的。</p></li><li><p><strong>使用体验</strong>：npm、yarn 和 pnpm 的命令和操作非常相似，开发者可以根据个人喜好选择其中之一。然而，pnpm 在使用上可能需要用户对符号链接有一定了解，并且在某些特殊情况下可能会导致兼容性问题。</p></li></ul><p>下图为官方进行的基准测试，对具有大量依赖的应用程序进行基准测试，表明 pnpm 比 npm 和 Yarn classic 快 2 倍</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/16021abc23784b529e2a25008da95047~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=870&amp;h=918&amp;s=56643&amp;e=png&amp;b=fefefe" alt="image.png"></p><p>综上所述，pnpm 对 npm 和 Yarn 有比较大的先天优势，但是最佳选择取决于个人和团队的需求和偏好。如果项目依赖较少，且空间占用不是问题，可以考虑使用 npm。对于大型项目或追求高性能和磁盘占用方面的优化，可以尝试使用 yarn 或 pnpm。</p><h2 id="六、总结" tabindex="-1">六、总结 <a class="header-anchor" href="#六、总结" aria-label="Permalink to &quot;六、总结&quot;">​</a></h2><p>在本文中，我们了解了 JavaScript 包管理工具的一种新选择 - pnpm。相比传统的 npm 和 yarn，pnpm 提供了一种全新的包管理方式，通过符号链接技术实现依赖的共享，从而节省了磁盘空间并提高了安装和更新的效率。</p><p>在使用 pnpm 进行包管理时，我们发现它具有许多优势。首先，pnpm 能够显著减少项目的磁盘空间占用，特别适用于拥有大量依赖项的项目，让我们能够更轻松地管理和维护我们的代码库。其次，pnpm 的并行下载和缓存机制为包的安装和更新提供了更快的速度，这对于开发大型项目或具有复杂依赖关系的项目尤为重要。</p><p>当然，pnpm 并非没有缺点。它<strong>相对较新</strong>，生态系统相对较小，与 npm 和 yarn 相比还有一些限制。此外，在某些特殊情况下，pnpm 使用符号链接可能会导致兼容性问题。</p><p>总的来说，pnpm 提供了一种令人激动的新方式来管理 JavaScript 包，它在磁盘空间占用和安装速度方面具有明显的优势。然而，在选择使用 pnpm 还是其他包管理工具时，我们应该基于项目的需求和团队的偏好做出明智的决策。</p>`,82);function k(r,o,d,c,g,m){const s=t("ArticleFooter");return e(),i("div",null,[h,p(s,{link:"https://juejin.cn/post/7301604131202039817"})])}const u=a(l,[["render",k]]);export{F as __pageData,u as default};
