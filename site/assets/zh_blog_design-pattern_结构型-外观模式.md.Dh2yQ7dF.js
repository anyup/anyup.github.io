import{_ as i,c as a,I as n,aU as p,o as h,E as l}from"./chunks/framework.CpXV_ol5.js";const F=JSON.parse('{"title":"JS设计模式之外观模式：简化复杂系统调用的利器","description":"","frontmatter":{"title":"JS设计模式之外观模式：简化复杂系统调用的利器"},"headers":[],"relativePath":"zh/blog/design-pattern/结构型-外观模式.md","filePath":"zh/blog/design-pattern/结构型-外观模式.md","lastUpdated":1727083629000}'),k={name:"zh/blog/design-pattern/结构型-外观模式.md"},t=p(`<h1 id="结构型-外观模式" tabindex="-1">结构型 - 外观模式 <a class="header-anchor" href="#结构型-外观模式" aria-label="Permalink to &quot;结构型 - 外观模式&quot;">​</a></h1><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fafc219f5d614ee0869c0c8e0d88ac95~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=667&amp;h=327&amp;s=116550&amp;e=png&amp;b=128383" alt="image.png"></p><h2 id="一、了解外观模式" tabindex="-1">一、了解外观模式 <a class="header-anchor" href="#一、了解外观模式" aria-label="Permalink to &quot;一、了解外观模式&quot;">​</a></h2><h3 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h3><p><strong>外观模式</strong>（<code>Facade Pattern</code>）是一种结构型设计模式，它提供了一个简单的接口，隐藏了一个复杂系统的内部复杂性，使得客户端可以通过该接口与系统进行交互，而无需了解系统内部的具体实现细节。</p><p>外观模式可以将一个复杂系统分解成多个子系统或模块，然后使用一个外观类作为系统的统一接口，为客户端提供所需的功能。客户端只需要与外观类进行交互，而不需要直接与子系统进行交互。</p><h3 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h3><ol><li><strong>简化调用</strong>：将复杂的系统调用过程简化为几个简单的方法调用。通过封装系统的复杂性，可以更轻松地使用系统功能。</li><li><strong>解耦合</strong>：减少客户端与子系统之间的耦合度。客户端只需与外观类进行交互，而不需要了解各个子系统之间的关系和具体实现细节。</li><li><strong>提高灵活性</strong>：通过外观类，可以对复杂系统进行适当的封装和抽象，使得系统内部的变化对客户端的影响降低。当系统发生改变时，只需调整外观类即可，而不需要修改客户端代码。</li><li><strong>提高可维护性</strong>：外观模式将系统的实现细节封装在一个外观类中，使得系统更易于维护和扩展。对于客户端来说，只需关注外观类的接口，而不需要关心系统的内部变化。</li></ol><p>总之，外观模式可以帮助我们简化复杂系统的调用过程，提供一个统一的、简化的接口给客户端使用，减耦合度并提高代码的可维护性。</p><h2 id="二、外观模式的核心思想" tabindex="-1">二、外观模式的核心思想 <a class="header-anchor" href="#二、外观模式的核心思想" aria-label="Permalink to &quot;二、外观模式的核心思想&quot;">​</a></h2><h3 id="基本原理和关键要素" tabindex="-1">基本原理和关键要素 <a class="header-anchor" href="#基本原理和关键要素" aria-label="Permalink to &quot;基本原理和关键要素&quot;">​</a></h3><p>在 <code>JavaScript</code> 中，外观模式是一种结构型设计模式，它通过提供一个简单的接口来隐藏复杂的子系统或的复杂性。以下是外观模式的基本原理和关键要素：</p><ol><li><p><strong>基本原理</strong>：</p><ul><li>外观类（Facade Class）：外观类是外观模式的核心。它封装了子系统的复杂功能和接口，并提供了简洁、易于使用的接口给客户端。</li><li>子系统类（Subsystems Class）：子系统类包含了系统中的各个子系统或者模块，它们实现了具体的功能。外观类通过与子系统类交互来完成具体的功能。</li></ul></li><li><p><strong>关键要素</strong>：</p><ul><li>外观类接口（Facade Interface）：外观类提供了一组简单的接口方法，用于装和暴露子系统复杂功能。这些接口方法通常与具体的子系统类相关联。</li><li>子系统类（Subsystems）：子系统类实现了具体的功能，并包含一些具体的方法。外观类通过与子系统类进行交互来完成具体的功能。</li><li>客户端（Client）：客户端使用外观类提供的简化口来调用子系统的功能。客户端不需要了解和依赖子系统的具体实现，只需要通过外观类来访问系统的功能。</li></ul></li></ol><p>使用外观模式关键点在于外观类的设计。外观类需要将子系统的复杂性隐藏起来，提供一个简洁、易用的接口给客户端。在实现外观类时，需要考虑子系统的组合和调用顺序，以及如何将复杂的功能封装为单的接口方法。</p><ol start="3"><li><strong>简单示例</strong></li></ol><p>假如有多个子系统类 <code>SubSystem1</code> 、<code>SubSystem2</code>...，每个子系统都有负责的功能，我们如何能做到不了解子系统的功能而去使用它呢？</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7899be5d3ebb4d0fa099df628a012036~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=876&amp;h=582&amp;s=32827&amp;e=png&amp;b=fdfbfb" alt="image.png"></p><p><strong>第一步：定义子系统类</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子系统类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SubSystem1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  operation1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Subsystem1 operation1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SubSystem2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  operation2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Subsystem2 operation2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>第二步：定义外观类</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 外观类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Facade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">subsystem1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">subsystem2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.subsystem1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subsystem1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.subsystem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subsystem2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //外观类接口方法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.subsystem1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">operation1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.subsystem2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">operation2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>第三步：客户端使用外观类，客户端与子系统解耦合。</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 客户端代码调用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> subsystem1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SubSystem1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> subsystem2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SubSystem2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 外观类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> facade</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Facade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(subsystem1, subsystem2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">facade.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>在上述示例中，外观类 <code>Facade</code> 封装了子系统类 <code>Subsystem1</code> 和 <code>Subsystem2</code> 的复杂功能，并提供了简洁的接口方法 <code>run</code>客户端使用。客户端需要通过外观类调用 <code>run</code> 方法，而不需要了解和依赖子系统的具体实现。</p><p>外观模式通过封装和简化复杂的子系统功能，供了一个简洁、易用的接口给客户端使用。通过使用外观模式，可以隐藏复杂性、简化调用过程、解耦合系统各部分，并提高代码的可维护性和可读性。</p><h3 id="理解外观模式中的外观类" tabindex="-1">理解外观模式中的外观类 <a class="header-anchor" href="#理解外观模式中的外观类" aria-label="Permalink to &quot;理解外观模式中的外观类&quot;">​</a></h3><p>在 <code>JavaScript</code> 中，简单的说，外观类是一种封装复杂子系统的设计模式，它提供了一个简单的接口给客户端使用，隐藏了子系统的复杂性。外观类的职责包括以下几个方面：</p><ol><li><p><strong>封装子系统接口</strong>：外观类封装了子系统的复杂接口和方法。它通过与子系统类进行交互，将多个子系统的功能整合在一个统一的接口中，以便客户端使用。</p></li><li><p><strong>提供简化的接口方法</strong>：外观类提供了一组简化的接口方法给客户端使用。这些接口方法尽可能简洁易用，能够满足客户端的需求。通过这些接口方法，客户端可以不需要了解子系统的具体实现，直接调用外观类提供的方法来完成复杂的功能。</p></li><li><p><strong>调用子系统方法</strong>：外观类在自身的方法中调用子系统的方法。它了解和管理子系统类之间的调用顺序和关系。可以根据具体的业务逻辑来组织子系统的调用，在不同的方法中调用不同的子系统方法，实现具体的功能。</p></li><li><p><strong>隐藏子系统的复杂性</strong>：外观类将复杂的子系统功能封装在自身的简化接口中，客户端不需要了解和关心子系统的复杂细节。通过外观类，客户端可以将复杂的调用过程简化为一行或几行代码。</p></li></ol><h2 id="三、实现外观模式" tabindex="-1">三、实现外观模式 <a class="header-anchor" href="#三、实现外观模式" aria-label="Permalink to &quot;三、实现外观模式&quot;">​</a></h2><h3 id="api-封装管理" tabindex="-1">API 封装管理 <a class="header-anchor" href="#api-封装管理" aria-label="Permalink to &quot;API 封装管理&quot;">​</a></h3><p>以最简单的 API 网络请求封装类为例，通过外观类封装了网络请求的具体实现，提供了更简洁的接口给客户端使用，使得发送网络请求更加简单和清晰。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子系统类，模拟网络请求</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Sending \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">method</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} request to \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} with data:\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 发送网络请求的具体逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 外观类，封装网络请求方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> API</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.http </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建子系统对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 封装 GET 请求</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 封装 POST 请求</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> api</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> API</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 发送 GET 请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;httpsapi.example.com/users&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 发送 POST 请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://api.example.com/users&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><p>在上述示例中，<code>Http</code> 类表示一个简单的网络请求子系统类。<code>API</code> 类则是外观类，它封装了网络请求的具体实现，提供了更简洁的接口给客户端使用。</p><p>通过创建 <code>API</code> 类的实例 <code>api</code>，客户端可以调用 <code>get</code> 和 <code>post</code> 方法，而不需要关心具体的网络请求细节。<code>API</code> 类的方法内部会调用 <code>Http</code> 类的 <code>request</code> 方法，实现真正的网络请求操作。</p><p>这样，通过封装网络请求的细节，我们在客户端只需与 <code>API</code> 类交互，使得发送网络请求更加简单和清晰。</p><h3 id="订餐系统套餐服务" tabindex="-1">订餐系统套餐服务 <a class="header-anchor" href="#订餐系统套餐服务" aria-label="Permalink to &quot;订餐系统套餐服务&quot;">​</a></h3><p>假设我们有一个订购套餐服务的系统，包括餐厅、配送服务和支付服务。外观模式的主要思想是创建一个外观类将这些子系统封装起来，提供一个简化的接口方法供客户端调用，隐藏各个子系统内部的复杂操作。如下代码示例：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/13d2072c473e4ba5ba3c54136d343519~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1544&amp;h=565&amp;s=269473&amp;e=png&amp;b=fcfbfb" alt="Snipaste_2023-09-18_15-58-46.png"></p><p><strong>1. 各个子系统类 - 餐厅、配送服务、支付服务。</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子系统类 - 餐厅</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Restaurant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getPackageInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">packageId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 模拟根据套餐ID获取套餐信息的逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (packageId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Package A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (packageId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;B&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Package B&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子系统类 - 配送服务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DeliveryService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getDeliveryTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 模拟根据地址获取配送时间和费用的逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fee</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> address.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Beijing&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { time: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2 hours&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fee }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  deliverPackage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">packageInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 模拟配送套餐的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Package \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">packageInfo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} delivered to \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">address</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 返回配送状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;delivered&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子系统类 - 支付服务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PaymentService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  processPayment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">amount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 模拟支付金额的逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isSuccessful</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.8</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isSuccessful </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;success&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;failure&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>2. 定义外观类，将这些子系统封装起来，提供一个简化的接口方法  <code>orderPackage</code>。</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 外观类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FoodDelivery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.restaurant </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Restaurant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.deliveryService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DeliveryService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.paymentService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PaymentService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 订单</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  orderPackage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">packageId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> packageInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.restaurant.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPackageInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(packageId)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">packageInfo) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Package not available.&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> deliveryTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.deliveryService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDeliveryTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(address)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> totalPrice</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> packageInfo.price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deliveryTime.fee</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> paymentStatus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.paymentService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">processPayment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(totalPrice)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (paymentStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;success&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Payment failed. Please try again.&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> deliveryStatus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.deliveryService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deliverPackage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(packageInfo, address)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Package delivered successfully to \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">address</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>3. 客户端使用外观类。</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foodDelivery</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FoodDelivery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> packageId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;A&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;123 Main St, Beijing&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foodDelivery.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">orderPackage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(packageId, address)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span></code></pre></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4e2c18918e842d7bd70ee47c3d38073~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1352&amp;h=788&amp;s=286676&amp;e=png&amp;b=fdfcfc" alt="image.png"></p><p>在上述示例中，我们创建了一个套餐服务的子系统，包括餐厅、配送服务和支付服务。外观类 <code>FoodDelivery</code> 将这些子系统封装起来，提供一个简化的接口方法 <code>orderPackage</code>，最终客户端使用使用时不需要关注各个子系统的功能，只需要调用接口方法 <code>orderPackage</code>即可。</p><p>在外观类中，我们首先调用餐厅的 <code>getPackageInfo</code> 方法来获取指定套餐的信息。如果套餐不存在，我们返回相应的错误信息。</p><p>接下来，我们利用配送服务的 <code>getDeliveryTime</code> 方法获取配送时间和费用。然后，根据套餐价格和配送费用，计算出总价。</p><p>接着，我们调用支付服务的 <code>processPayment</code> 方法来处理支付。如果支付失败，我们返回相应的错误信息。</p><p>最后，我们调用配送服务的 <code>deliverPackage</code> 方法来配送套餐，并返回成功配送的信息给客户端。</p><p>在客户端代码中，我们实例化了外观类 <code>FoodDelivery</code>，然后调用了 <code>orderPackage</code> 方法来订购套餐。客户端只需要与外观类交互，并不需要了解和依赖子系统的具体实现细节。</p><p>通过外观模式，我们将复杂的套餐服务操作封装在外观类中，并提供了一个简单的接口给客户端使用。客户端只需要通过外观类来订购套餐，不需要与子系统直接交互，从而简化了客户端的代码和逻辑。</p><h2 id="四、优点与应用场景" tabindex="-1">四、优点与应用场景 <a class="header-anchor" href="#四、优点与应用场景" aria-label="Permalink to &quot;四、优点与应用场景&quot;">​</a></h2><h3 id="外观模式的优点" tabindex="-1">外观模式的优点 <a class="header-anchor" href="#外观模式的优点" aria-label="Permalink to &quot;外观模式的优点&quot;">​</a></h3><ol><li><p><strong>简化客户端代码</strong>：外观模式提供了一个统一的接口，隐藏了子系统的复杂性，使客户端代码更加简洁和易于维护。</p></li><li><p><strong>解耦客户端和子系统</strong>：外观模式将客户端与子系统解耦，客户端只需要与外观类进行交互，而不需要了解和依赖子系统的具体实现细节。这使得子系统可以独立变化，而不影响客户端。</p></li><li><p><strong>提高安全性</strong>：通过外观模式，限制客户端直接访问子系统的某些功能，增加了系统的安全性。</p></li></ol><h3 id="外观模式的应用" tabindex="-1">外观模式的应用 <a class="header-anchor" href="#外观模式的应用" aria-label="Permalink to &quot;外观模式的应用&quot;">​</a></h3><p>在实际开发中，<code>JavaScript</code> 外观模式有很多应用场景，尤其在以下的场景下应用广泛：</p><ol><li><p><strong>API 封装</strong>：在前端开发中，通过外观模式可以将对后端 API 的调用封装在一个统一的接口中。这样客户端只需要与外观类进行交互，而不需要关心具体的网络请求细节，如请求地址、数据处理等。这种方式可以使前端开发更加简洁和高效。</p></li><li><p><strong>UI 库封装</strong>：当使用复杂的 UI 库时，可以使用外观模式将 UI 组件的初始化、渲染、事件处理等功能封装起来。这样客户端只需要与外观类进行交互，简化了客户端代码并提高了代码的可维护性。</p></li><li><p><strong>浏览器兼容性处理</strong>：在处理浏览器兼容性时，可以使用外观模式将不同浏览器下的兼容性处理封装起来。客户端只需要与外观类进行交互，而不需要关心具体的浏览器兼容性细节，简化了客户端代码，也方便在未来进行兼容性的调整。</p></li><li><p><strong>第三方库的封装</strong>：当使用第三方库时，可以使用外观模式将其封装起来，提供更简洁的接口给客户端使用。这样可以隐藏底层库的复杂性，减少了客户端与库之间的直接依赖。同时，如果将来需要替换底层库，只需修改外观类的实现即可，而不影响客户端。</p></li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>在使用 <code>JavaScript</code> 外观模式时，有以下几个准则，注意这几个准则的正确运用将是我们实现外观模式简单易用的前提保障：</p><ol><li><p><strong>角色分配</strong>：清楚划分好外观类和子系统类的责任，确保每个类的职责明确且单一。</p></li><li><p><strong>不破坏封装性</strong>：外观模式的目的是将子系统进行封装，向客户端提供一个简化的接口。</p></li><li><p><strong>可扩展性考虑</strong>：在设计外观模式时，要考虑到子系统的可扩展性。即使子系统发生变化，外观类也无需修改，维护起来更加灵活。</p></li><li><p><strong>不滥用外观模式</strong>：外观模式的目的是简化客户端的操作，但并不意味着在所有情况下都需要使用外观模式，避免滥用造成过度封装和增加不必要的复杂性。</p></li><li><p><strong>兼容性</strong>：在使用外观模式时要考虑兼容性问题，尤其是涉及不同浏览器或不同版本的兼容性。确保外观类能够提供一致的接口，适配不同的环境，保证代码的可移植性和可靠性。</p></li></ol><p>注意以上事项可以帮助更好地使用和设计 <code>JavaScript</code> 外观模式，提高代码的可维护性、易读性和扩展性。</p>`,62);function e(r,E,d,g,y,c){const s=l("ArticleFooter");return h(),a("div",null,[t,n(s,{link:"https://juejin.cn/post/7280007606243180580"})])}const C=i(k,[["render",e]]);export{F as __pageData,C as default};
