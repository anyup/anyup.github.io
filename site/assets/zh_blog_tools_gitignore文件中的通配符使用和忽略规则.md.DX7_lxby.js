import{_ as a,c as s,I as i,aU as t,o,E as p}from"./chunks/framework.CpXV_ol5.js";const m=JSON.parse('{"title":"深入理解 .gitignore 文件中的通配符使用和忽略规则","description":"","frontmatter":{"title":"深入理解 .gitignore 文件中的通配符使用和忽略规则"},"headers":[],"relativePath":"zh/blog/tools/gitignore文件中的通配符使用和忽略规则.md","filePath":"zh/blog/tools/gitignore文件中的通配符使用和忽略规则.md","lastUpdated":1725606759000}'),l={name:"zh/blog/tools/gitignore文件中的通配符使用和忽略规则.md"},n=t(`<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42c4502c2be54b078922cd14d7dbd8fc~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1174&amp;h=382&amp;s=83130&amp;e=png&amp;b=ffffff" alt="image.png"></p><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>最近在开发项目时，有这样一个需求。之前使用 <code>.gitignore</code> 时忽略了整个文件夹的版本控制，如下图所示：忽略了 <code>unpackage/</code> 整个文件夹及其下属内容。而现在忽然需要对其中的 <code>dist</code>、<code>res</code> 目录放开忽略，其它的文件夹还是需要继续忽略，要怎么实现呢？</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/752ee44bb92d475d8ecfebdda43f3491~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=415&amp;h=158&amp;s=8156&amp;e=png&amp;b=191919" alt="image.png"></p><p>经过了解一番，才得知：在<code>.gitignore</code>文件中，可以使用通配符解决以上这个问题，可以设置一下排除规则与过滤策略。</p><p>通配符<code>!</code>表示：否定模式，表示指定不忽略某些文件或文件夹。</p><p>先说解决方案，后面我们进行详细说明几种通配符的作用，因此，以上的需求可以使用如下忽略代码进行优化：</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 匹配根目录下的 unpackage 文件夹</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/unpackage/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 取消对 unpackage 下的 dist 文件夹的忽略</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!/unpackage/dist/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 取消对 unpackage 下的 dist 文件夹的忽略</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!/unpackage/res/</span></span></code></pre></div><h2 id="一-通配符" tabindex="-1">一. 通配符 <a class="header-anchor" href="#一-通配符" aria-label="Permalink to &quot;一. 通配符&quot;">​</a></h2><p>在 <code>.gitignore</code> 文件中，通配符用于匹配文件和文件夹的名称，以控制 Git 忽略哪些文件或文件夹。下面是一些常用的通配符的使用示例：</p><ol><li><p><code>*</code>：匹配零个或多个字符。</p><ul><li>例如，<code>*.txt</code>会匹配所有以<code>.txt</code>结尾的文件。</li></ul></li><li><p><code>?</code>：匹配一个字符。</p><ul><li>例如，<code>test?.txt</code>会匹配 <code>test1.txt</code> 和 <code>test2.txt</code>，但不会匹配 <code>test12.txt</code>。</li></ul></li><li><p><code>**</code>：匹配零个或多个目录。</p><ul><li>例如，<code>logs/**/*.log</code>会匹配 <code>logs/a/b/c.log</code>、<code>logs/x/y/z.log</code>等。</li></ul></li><li><p><code>/</code>：指定路径。</p><ul><li>例如，<code>/logs/</code>会匹配根目录下的 <code>logs</code> 文件夹，但不会匹配 <code>src/logs</code>。</li></ul></li><li><p><code>!</code>：否定模式，表示不忽略某些文件或文件夹。</p><ul><li>例如，<code>!debug/</code>会取消对 <code>debug</code> 文件夹的忽略。</li></ul></li></ol><p>使用通配符的一些示例：</p><ul><li><p>忽略所有的 <code>.txt</code> 文件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>*.txt</span></span></code></pre></div></li><li><p>忽略某个特定文件夹下的所有文件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>path/to/folder/</span></span></code></pre></div></li><li><p>忽略所有以 <code>.log</code> 结尾的文件，但不包括 <code>important.log</code>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>*.log</span></span>
<span class="line"><span>!important.log</span></span></code></pre></div></li><li><p>忽略某个文件夹及其子文件夹下的所有 <code>node_modules</code> 文件夹：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>node_modules/</span></span></code></pre></div></li></ul><p>需要注意的是，<code>.gitignore</code> 文件可以放在项目的根目录下，也可以放在特定的子目录下，它会对该目录及其子目录生效。</p><p>讲到这里，我们顺便重温一下 <code>.gitignore</code> 的各种常用的操作吧！巩固加深一下对它的理解。</p><h2 id="二-gitignore-中常用的忽略规则" tabindex="-1">二. <code>.gitignore</code> 中常用的忽略规则 <a class="header-anchor" href="#二-gitignore-中常用的忽略规则" aria-label="Permalink to &quot;二. \`.gitignore\` 中常用的忽略规则&quot;">​</a></h2><p><code>.gitignore</code> 是一个用于配置 Git 版本控制系统忽略指定文件或目录的规则文件。它可以用来排除不需要提交到代码仓库中的临时文件、编译产物、个人敏感信息等。下面对 <code>.gitignore</code> 中常见的操作进行详解：</p><h3 id="_1-注释" tabindex="-1">1. 注释： <a class="header-anchor" href="#_1-注释" aria-label="Permalink to &quot;1. 注释：&quot;">​</a></h3><p>以井号(#)开头的行表示注释，被 Git 忽略。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># file.txt</span></span></code></pre></div><h3 id="_2-空行" tabindex="-1">2. 空行： <a class="header-anchor" href="#_2-空行" aria-label="Permalink to &quot;2. 空行：&quot;">​</a></h3><p>空行会被 Git 忽略。</p><h3 id="_3-目录的忽略" tabindex="-1">3. 目录的忽略： <a class="header-anchor" href="#_3-目录的忽略" aria-label="Permalink to &quot;3. 目录的忽略：&quot;">​</a></h3><p>要忽略整个目录，只需要在.gitignore 文件中添加目录名称即可，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>dir/</span></span></code></pre></div><p>这将忽略目录<code>dir/</code>下的所有文件和子目录。</p><h3 id="_4-特定文件的忽略" tabindex="-1">4. 特定文件的忽略： <a class="header-anchor" href="#_4-特定文件的忽略" aria-label="Permalink to &quot;4. 特定文件的忽略：&quot;">​</a></h3><p>要忽略特定文件，只需要在.gitignore 文件中添加文件名称，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>file.txt</span></span></code></pre></div><p>这将忽略根目录下的<code>file.txt</code>文件。</p><h3 id="_5-通配符的使用" tabindex="-1">5. 通配符的使用： <a class="header-anchor" href="#_5-通配符的使用" aria-label="Permalink to &quot;5. 通配符的使用：&quot;">​</a></h3><p>可以使用通配符来匹配多个文件或目录。常用的通配符有：</p><ul><li><code>*</code>：匹配任意长度的字符串，但不匹配目录分隔符（斜杠<code>/</code>）。</li><li><code>**</code>：匹配任意长度的字符串，包括目录分隔符。</li><li><code>?</code>：匹配任意一个字符。</li><li><code>[]</code>：匹配一组字符。</li><li><code>!</code>：用于对规则进行否定。</li></ul><p>例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>*.txt         // 忽略所有以.txt结尾的文件</span></span>
<span class="line"><span>build/        // 忽略根目录下的build目录</span></span>
<span class="line"><span>tmp/*.log     // 忽略tmp目录下所有.log文件</span></span>
<span class="line"><span>test/**/*.tmp // 忽略test目录及其子目录下的所有.tmp文件</span></span>
<span class="line"><span>!src/foo.txt  // 不忽略根目录下的src目录下的foo.txt文件</span></span></code></pre></div><blockquote><p>更多通配符的使用请参考上面第一章内容</p></blockquote><h3 id="_6-文件类型模板" tabindex="-1">6. 文件类型模板： <a class="header-anchor" href="#_6-文件类型模板" aria-label="Permalink to &quot;6. 文件类型模板：&quot;">​</a></h3><p>Git 提供了一些常见文件类型的模板，可以直接使用，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>*.html     // 忽略所有HTML文件</span></span>
<span class="line"><span>*.o        // 忽略所有目标文件</span></span></code></pre></div><p>可以在.gitignore 文件中使用这些模板，避免重复配置。</p><h3 id="_7-模式的优先级" tabindex="-1">7. 模式的优先级： <a class="header-anchor" href="#_7-模式的优先级" aria-label="Permalink to &quot;7. 模式的优先级：&quot;">​</a></h3><p><code>.gitignore</code> 文件中的模式按照从上到下的顺序逐条匹配，如果遇到匹配的模式，则后面的模式不再生效。如果要取消对某个文件的忽略，可以使用<code>!</code>前缀特别指定。</p><blockquote><p><strong>特别注意：</strong> 已经被 Git 跟踪的文件不会受到 <code>.gitignore</code> 的影响。要忽略已经被提交的文件，可以使用 <code>git rm --cached &lt;file&gt;</code>命令将其从版本控中移除。</p></blockquote><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>综上所述，<code>.gitignore</code> 文件是配置 Git 忽略特定文件和目录的规则文件。通过使用注释、行、目录忽略、特定文件忽略、通配符和文件类型模板等操作，可以灵活地配置和管理需要忽略的文件。</p><p>正确的使用通配符的使用可以优雅且灵活的实现各种文件及文件夹的忽略策略！</p><p>同时，正确定义 <code>.gitignore</code> 文件可以有效地减少代码仓库的不必要的提交，提高版本控制的效率。</p>`,47);function c(d,h,g,r,u,b){const e=p("ArticleFooter");return o(),s("div",null,[n,i(e,{link:["juejin::https://juejin.cn/post/7290210264728469504","weixin::https://mp.weixin.qq.com/s/hCr51eCiGfXNnNKECcRrtg"]},null,8,["link"])])}const _=a(l,[["render",c]]);export{m as __pageData,_ as default};
