import{_ as i,c as a,I as n,aU as p,o as t,E as h}from"./chunks/framework.CpXV_ol5.js";const F=JSON.parse('{"title":"前端小工具 FlyHttp 代码提示指南：让你的开发更高效","description":"","frontmatter":{"title":"前端小工具 FlyHttp 代码提示指南：让你的开发更高效"},"headers":[],"relativePath":"zh/blog/open-source/FlyHttp代码提示指南.md","filePath":"zh/blog/open-source/FlyHttp代码提示指南.md","lastUpdated":1727083629000}'),l={name:"zh/blog/open-source/FlyHttp代码提示指南.md"},k=p(`<h1 id="前端小工具-flyhttp-代码提示指南-让你的开发更高效" tabindex="-1">前端小工具 FlyHttp 代码提示指南：让你的开发更高效 <a class="header-anchor" href="#前端小工具-flyhttp-代码提示指南-让你的开发更高效" aria-label="Permalink to &quot;前端小工具 FlyHttp 代码提示指南：让你的开发更高效&quot;">​</a></h1><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/552ddd6b5aab48e58aa425f452650b16~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=879&amp;h=266&amp;s=46918&amp;e=png&amp;b=ffffff" alt="image.png"></p><h2 id="一-引言" tabindex="-1">一. 引言 <a class="header-anchor" href="#一-引言" aria-label="Permalink to &quot;一. 引言&quot;">​</a></h2><p>之前我写了一篇文章，介绍了一下我在前端项目中是如何构建 API 网络请求流程，并且将其中使用的一个小工具封装了一下 npm 并发了出来，主要目的是分享自己的在某些方面的编程思路，感兴趣的可以了解一下之前文章：<a href="https://juejin.cn/post/7371479502456963106" target="_blank" rel="noreferrer">前端小工具！加速构建你的 API 网络请求流程，全端通用！</a></p><p>然而，有很多朋友看完后，忍不住有很多疑惑要发问？</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88a8cf9b42ac4ecfa4e35e011f340b71~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=940&amp;h=358&amp;s=94896&amp;e=png&amp;b=fdfdfd" alt="image.png"></p><p>总结一下，无外乎有以下几种问题：</p><ul><li><p><strong>代码提示</strong>怎么搞？</p></li><li><p>导出方式为一个<strong>对象</strong>？有其他的导出方式吗？</p></li><li><p>如果我有<strong>多个不同的请求域名</strong>接口怎么办？</p></li><li><p>如果是全链接的 <strong>URL</strong> 该如何传递？</p></li><li><p><strong>restful URL</strong> 格式该如何请求？</p></li><li><p><strong>全局请求体</strong>参数如何传递？</p></li></ul><p>以以上这些问题为导向，我们逐步分析一下，以最佳实践的方式解答一下以上的问题！如果有 <code>FlyHttp</code> 做不到的，可以完全通过自定义的方式进行改写！</p><p>本文先以<strong>代码提示怎么搞？</strong> 这个问题，我们来详细分析一下该如何做？</p><h2 id="二-flyhttp-是什么" tabindex="-1">二. FlyHttp 是什么？ <a class="header-anchor" href="#二-flyhttp-是什么" aria-label="Permalink to &quot;二. FlyHttp 是什么？&quot;">​</a></h2><p>首先，我们来先简单介绍一下 <code>FlyHttp</code> 是什么？</p><blockquote><p>一句话定义为：<code>FlyHttp</code> 是一个帮助你快速构建前端 API 接口请求流程的小工具!</p></blockquote><p>前后端分离的项目开发模式，以 <code>Vue</code> 开发为例，请求工具为 <code>axios</code>，我们在与后端进行数据交互的时候，通常以接口的形式对数据进行增、删、改、查，因此体量越大的项目必然需要的接口就会越多，我们在开发过程中这些接口地址是如何维护的？请求方法是如何进行书写的，相信每一位前端开发者都应该有自己的一套规范流程。</p><p>因此我之前介绍的构建流程也是我在众多前端开发项目中沉淀下来的最佳实践！（当然是我自认为的），我认为简洁、灵活、可维护性高就可以了。</p><h2 id="三-最佳的代码组织结构是怎样的" tabindex="-1">三. 最佳的代码组织结构是怎样的？ <a class="header-anchor" href="#三-最佳的代码组织结构是怎样的" aria-label="Permalink to &quot;三. 最佳的代码组织结构是怎样的？&quot;">​</a></h2><p>在 src 目录下创建 api 模块，所有的 API 相关请求都在这个文件夹内，内部按照项目模块功能划分目录结构，以电商为例，比如：</p><ul><li><strong>user</strong>：用户模块相关的接口请求</li><li><strong>cart</strong>：购物车相关的接口请求</li><li><strong>goods</strong>：商品相关的接口请求</li><li><strong>order</strong>：订单相关的接口请求</li><li><strong>coupon</strong>：优惠券相关的接口请求</li><li>... 等等</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>├── src</span></span>
<span class="line"><span>├── ├── api                    # 所有请求</span></span>
<span class="line"><span>├── ├── ├──  modules           # 模块文件夹</span></span>
<span class="line"><span>├── ├── └── └──  user.ts       # 用户模块</span></span>
<span class="line"><span>├── ├── └── └──  cart.ts       # 购物车</span></span>
<span class="line"><span>├── ├── └── └──  goods.ts      # 商品</span></span>
<span class="line"><span>├── ├── └── └──  order.ts      # 订单</span></span>
<span class="line"><span>├── ├── └── └──  coupon.ts     # 优惠券</span></span>
<span class="line"><span>├── ├── ├──  axios.ts          # axios 实例，二次封装的 axios</span></span>
<span class="line"><span>├── ├── ├──  index.ts          # 统一导出</span></span>
<span class="line"><span>├── ├── assets                 # 资源目录</span></span>
<span class="line"><span>├── ├── components             # 组件目录</span></span>
<span class="line"><span>├── ├── hooks                  # 封装 hooks</span></span>
<span class="line"><span>├── ├── router                 # 路由</span></span>
<span class="line"><span>├── ├── store                  # 状态管理</span></span>
<span class="line"><span>├── ├── utils                  # 工具类</span></span>
<span class="line"><span>├── ├── views                  # 所有页面</span></span>
<span class="line"><span>├── ├── App.vue                # 入口</span></span>
<span class="line"><span>├── ├── main.ts                # 入口</span></span>
<span class="line"><span>└── package.json               # package.json</span></span></code></pre></div><p>最佳的代码组织结构是通用的编程结构规范，在 <code>Vue</code> 开发中，就算你不使用 <code>FlyHttp</code>，你自己的项目组织结构也应该如此！</p><h2 id="四-如何使用代码提示功能" tabindex="-1">四. 如何使用代码提示功能？ <a class="header-anchor" href="#四-如何使用代码提示功能" aria-label="Permalink to &quot;四. 如何使用代码提示功能？&quot;">​</a></h2><p>其实代码提示做的好不好，关键看在 <code>TypeScript</code> 开发时类型定义做的好不好，非不得已的情况下尽量不要书写 <code>any</code> 的定义方式，不要将 <code>TypeScript</code> 变成 <code>AnyScript</code>，那样你的使用体验将会非常糟糕！</p><h3 id="_1-定义" tabindex="-1">1. 定义 <a class="header-anchor" href="#_1-定义" aria-label="Permalink to &quot;1. 定义&quot;">​</a></h3><p><code>axios.ts</code> 文件中应该有以下代码，其主要作用是二次封装 <code>axios</code>， 主要配置一些全局参数，请求拦截器和响应拦截器等，视项目情况而定，原则：简单、易用、适度即可！</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> axios </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;axios&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { FlyHttp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@anyup/flyit&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 配置新建一个 axios 实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> axiosInstance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  baseURL: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  timeout: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加请求拦截器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axiosInstance.interceptors.request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加响应拦截器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axiosInstance.interceptors.response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 构建一个 FlyHttp 实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> flyHttpInstance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FlyHttp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(axiosInstance)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { axiosInstance, flyHttpInstance }</span></span></code></pre></div><p><code>FlyHttp</code> 内部模块提供了基础的 <code>Type</code> 定义，导入部分定义即可以实现基础的代码提示，以用户模块为例 <code>user.ts</code>，看一下如何使用代码提示！</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { flyHttpInstance } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/api/axios&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 在 axios 应该要导出 FlyHttp 实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { IRequestConfig, IResult } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@anyup/flyit&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义 interface</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserApi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getUserList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IRequestConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取用户列表</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getUserInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IRequestConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取用户信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  addUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IRequestConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加用户</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  editUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IRequestConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编辑用户</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  exportUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IRequestConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出用户列表</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  deleteUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IRequestConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 删除用户</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义接口地址和请求方式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getUserList: { url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/user/list&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;get&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取用户列表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getUserInfo: { url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;get&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取用户信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  addUser: { url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/user/add&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;post&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加用户</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  editUser: { url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/user/edit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;post&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编辑用户</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  exportUser: { url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/user/export&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;post&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出用户列表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  deleteUser: { url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;delete&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 删除用户</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FlyHttp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserApi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="_2-请求时提示" tabindex="-1">2. 请求时提示 <a class="header-anchor" href="#_2-请求时提示" aria-label="Permalink to &quot;2. 请求时提示&quot;">​</a></h3><p>请求时的提示主要是<code>request</code>参数提供信息，得益于定义的<code>IRequestConfig</code>，通过如上的方式可以在页面中使用提示了</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userApi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/api/modules/user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  const getUserList = (offset: number, limit: number) =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    const query </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { offset, limit };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    userApi.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUserList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ data: { query } }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>当我们输入<code>userApi.</code>的时候，将会出现以下提示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6de619f74cc643119970da50e664316a~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=935&amp;h=167&amp;s=30310&amp;e=png&amp;b=212121" alt="image.png"></p><p>当我们传递参数输入错误的情况下，将会出现以下提示：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a03d7299068c4a2fa3c91235788d2ae8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=784&amp;h=245&amp;s=51146&amp;e=png&amp;b=222222" alt="image.png"></p><p>最终正确的方式如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/418840799e9d43a7af45c0cb4b35e4b0~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=811&amp;h=145&amp;s=24227&amp;e=png&amp;b=202020" alt="image.png"></p><h3 id="_3-响应结果提示" tabindex="-1">3. 响应结果提示 <a class="header-anchor" href="#_3-响应结果提示" aria-label="Permalink to &quot;3. 响应结果提示&quot;">​</a></h3><p>响应结果的提示依赖于上述定义接口时使用的 <code>IResult</code>，它提供了通用的一些请求体结构：</p><ul><li>code：响应码</li><li>data：响应数据</li><li>msg：响应信息</li></ul><p>使用时提示如下信息：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c797e658e1147888d391160ddb4cef4~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=938&amp;h=173&amp;s=34175&amp;e=png&amp;b=212121" alt="image.png"></p><p>最终正确的方式如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3011684f81164bf1a5d9319bdc407b6b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=866&amp;h=197&amp;s=29298&amp;e=png&amp;b=202020" alt="image.png"></p><blockquote><p>如果以上的提示方式不符合你的要求，你完全可以自定义，搭配适合你项目的请求提示和响应提示！</p></blockquote><h2 id="五-如何使用自定义的-types" tabindex="-1">五. 如何使用自定义的 types？ <a class="header-anchor" href="#五-如何使用自定义的-types" aria-label="Permalink to &quot;五. 如何使用自定义的 types？&quot;">​</a></h2><p>如果 <code>FlyHttp</code> 提供的内部 <code>Types</code> 定义并不满足你的需求，你完全可以自定义！</p><p>可以参考 <code>AxiosRequestConfig</code> , <code>AxiosResponse</code> 的设计等，因为 <code>FlyHttp</code>的 <code>request</code> 方法入参和 <code>AxiosRequestConfig</code> 定义一致。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0bc2b1700ccf4c9a908ca2ccf0a03148~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1076&amp;h=636&amp;s=177711&amp;e=png&amp;b=202020" alt="image.png"></p><p>按照自己的需求实现即可，例如以下是一个简单的例子：</p><p>定义完成后将入参类型修改为自己定义的 <code>MyRequestConfig</code> 和 <code>MyResult</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义 RequestConfig</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyRequestConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  baseURL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义 Result</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义 interface，将入参类型修改为自己定义的 MyRequestConfig 和 MyResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserApi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getUserList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyRequestConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取用户列表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过以上自定义的方式，就可以完成使用自定义的 types，可按照自己的项目需求进行编写类型定义，最终实现适合自己项目的代码提示！</p><h2 id="六-结语" tabindex="-1">六. 结语 <a class="header-anchor" href="#六-结语" aria-label="Permalink to &quot;六. 结语&quot;">​</a></h2><p>本篇文章以在使用 <code>FlyHttp</code> 的过程中，书写代码时 <strong>代码提示</strong>怎么搞？为导向问题，提供一些思路和解决方案。同时也说明了我在开发前端项目中，分享在构建前端 API 请求流程时的一些编程思想，主要包括了代码组织结构，构建流程等。</p><p>当然了，最重要的还是适合自己，适合团队快速开发。如果你觉的 <code>FlyHttp</code> 设计的不好，你完全可以不用，你也可以有自己的一套标准开发流程，按照自己的规范去做一些简化开发的小工具。</p><p>但是，通过本篇文章，我希望大家能从中汲取一些不一样的知识，积极向上的，或者是灵光一现的，再或者是当作反面教材也罢，<strong>取其精华，去其糟粕</strong>，能帮助到某些人就可以了！</p><p>除了本文介绍的使用该工具该如何进行代码提示？后续我会逐步介绍并分析其他的问题！如果你有更好的想法和实现方案，欢迎联系我！</p>`,57);function e(r,d,E,g,y,o){const s=h("ArticleFooter");return t(),a("div",null,[k,n(s,{link:"https://juejin.cn/post/7378893690146504740"})])}const u=i(l,[["render",e]]);export{F as __pageData,u as default};
