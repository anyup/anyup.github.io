import{_ as a,c as i,I as n,aU as p,o as t,E as l}from"./chunks/framework.CpXV_ol5.js";const y=JSON.parse('{"title":"玩转uni-app多端编译：static目录进行条件编译的最佳实践","description":"","frontmatter":{"title":"玩转uni-app多端编译：static目录进行条件编译的最佳实践"},"headers":[],"relativePath":"zh/blog/uni-app/uni-app多端编译-static目录条件编译最佳实践.md","filePath":"zh/blog/uni-app/uni-app多端编译-static目录条件编译最佳实践.md","lastUpdated":1725606759000}'),e={name:"zh/blog/uni-app/uni-app多端编译-static目录条件编译最佳实践.md"},h=p(`<h1 id="玩转uni-app多端编译-static目录进行条件编译的最佳实践" tabindex="-1">玩转uni-app多端编译：static目录进行条件编译的最佳实践 <a class="header-anchor" href="#玩转uni-app多端编译-static目录进行条件编译的最佳实践" aria-label="Permalink to &quot;玩转uni-app多端编译：static目录进行条件编译的最佳实践&quot;">​</a></h1><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e87524b3293040149cbc7cbfd7e82902~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=747&amp;h=317&amp;s=259136&amp;e=png&amp;b=63a4ee" alt="image.png"></p><h2 id="一-前言" tabindex="-1">一. 前言 <a class="header-anchor" href="#一-前言" aria-label="Permalink to &quot;一. 前言&quot;">​</a></h2><p>老生常谈，了解 uni-app 的开发都知道，uni-app 可以同时支持编译到多个平台，如<strong>小程序、H5、移动端 App</strong> 等。它的多端编译能力是 uni-app 的一大特点，让开发者可以使用同一套代码基于 Vue.js 的语法编写程序，然后通过 uni-app 的编译工具将代码转换成适用于不同平台的代码，极大地提高了开发效率和跨平台开发的便捷性。</p><p>之前的文章让我们清晰的认识到 uni-app 的条件编译知识，以及如何进行自定义平台的条件编译。后来好多人发私信说 static 目录如何更有效的进行条件编译，因为对小程序来讲，打包后的体积大小还是至关重要的。</p><p>本篇文章，我们就来讲述一下 uni-app 的 static 目录，以及它的条件编译，同时也包括自定义编译平台下对 static 目录的编译。</p><h2 id="二-静态资源的条件编译" tabindex="-1">二. 静态资源的条件编译 <a class="header-anchor" href="#二-静态资源的条件编译" aria-label="Permalink to &quot;二. 静态资源的条件编译&quot;">​</a></h2><h3 id="_1-静态资源的条件编译需求" tabindex="-1">1. 静态资源的条件编译需求 <a class="header-anchor" href="#_1-静态资源的条件编译需求" aria-label="Permalink to &quot;1. 静态资源的条件编译需求&quot;">​</a></h3><p>在进行对 static 目录的编译策略之前，我们必须先了解一下静态资源的条件编译，由于 uni-app 是跨平台的开发框架，所以静态资源的条件编译十分重要，那么什么场景下需要对静态资源进行条件编译呢？</p><p>一张图带大家了解一下在 uni-app 中静态资源的编译需求：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a026139fb6be437591a705e93758456f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1107&amp;h=611&amp;s=95301&amp;e=png&amp;b=fffefe" alt="image.png"></p><p>uni-app 静态资源条件编译的需求主要是为了适应<strong>不同平台</strong>、<strong>不同功能模块</strong>、<strong>主题定制</strong>和<strong>性能优化</strong>等方面的需求，通过灵活地选择加载不同的静态资源，实现在不同场景下的最佳展示效果和性能表现。</p><h3 id="_2-static-目录在-uni-app-中的作用" tabindex="-1">2. static 目录在 uni-app 中的作用 <a class="header-anchor" href="#_2-static-目录在-uni-app-中的作用" aria-label="Permalink to &quot;2. static 目录在 uni-app 中的作用&quot;">​</a></h3><p>在 uni-app 中，<code>static</code> 目录是用来存放静态资源文件的目录，主要包括图片、字体、视频、音频等静态资源文件，并且 <code>static</code> 目录下的文件不会被编译处理，直接输出到打包后的目标目录，可以在页面中直接引用这些静态资源文件。</p><p>以下是 <code>static</code> 目录在 uni-app 中的主要作用：</p><ul><li><p><strong>存放静态资源文件</strong>：<code>static</code> 目录是用来存放项目中各种静态资源文件的地方，如图片、字体、视频、音频等。可以直接将这些静态资源文件放在 <code>static</code> 目录下，供全局使用。</p></li><li><p><strong>不经过 webpack 处理</strong>：<code>static</code> 目录下的文件在编译打包过程中不会经过 webpack 处理，而是直接拷贝到输出目录。确保静态资源文件原始的路径结构和内容不受影响。</p></li></ul><h3 id="_3-为什么需要-static-目录" tabindex="-1">3. 为什么需要 static 目录 <a class="header-anchor" href="#_3-为什么需要-static-目录" aria-label="Permalink to &quot;3. 为什么需要 static 目录&quot;">​</a></h3><p>在 uni-app 中，编译器根据 <code>pages.json</code> 扫描需要编译的页面，并根据页面引入的 js、css 合并打包文件。对于本地的图片、字体、视频、文件等资源，如果可以直接识别，那么也会把这些资源文件打包进去，但如果这些资源以变量的方式引用，比如：<code>&lt;image :src=&quot;url&quot;&gt;&lt;/image&gt;</code>，甚至可能有更复杂的函数计算，此时编译器无法分析。</p><p>那么有了 <code>static</code> 目录，编译器就会把这个目录整体复制到最终编译包内。这样只要运行时确实能获取到这个图片，就可以显示。非 static 目录下的文件（vue 组件、js、css 等）只有被引用时，才会被打包编译。</p><blockquote><p>注意：</p><ol><li>如果 <code>static</code> 里有一些没有使用的废文件，也会被打包到编译包里，造成体积变大。</li><li>css、less/scss 等资源不要放在 static 目录下，建议这些公用的资源放在 src 自建的目录下，比如：assets 目录。</li></ol></blockquote><p>另外注意，<code>static</code> 目录支持特殊的平台子目录，比如 web、app、mp-weixin 等，这些目录存放专有平台的文件，这些平台的文件在打包其他平台时不会被包含，这些在后面会详细说明。</p><h3 id="_4-static-目录和-app-原生资源目录" tabindex="-1">4. static 目录和 App 原生资源目录 <a class="header-anchor" href="#_4-static-目录和-app-原生资源目录" aria-label="Permalink to &quot;4. static 目录和 App 原生资源目录&quot;">​</a></h3><p>uni-app 支持 App 原生资源目录 <code>nativeResources</code>，其中包括 <code>assets</code>、<code>res</code> 等目录，但和 <code>static</code> 目录没有关系。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/73a7ec2c5b174b798233f859d1319602~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=289&amp;h=205&amp;s=6020&amp;e=png&amp;b=fef9e7" alt="image.png"></p><p><code>static</code> 目录下的文件，在 app 第一次启动时，解压到了 app 的外部存储目录（external-path）。因此在这里需要注意控制 static 目录的大小，太大的 static 目录和太多文件，会造成 App 安装后第一次启动变慢。</p><h2 id="三-static-目录的条件编译方法" tabindex="-1">三. static 目录的条件编译方法 <a class="header-anchor" href="#三-static-目录的条件编译方法" aria-label="Permalink to &quot;三. static 目录的条件编译方法&quot;">​</a></h2><p>在 uni-app 中，static 目录的条件编译方法通常有以下几种，根据不同的条件，在编译时选择性地处理部分代码或资源，以达到更灵活的应用场景需求。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8660baca7cc0406aa095cd2548c284b6~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1020&amp;h=385&amp;s=48376&amp;e=png&amp;b=fffdfd" alt="image.png"></p><h3 id="_1-创建多平台-static-目录" tabindex="-1">1. 创建多平台 static 目录 <a class="header-anchor" href="#_1-创建多平台-static-目录" aria-label="Permalink to &quot;1. 创建多平台 static 目录&quot;">​</a></h3><p>在 static 目录下新建不同平台的专有目录，专有目录下的静态资源只有在特定平台才会编译进去。目录名称均为小写，如下所示常用的名称定义：</p><ul><li><strong>app</strong>：App 端</li><li><strong>web</strong>：H5 端和 web 端</li><li><strong>mp-weixin</strong>：微信小程序端</li><li><strong>mp-alipay</strong>：支付宝小程序端</li></ul><p>如以下目录结构，<code>a.png</code> 只有在 APP 平台才会被编译，<code>b.png</code> 在 H5 平台和 Web 平台被编译，<code>c.png</code> 在微信小程序平台被编译，<code>d.png</code> 在阿里云小程序平台被编译，而 <code>e.png</code> 会在所有平台都会被编译。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>┌─static</span></span>
<span class="line"><span>│  ├─app</span></span>
<span class="line"><span>│  │  └─a.png</span></span>
<span class="line"><span>│  ├─web</span></span>
<span class="line"><span>│  │  └─b.png</span></span>
<span class="line"><span>│  ├─mp-weixin</span></span>
<span class="line"><span>│  │  └─c.png</span></span>
<span class="line"><span>│  ├─mp-alipay</span></span>
<span class="line"><span>│  │  └─d.png</span></span>
<span class="line"><span>│  └─e.png</span></span>
<span class="line"><span>├─main.js</span></span>
<span class="line"><span>├─App.vue</span></span>
<span class="line"><span>├─manifest.json</span></span>
<span class="line"><span>└─pages.json</span></span></code></pre></div><p>以上的平台示例只是一部分，其余的平台请参考官方文档：<a href="https://uniapp.dcloud.net.cn/tutorial/platform.html#static" target="_blank" rel="noreferrer">static 目录的条件编译</a></p><h3 id="_2-使用分包编译" tabindex="-1">2. 使用分包编译 <a class="header-anchor" href="#_2-使用分包编译" aria-label="Permalink to &quot;2. 使用分包编译&quot;">​</a></h3><p>在分包下建立 static 目录，同时在 <code>pages.json</code> 中配合使用条件编译可以实现 static 的条件编译。</p><p>因为编译器根据 <code>pages.json</code> 扫描需要编译的页面，编译时将静态资源打包到对应的子包中，减少主包的体积大小，这种方式在小程序分包中尤其常见。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pages/index&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;subPackages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pagesCustom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pages/index&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过以上条件编译方法，我们可以根据需求对 static 目录中的静态资源进行条件性处理，实现更加灵活和定制化的开发和部署。在实际应用中，根据具体情况选择合适的方法，以达到最佳的效果。</p><h2 id="四-自定义平台如何进行-static-目录的条件编译" tabindex="-1">四. 自定义平台如何进行 static 目录的条件编译 <a class="header-anchor" href="#四-自定义平台如何进行-static-目录的条件编译" aria-label="Permalink to &quot;四. 自定义平台如何进行 static 目录的条件编译&quot;">​</a></h2><p>关于如何自定平台，参考之前文章：<a href="https://juejin.cn/post/7344970197131329575" target="_blank" rel="noreferrer">玩转 uni-app 多端部署：自定义平台的条件编译实战详解</a></p><p>由于官方不支持创建自定义平台下的 static 目录，例如以下方式，<code>mp-weixin-custom</code> 会被认为是一个普通文件夹，将会在所有平台被打包进去。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>┌─static</span></span>
<span class="line"><span>│  ├─mp-weixin</span></span>
<span class="line"><span>│  │  └─a.png</span></span>
<span class="line"><span>│  ├─mp-weixin-custom</span></span>
<span class="line"><span>│  │  └─b.png</span></span>
<span class="line"><span>│  └─c.png</span></span>
<span class="line"><span>├─main.js</span></span>
<span class="line"><span>├─App.vue</span></span>
<span class="line"><span>├─manifest.json</span></span>
<span class="line"><span>└─pages.json</span></span></code></pre></div><p>因此，在这里提供一种思路，可以支持自定义平台的打包策略，可以利用分包实现。</p><h3 id="_1-创建分包目录" tabindex="-1">1. 创建分包目录 <a class="header-anchor" href="#_1-创建分包目录" aria-label="Permalink to &quot;1. 创建分包目录&quot;">​</a></h3><p>在 uni-app 项目中和 pages 同级创建 pagesCustom 目录，如下所示：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">┌─pagesCustom</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  ├─pages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  │  └─index.vue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  ├─static</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  └─ └─h</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-custom-icon.png</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─main.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─App.vue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─manifest.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└─pages.json</span></span></code></pre></div><h3 id="_2-定义分包页面" tabindex="-1">2. 定义分包页面 <a class="header-anchor" href="#_2-定义分包页面" aria-label="Permalink to &quot;2. 定义分包页面&quot;">​</a></h3><p>在 <code>pages.json</code> 中定义页面地址，配合使用条件编译实现。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pages/index&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;subPackages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // #ifdef H5-CUSTOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pagesCustom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pages/index&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // #endif</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>因为编译器根据 <code>pages.json</code> 扫描需要编译的页面，所以分包 <code>pagesCustom</code> 当只有在平台 <code>H5-CUSTOM</code> 的环境下才会被打包，其他平台下会被忽略。利用以上这种方式，可以实现自定义平台下的 <code>static</code> 条件编译。</p><blockquote><p>注意：使用分包的这种方式虽然能实现自定义平台下 static 目录的条件编译，但是我非常不建议这样使用，这样纯粹是为了分离 static 目录而分包，如果是项目页面比较的多的情况下，可见会相当繁琐，应当慎用。目前官方不支持直接在 static 目录下创建自定义平台，希望 uni-app 官方后续可以新增这个功能。</p></blockquote><h3 id="_3-拓展" tabindex="-1">3. 拓展 <a class="header-anchor" href="#_3-拓展" aria-label="Permalink to &quot;3. 拓展&quot;">​</a></h3><p>uni-app 默认支持使用 <code>webpack-chain</code> 插件实现预处理器，应该可以在 <code>vue.config.js</code> 中配置以实现对 static 目录进行条件编译的方法，例如：</p><ul><li>vue.config.js</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chainWebpack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 定义全局常量，可用于条件编译</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;define&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;process.env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;YOUR_VARIABLE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">YOUR_VARIABLE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>由于时间精力原因，以上这种方式未经过验证，有实践过的同学可以相互探讨一下。</p><h2 id="五-最佳实践-实例演示" tabindex="-1">五. 最佳实践：实例演示 <a class="header-anchor" href="#五-最佳实践-实例演示" aria-label="Permalink to &quot;五. 最佳实践：实例演示&quot;">​</a></h2><p><strong>实例演示：如何利用 static 目录进行条件编译实现不同端的定制化需求，包括自定义平台。</strong></p><p>假设我们现在要实现一个 uni-app 项目，需要在不同端（比如 H5 端、微信小程序端、支付宝小程序端、自定义 H5 端）展示不同的图标。</p><h3 id="_1-在-static-目录下准备不同端的图标文件" tabindex="-1">1. 在 static 目录下准备不同端的图标文件 <a class="header-anchor" href="#_1-在-static-目录下准备不同端的图标文件" aria-label="Permalink to &quot;1. 在 static 目录下准备不同端的图标文件&quot;">​</a></h3><p>在 <code>static</code> 目录下准备不同端需要展示的图标文件，例如有以下 4 不同端个图标：</p><ul><li><code>h5-icon.png</code> （H5 端图标）</li><li><code>weixin-icon.png</code> （微信小程序端图标）</li><li><code>alipay-icon.png</code> （支付宝小程序端图标）</li><li><code>h5-custom-icon.png</code> （自定义 H5 端图标）</li></ul><p>在 uni-app 项目中创建的目录如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>┌─static</span></span>
<span class="line"><span>│  ├─h5</span></span>
<span class="line"><span>│  │  └─h5-icon.png</span></span>
<span class="line"><span>│  ├─mp-weixin</span></span>
<span class="line"><span>│  │  └─weixin-icon.png</span></span>
<span class="line"><span>│  ├─mp-alipay</span></span>
<span class="line"><span>│  └─ └─alipay-icon.png</span></span>
<span class="line"><span>├─main.js</span></span>
<span class="line"><span>├─App.vue</span></span>
<span class="line"><span>├─manifest.json</span></span>
<span class="line"><span>└─pages.json</span></span></code></pre></div><h3 id="_2-在代码中使用条件编译实现定制化需求" tabindex="-1">2. 在代码中使用条件编译实现定制化需求 <a class="header-anchor" href="#_2-在代码中使用条件编译实现定制化需求" aria-label="Permalink to &quot;2. 在代码中使用条件编译实现定制化需求&quot;">​</a></h3><p>在代码中利用条件编译，根据不同端选择性地引用 static 目录下的图标文件。</p><p>在 <code>vue</code> 模版中可以这样写：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!--#ifdef H5--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/static/h5/h5-icon.png&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;H5 Icon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!--#endif--&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!--#ifdef MP-WEIXIN--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/static/mp-weixin/weixin-icon.png&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Weixin Icon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!--#endif--&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!--#ifdef MP-ALIPAY--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/static/mp-alipay/alipay-icon.png&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alipay Icon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!--#endif--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>以上两个步骤，其实就实现了在不同端展示不同的图标，而且在打包时也不会将多余端的<code>static</code>被打包到包里，不会造成体积变大。接下来，我们再实现在自定义 H5 平台也实现这种效果。</p><h3 id="_3-使用分包实现定制化-static-目录" tabindex="-1">3. 使用分包实现定制化 static 目录 <a class="header-anchor" href="#_3-使用分包实现定制化-static-目录" aria-label="Permalink to &quot;3. 使用分包实现定制化 static 目录&quot;">​</a></h3><p>在 package.json 中添加 uni-app 节点，添加以下配置，使新定义的平台生效：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;uni-app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;h5-custom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;自定义H5平台&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;browser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;chrome&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;UNI_PLATFORM&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;h5&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;define&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;H5-CUSTOM&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在分包下建立 pages 页面和 static 静态资源目录，如下所示：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">┌─pagesCustom</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  ├─pages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  │  └─index.vue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  ├─static</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  └─ └─h</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-custom-icon.png</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─main.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─App.vue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─manifest.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└─pages.json</span></span></code></pre></div><p>在 <code>pages.json</code> 中定义页面地址，配合使用条件编译可以实现，如下所示：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pages/index&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;subPackages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // #ifdef H5-CUSTOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pagesCustom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pages/index&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // #endif</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过以上步骤，我们可以利用 static 目录进行条件编译，实现不同端的定制化需求，根据具体端的要求展示相应的静态资源文件。这样可以更灵活地根据不同端的特性进行定制化开发，提升用户体验。</p><p>最后，使用一张图总结一下最佳实践步骤：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9e37597d35f4e4e99e9d0f2c32c989e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1493&amp;h=842&amp;s=218765&amp;e=png&amp;b=fdf9f7" alt="image.png"></p><h2 id="六-结语" tabindex="-1">六. 结语 <a class="header-anchor" href="#六-结语" aria-label="Permalink to &quot;六. 结语&quot;">​</a></h2><p>通过这篇文章，相信大家都了解 static 目录的作用以及 static 目录的条件编译方法，在实际应用中，根据具体情况选择合适的方法，相信大家在 uni-app 条件编译的实践中有一个快乐的编码体验。</p><h2 id="资源文档" tabindex="-1">资源文档 <a class="header-anchor" href="#资源文档" aria-label="Permalink to &quot;资源文档&quot;">​</a></h2><p><a href="https://uniapp.dcloud.net.cn/tutorial/project.html" target="_blank" rel="noreferrer">uni-app 工程目录简介</a></p><p><a href="https://uniapp.dcloud.net.cn/tutorial/platform.html#static" target="_blank" rel="noreferrer">uni-app static 目录的条件编译</a></p>`,85);function k(c,E,o,d,r,g){const s=l("ArticleFooter");return t(),i("div",null,[h,n(s,{link:"https://juejin.cn/post/7348245676889718834"})])}const F=a(e,[["render",k]]);export{y as __pageData,F as default};
