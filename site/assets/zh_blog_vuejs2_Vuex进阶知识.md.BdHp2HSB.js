import{_ as i,c as a,I as n,aU as t,o as p,E as e}from"./chunks/framework.CpXV_ol5.js";const u=JSON.parse('{"title":"Vuex 进阶知识：如何优雅的进行 Vue 的状态管理","description":"","frontmatter":{"title":"Vuex 进阶知识：如何优雅的进行 Vue 的状态管理"},"headers":[],"relativePath":"zh/blog/vuejs2/Vuex进阶知识.md","filePath":"zh/blog/vuejs2/Vuex进阶知识.md","lastUpdated":1727083629000}'),l={name:"zh/blog/vuejs2/Vuex进阶知识.md"},h=t(`<h1 id="vuex-进阶知识-如何优雅的进行-vue-的状态管理" tabindex="-1">Vuex 进阶知识：如何优雅的进行 Vue 的状态管理 <a class="header-anchor" href="#vuex-进阶知识-如何优雅的进行-vue-的状态管理" aria-label="Permalink to &quot;Vuex 进阶知识：如何优雅的进行 Vue 的状态管理&quot;">​</a></h1><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e19bc05cb36485488ec181d9212ae82~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=856&amp;h=375&amp;s=259196&amp;e=png&amp;b=fffafa" alt="image.png"></p><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>随着项目的发展和复杂性的增加，对 Vuex 进行更深入的了解和使用就变得非常重要。本篇文章将带您探索 Vuex 的进阶使用，包括模块化、命名空间、getter 的高级用法等。</p><p>在进阶使用 Vuex 之前，想要了解 Vuex 相关的基础知识，请先阅读之前文章：</p><p><a href="https://juejin.cn/post/7282759923343523881" target="_blank" rel="noreferrer">Vuex 入门与实战：了解 Vue 状态管理的核心概念</a></p><p>本篇文章将重点介绍以下几个进阶使用方面：</p><ol><li><strong>辅助函数</strong>：简化在 Vue 组件中使用 Vuex 的操作而提供的一组工具函数。</li><li><strong>计算属性</strong>：使用 getters 封装复杂逻辑，使组件逻辑更清晰。</li><li><strong>命名空间</strong>：详解命名空间的作用和用法，避免模块之间的命名冲突。</li><li><strong>模块化</strong>：将 Vuex 的状态逻辑拆分成多个模块，并实现模块间的通信和协作。</li></ol><p>通过学习本篇文章，你将进一步掌握 Vuex 的进阶用法，提升对 Vuex 的理解和运用能力，更加优雅的组织你的状态管理树！</p><h2 id="一-使用-vuex-辅助函数" tabindex="-1">一. 使用 Vuex 辅助函数 <a class="header-anchor" href="#一-使用-vuex-辅助函数" aria-label="Permalink to &quot;一. 使用 Vuex 辅助函数&quot;">​</a></h2><p>Vuex 辅助函数是为了简化在 Vue 组件中使用 Vuex 的操作而提供的一组工具函数。使用辅助函数可以简化对 state、getters、mutations 和 actions 的访问，减少了冗余的代码和复杂的语法。</p><p>下面是常见的 Vuex 辅助函数：</p><ul><li><strong>mapState</strong>：简化状态映射</li><li><strong>mapGetters</strong>：简化 getters 映射</li><li><strong>mapMutations</strong>：简化 mutations 映射</li><li><strong>mapActions</strong>：简化 actions 映射</li></ul><h3 id="_1-mapstate" tabindex="-1">1. mapState <a class="header-anchor" href="#_1-mapstate" aria-label="Permalink to &quot;1. mapState&quot;">​</a></h3><p><code>mapState</code>函数用于将 store 中的 state 映射到组件的计算属性中，或者直接访问这些 state 属性。它接受一个数组或对象作为参数，用于指定要映射的 state 属性名。</p><p>示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { mapState } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  computed {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;count&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.count)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>count</code> 对应的是 Vuex store 中的 state 属性，通过使用<code>mapState</code>函数，将<code>count</code>属性映射到了组件的计算属性中，可以使用 <code>this</code> 实例直接获取到</p><h3 id="_2-mapgetters" tabindex="-1">2. mapGetters <a class="header-anchor" href="#_2-mapgetters" aria-label="Permalink to &quot;2. mapGetters&quot;">​</a></h3><p><code>mapGetters</code>函数用于将 store 中的 getters 映射到组件的计算属性中，或者直接访问这些 getters。它接受一个数组或对象作为参数，用于指定要映射的 getters 函数名。</p><p>示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { mapGetters } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  computed: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapGetters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;count&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>count</code> 对应的是 Vuex store 中的 getter 函数，通过使用<code>mapGetters</code>函数，将<code>count</code>函数映射到了组件的计算属性中。</p><h3 id="_3-mapmutations" tabindex="-1">3. mapMutations <a class="header-anchor" href="#_3-mapmutations" aria-label="Permalink to &quot;3. mapMutations&quot;">​</a></h3><p><code>mapMutations</code> 函数用于将 store 中的 mutations 映射到组件的方法中，以便组件可以直接调用<code>commit</code>来触发 mutations。它接受一个数组或对象作为参数，用于指定要映射的 mutations 函数名。</p><p>示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { mapMutations } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapMutations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;increment&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>increment</code> 对应的是 Vuex store 中的 mutation 函数，通过使用<code>mapMutations</code>函数，将<code>increment</code>函数映射到了组件的方法中。</p><h3 id="_4-mapactions" tabindex="-1">4. mapActions <a class="header-anchor" href="#_4-mapactions" aria-label="Permalink to &quot;4. mapActions&quot;">​</a></h3><p><code>mapActions</code>函数用于将 store 中的 actions 映射到组件的方法中，以便组件可以直接调用<code>dispatch</code>来触发 actions。它接受一个数组或对象作为参数，用于指定要映射的 actions 函数名。</p><p>示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { mapActions } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapActions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;incrementAsync&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>incrementAsync</code>对应的是 Vuex store 中的 action 函数，通过使用<code>mapActions</code>函数，我们将<code>incrementAsync</code>函数映射到了组件的方法中。</p><blockquote><p>Vuex 辅助函数的使用可以简化在组件中对 Vuex 的调用和使用，使代码更加简洁和可读。通过使用这些辅助函数，我们可以更方便地访问和操作 store 中的 state、getters、mutations 和 actions。</p></blockquote><h2 id="二-使用-getters-计算属性" tabindex="-1">二. 使用 getters 计算属性 <a class="header-anchor" href="#二-使用-getters-计算属性" aria-label="Permalink to &quot;二. 使用 getters 计算属性&quot;">​</a></h2><h3 id="_1-getters-的作用" tabindex="-1">1. getters 的作用 <a class="header-anchor" href="#_1-getters-的作用" aria-label="Permalink to &quot;1. getters 的作用&quot;">​</a></h3><p>在 Vuex 中，getters 是用于获取状态的计算属性，类似于组件中的计算属性。它们可以对 Vuex 中的状态进行处理、筛选或组合，并以一种响应式的方式提供新的派生状态。</p><p>getters 的作用是从 store 中获取数据，并以一种经过处理的形式进行展示或使用。在组件中使用 getters 可以方便地获取所需的状态，而不需要在组件内部重复编写逻辑。</p><h3 id="_2-getters-的使用步骤" tabindex="-1">2. getters 的使用步骤 <a class="header-anchor" href="#_2-getters-的使用步骤" aria-label="Permalink to &quot;2. getters 的使用步骤&quot;">​</a></h3><p><strong>定义 getters</strong></p><p>在 Vuex 的模块配置中，可以使用 <code>getters</code> 字段定义 getters。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vuex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  state: { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mutations: { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  actions: { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getters: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    computedState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 处理 state 并返回派生状态的计算属性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state.someData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    filteredData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 根据条件筛选 state 中的数据并返回派生状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state.data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item.condition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>以上我们定义了两个 getters，分别是 <code>computedState</code> 和 <code>filteredData</code>。</p><p><strong>使用 getters</strong></p><p>在组件中可以使用 <code>mapGetters</code> 辅助函数或使用 <code>$store.getters</code> 来访问 getters 的值。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { mapGetters } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  computed: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapGetters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;computedState&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;filteredData&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.computedState) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出经过处理的状态值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.filteredData) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出经过筛选的数据数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$store.getters.computedState) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过 $store.getters 访问</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上面的代码中，我们使用 <code>mapGetters</code> 辅助函数将 getters 映射到组件的计算属性中，然后可以在组件中直接使用。</p><h3 id="_3-getters-的优势" tabindex="-1">3. getters 的优势 <a class="header-anchor" href="#_3-getters-的优势" aria-label="Permalink to &quot;3. getters 的优势&quot;">​</a></h3><p>Vuex 的 getters 在状态管理中具有以下几个优势：</p><ol><li><p><strong>统一管理计算属性</strong>：有时需要根据一些状态值进行一些复杂的计算，例如对状态进行过滤、组合、转换等操作，而 getters 可以让我们统一管理这些计算属性。通过将计算逻辑放在 getters 中，可以使代码更具可维护性和可读性。</p></li><li><p><strong>响应式更新</strong>：Vuex 的 getters 是响应式的，当所依赖的状态发生变化时，getters 会自动重新计算。这意味着当 getters 所依赖的状态发生变化时，相关组件也会自动更新。这样可以避免手动监听状态的变化或手动触发计算属性的更新。</p></li><li><p><strong>避免重复计算</strong>：Vuex 对 getters 进行了缓存优化。只有在 getters 所依赖的状态发生变化时，getters 才会重新计算。这样可以避免不必要的计算开销。而且，如果 getters 的值没有发生变化，多次访问它将会直接从缓存中读取。这在某些情况下可以提升性能。</p></li><li><p><strong>封装复杂逻辑</strong>：有时候，某些状态间的处理逻辑可能比较复杂，涉及多个模块或多个状态之间的交互。通过使用 getters，可以将这些复杂逻辑封装到一个单独的地方，使组件逻辑更清晰，减少代码的冗余和重复。</p></li></ol><blockquote><p>Vuex 的 getters 在状态管理中起到了统一管理计算属性、实现响应式更新、避免重复计算、封装复杂逻辑、提高可复用性和可测试性的作用。它们为开发者提供了一种方便且强大的方式来处理和展示状态，使得应用程序的状态管理更加简洁、可维护和高效。</p></blockquote><h2 id="三-命名空间" tabindex="-1">三. 命名空间 <a class="header-anchor" href="#三-命名空间" aria-label="Permalink to &quot;三. 命名空间&quot;">​</a></h2><h3 id="_1-什么是命名空间" tabindex="-1">1. 什么是命名空间 <a class="header-anchor" href="#_1-什么是命名空间" aria-label="Permalink to &quot;1. 什么是命名空间&quot;">​</a></h3><p>在 Vuex 中，命名空间（namespaces）是一种组织和隔离模块的方式，用于避免模块之间的命名冲突。</p><p>命名空间为每个模块提供了一个层级根，使得模块的状态、行为、和 getter 可以通过命名空间进行访问。这样，就可以在模块的路径前加上命名空间前缀，来确保模块的所有内容是唯一且不会与其他模块产生冲突。</p><h3 id="_2-如何使用命名空间" tabindex="-1">2. 如何使用命名空间 <a class="header-anchor" href="#_2-如何使用命名空间" aria-label="Permalink to &quot;2. 如何使用命名空间&quot;">​</a></h3><ol><li>定义命名空间：</li></ol><p>在模块中，可以通过在模块配置中设置 <code>namespaced: true</code> 来定义命名空间。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vuex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  modules: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    myModule: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      namespaced: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      state: { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      mutations: { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      actions: { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      getters: { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>以上代码是我们将名为 <code>myModule</code> 的模块设置为命名空间模块。</p><ol start="2"><li>使用命名空间：</li></ol><p>使用命名空间时，可以通过在访问模块的内容之前添加命名空间前缀来引用模块的状态、行为和 getter。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 访问命名空间模块的状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store.state.myModule.stateName</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用命名空间模块的 mutation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myModule/mutationName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, payload)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用命名空间模块的 action</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myModule/actionName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, payload)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取命名空间块的 getter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store.getters[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myModule/getterName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>如上所示，我们使用命名空间前缀 <code>myModule/</code> 来访问和调用模块的状态、行为和 getter。</p><blockquote><p>命名空间的使用使得模块之间的关系更为清晰，并可以避免命名冲突。但是<strong>请注意</strong>：在使用命名空间时需要小心，确保正确地引用和调用模块的内容。</p></blockquote><h2 id="四-模块化管理" tabindex="-1">四. 模块化管理 <a class="header-anchor" href="#四-模块化管理" aria-label="Permalink to &quot;四. 模块化管理&quot;">​</a></h2><h3 id="_1-模块化组织结构" tabindex="-1">1. 模块化组织结构 <a class="header-anchor" href="#_1-模块化组织结构" aria-label="Permalink to &quot;1. 模块化组织结构&quot;">​</a></h3><p>在 Vuex 中，可以使用模块化的组织结构来管理大型的状态管理。模块化能够将整个应用的状态分割为多个小模块，每个模块都有自己的 state、mutations、getters 和 actions。</p><p>以下是 Vuex 中最简单模块化组织结构：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>├── index.html</span></span>
<span class="line"><span>├── main.js</span></span>
<span class="line"><span>├── components // 组件</span></span>
<span class="line"><span>└── store</span></span>
<span class="line"><span>    ├── index.js         # 组装模块并导出 store 的主文件</span></span>
<span class="line"><span>    └── modules</span></span>
<span class="line"><span>        ├── moduleA.js   # moduleA 模块</span></span>
<span class="line"><span>        └── moduleB.js   # moduleB 模块</span></span></code></pre></div><p><strong>（1）定义 moduleA 模块</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个模块A</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> moduleA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  state: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mutations: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    increment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      state.count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  actions: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    incrementAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;increment&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getters: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    doubleCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moduleA</span></span></code></pre></div><p><strong>（2）定义 moduleB 模块</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个模块B</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> moduleB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  state: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mutations: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    changeName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      state.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newName</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moduleB</span></span></code></pre></div><p><strong>（3）引入所用模块，并创建 Vuex 实例</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vuex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moduleA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;moduleA&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moduleB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;moduleB&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Vuex)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建Vuex实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vuex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  modules: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    moduleA,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    moduleB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> store</span></span></code></pre></div><p>上述示例中，我们定义了两个模块：moduleA 和 moduleB。每个模块有自己的 state、mutations、actions 和 getters。在创建 Vuex 实例时，将这些模块对象放入<code>modules</code>选项中。</p><p>在组件中使用模块化的状态时，可以通过辅助函数<code>mapState</code>、<code>mapMutations</code>、<code>mapActions</code>和<code>mapGetters</code>来简化使用：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { mapState, mapMutations, mapActions, mapGetters } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  computed: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;moduleA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      countA: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;count&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;moduleB&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      nameB: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapGetters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;moduleA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;doubleCount&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapMutations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;moduleA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;increment&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapActions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;moduleA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;incrementAsync&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapMutations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;moduleB&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;changeName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上述示例中，通过指定模块名，我们可以将模块中的状态和操作映射到组件的计算属性和方法中。通过<code>mapState</code>可以将模块 A 中的<code>count</code>映射为<code>countA</code>计算属性，通过<code>Mutations</code>和<code>mapActions</code>可以将模块 A 中的<code>increment</code>和<code>incrementAsync</code>映射为组件的方法。</p><p>通过模块化组织结构，可以更好地管理和维护大型应用的状态，使得状态结构更加清晰和可维护。模块化还可以方便地复用模块，将模块拆分为多个文件进行管理，提高开发效率。</p><blockquote><p>注意：在模块内部的 mutations 和 getters 中，可以使用<code>rootState</code>和<code>rootGetters</code>参数来访问根模块中的状态和 getters。例如，在 moduleA 的 mutations 中可以使用<code>rootState.moduleB.name</code>来获取 moduleB 中的 name 状态。</p></blockquote><h3 id="_2-使用模块化的优势" tabindex="-1">2. 使用模块化的优势 <a class="header-anchor" href="#_2-使用模块化的优势" aria-label="Permalink to &quot;2. 使用模块化的优势&quot;">​</a></h3><ol><li><p><strong>代码分离和组织</strong>：将 Vuex 的状态逻辑分割成多个模块，可以更好地组织代码，提高代码的可维护性和可读性。每个模块都有自己的状态、操作和获取器，使得代码更加清晰和可扩展。</p></li><li><p><strong>避免命名冲突</strong>：使用模块化可以避免全局状态中的命名冲突问题。每个模块都有己的命名空间防止了不同模块之间的命名冲突，提高了代码的健壮性和稳定性。</p></li><li><p><strong>提高可复用性</strong>：模块化的设计使得模块可以在不同的应用程序中被复用。可以将通用的状态模块封装成独立的模块，然后在不同的应用程序中引入并使用。</p></li><li><p><strong>模块独立调试</strong>：每个模块都可以独立进行状态的修改和操作，方便调试。通过模块化，可以更加精确地定位到问题所在，快速解决 bug。</p></li></ol><h3 id="_3-什么情况下需要使用模块化" tabindex="-1">3. 什么情况下需要使用模块化 <a class="header-anchor" href="#_3-什么情况下需要使用模块化" aria-label="Permalink to &quot;3. 什么情况下需要使用模块化&quot;">​</a></h3><ol><li><p><strong>大型应用程序</strong>：对于大型的 Vue.js 应用程序，使用模块化可以更好地组织和管理状态。不同模块可以分别负责处理不同的业务逻辑，使得代码更清晰。</p></li><li><p><strong>多人协作开发</strong>：在多人协作开发的项目中，使用模块化可以更好地分工合作。每个开发者可以负责一个或多个模块的开发和维护，减少了代码冲突和影响范围，提高了开发效率。</p></li><li><p><strong>复杂的业务逻辑</strong>：对于复杂的业务逻辑，使用模块化可以将其拆分成多个独立的模块，使得代码更易于理解和维护。每个模块负责处理各自的逻辑，减少了耦合度。</p></li><li><p><strong>可复用的模块</strong>：如果有一些通用的状态逻辑需要在不同的应用程序中复用，可以将其封装成独立的模块。这样可以避免重复编写代码，提高了开发效率和代码的可维护性。</p></li></ol><blockquote><p>Vuex 的模块化设计使得代码更加清晰、可维护性更高，并且有利于多人协作开发和复用状态逻辑。在大型应用程序或者需要拆分复杂业务逻辑的情况下，使用模块化可以带来诸多好处。</p></blockquote><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>在本篇文章中，我们介绍了 Vuex 的进阶使用，包括模块化、命名空间以及高级选项等方面。通过这些进阶技巧，我们可以更好地组织和管理 Vuex 的状态管理。</p><p>模块化是 Vuex 中非常重要的一个特性，通过将状态拆分为多个模块，我们可以更好地管理复杂的应用程序状态。从而更灵活地扩展和配置我们的状态管理。命名空间则可以帮助我们解决模块之间的命名冲突问题，并提供更清晰的语义。</p><p>通过掌握这些进阶技巧，我们可以更好地应对复杂的状态管理需求，并提高应用程序的可维护性和开发效率。</p>`,91);function k(E,r,d,o,g,c){const s=e("ArticleFooter");return p(),a("div",null,[h,n(s,{link:"https://juejin.cn/post/7283314026342350859"})])}const F=i(l,[["render",k]]);export{u as __pageData,F as default};
