import{_ as i,c as a,I as n,aU as l,o as p,E as e}from"./chunks/framework.CpXV_ol5.js";const C=JSON.parse('{"title":"揭开 SCSS 神秘面纱：利用预处理器升级你的样式表技术","description":"","frontmatter":{"title":"揭开 SCSS 神秘面纱：利用预处理器升级你的样式表技术"},"headers":[],"relativePath":"zh/blog/css/SCSS入门-利用预处理器升级样式表技术.md","filePath":"zh/blog/css/SCSS入门-利用预处理器升级样式表技术.md","lastUpdated":1727083629000}'),t={name:"zh/blog/css/SCSS入门-利用预处理器升级样式表技术.md"},h=l(`<h1 id="揭开-scss-神秘面纱-利用预处理器升级你的样式表技术" tabindex="-1">揭开 SCSS 神秘面纱：利用预处理器升级你的样式表技术 <a class="header-anchor" href="#揭开-scss-神秘面纱-利用预处理器升级你的样式表技术" aria-label="Permalink to &quot;揭开 SCSS 神秘面纱：利用预处理器升级你的样式表技术&quot;">​</a></h1><h2 id="一-前言" tabindex="-1">一. 前言 <a class="header-anchor" href="#一-前言" aria-label="Permalink to &quot;一. 前言&quot;">​</a></h2><p>在前端开发中，CSS 是不可或缺的一部分，它负责控制网页的样式和布局。然而，使用纯 CSS 编写复杂的样式表可能会变得冗长而难以维护。在这种情况下，SCSS（<code>Sassy CSS</code>）的出现为我们提供了更强大和灵活的样式语言。</p><p>SCSS 是 Sass 的一种语法扩展，它引入了许多 CSS 所不具备的功能，如变量、嵌套规则、混合器、继承等。通过使用 SCSS，我们可以更加高效地编写样式表，并且提高代码的可重用性和可维护性。</p><p>本文将从基础讲起，了解 SCSS 的基本使用方法及其各种功能。我们将学习如何定义和使用变量来管理颜色、字体大小等常用值；充分了解和利用 SCSS 的强大功能，从而提升你的前端开发效率。让我们一起展开这场关于 SCSS 的奇妙之旅吧！</p><h2 id="二-什么是-scss" tabindex="-1">二. 什么是 SCSS <a class="header-anchor" href="#二-什么是-scss" aria-label="Permalink to &quot;二. 什么是 SCSS&quot;">​</a></h2><p>SCSS（<code>Sassy CSS</code>）是 CSS 的一种超集，也是一种预处理器。它为 CSS 添加了一些功能和语法上的改进，使 CSS 的编写更加高效、可维护和可扩展。</p><p>SCSS 基于 Sass（<code>Syntactically Awesome Style Sheets</code>）语法，并且完全兼容 CSS 语法，所有的 CSS 代码都可以直接作为 SCSS 代码使用。SCSS 在 Sass 的基础上增加了一些特性，如<strong>嵌套规则</strong>、<strong>变量</strong>、<strong>混合器</strong>、<strong>继承</strong>等，这些特性能够极大地提升样式表的灵活性和可重用性。</p><p>SCSS 的主要特点包括：</p><ol><li><p><strong>嵌套规则</strong>：SCSS 允许在父级选择器下面嵌套子选择器，使得样式的层级结构更加清晰。</p></li><li><p><strong>变量</strong>：SCSS 引入了变量的概念，可以在样式表中定义变量来存储颜色、字体、尺寸等样式属性的值，提供了便捷的全局样式调整方法。</p></li><li><p><strong>混合器</strong>（Mixins）：混合器允许定义一组样式规则，在需要时通过引用混合器生成样式。混合器可以接收参数，提供了代码复用的强大工具。</p></li><li><p><strong>继承</strong>：SCSS 支持样式的继承，可以通过<code>@extend</code>指令将一个选择器的样式继承到另一个选择器上，从而实现样式的复用。</p></li><li><p><strong>运算和函数</strong>：SCSS 支持数学运算和逻辑运算，可以进行加减乘除等运算操作，还提供了许多内置函数和自定义函数，用于处理颜色、尺寸等样式属性。</p></li><li><p><strong>导入文件</strong>：SCSS 支持通过<code>@import</code>指令导入其他 SCSS 文件，可以将样式表拆分为多个模块化的文件，提高代码的组织性和可维护性。</p></li></ol><p>使用 SCSS 可以大大简化 CSS 的编写过程，提高样式表的可维护性和可读性。同时，它还可以通过编译器将 SCSS 代码转换为标准的 CSS 代码，使其可以在浏览器中正常运行。</p><p>接下来我们将会对 SCSS 的主要特点进行详细的说明。而首先，我们要从基础做起，要使用 SCSS，就要学会正确的安装和设置 SCSS 环境，这是我们学好 SCSS 的关键</p><h2 id="三-安装和设置-scss-环境" tabindex="-1">三. 安装和设置 SCSS 环境 <a class="header-anchor" href="#三-安装和设置-scss-环境" aria-label="Permalink to &quot;三. 安装和设置 SCSS 环境&quot;">​</a></h2><h3 id="_1-安装-sass-编译器" tabindex="-1">1. 安装 Sass 编译器 <a class="header-anchor" href="#_1-安装-sass-编译器" aria-label="Permalink to &quot;1. 安装 Sass 编译器&quot;">​</a></h3><p>安装 Sass 编译器，你可以按照以下步骤进行操作：</p><h4 id="_1-安装-node-js" tabindex="-1">1）安装 Node.js <a class="header-anchor" href="#_1-安装-node-js" aria-label="Permalink to &quot;1）安装 Node.js&quot;">​</a></h4><p>Sass 编译器是基于 Node.js 的工具，因此首先需要在你的计算机上安装 Node.js。你可以从 Node.js 官方网站（<a href="https://nodejs.org" target="_blank" rel="noreferrer">https://nodejs.org</a>） 下载安装程序，并按照安装向导进行安装。</p><h4 id="_2-检查-node-js-安装是否成功" tabindex="-1">2）检查 Node.js 安装是否成功 <a class="header-anchor" href="#_2-检查-node-js-安装是否成功" aria-label="Permalink to &quot;2）检查 Node.js 安装是否成功&quot;">​</a></h4><p>安装完成后，你可以在终端（Windows 上是命令提示符或 PowerShell，Mac 或 Linux 上是终端）中运行以下命令来验证 Node.js 的安装是否成功：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>node -v</span></span>
<span class="line"><span>npm -v</span></span></code></pre></div><p>如果输出显示了 Node.js 和 npm 的版本号，则说明安装成功。</p><h4 id="_3-安装-sass" tabindex="-1">3）安装 Sass <a class="header-anchor" href="#_3-安装-sass" aria-label="Permalink to &quot;3）安装 Sass&quot;">​</a></h4><p>在终端中运行以下命令来安装全局的 Sass 包（命令行）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install -g sass</span></span></code></pre></div><p>这将使用 npm 工具从 npm 仓库安装 Sass 包。</p><h4 id="_4-检查-sass-安装是否成功" tabindex="-1">4）检查 Sass 安装是否成功 <a class="header-anchor" href="#_4-检查-sass-安装是否成功" aria-label="Permalink to &quot;4）检查 Sass 安装是否成功&quot;">​</a></h4><p>安装完成后，你可以在终端中运行以下命令来验证 Sass 的安装是否成功：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sass --version</span></span></code></pre></div><p>如果输出显示了 Sass 的版本号，则说明安装成功。</p><p>现在，你已经成功安装了 Sass 编译器。你可以使用 Sass 编译器将 SCSS 文件编译为 CSS 文件，例如使用以下命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sass input.scss output.css</span></span></code></pre></div><p>其中，<code>input.scss</code>是你的 SCSS 文件的路径，<code>output.css</code>是编译后生成的 CSS 文件的路径。你可以根据自己的实际情况进行替换。</p><p>另外，你还可以使用 Sass 编译器的其他选项和功能，如监听文件变化并自动编译等。你可以通过运行<code>sass --help</code>命令来查看更多的命令选项和用法说明。</p><blockquote><p>注意：在安装和使用 Sass 编译器之前，请确保你已经熟悉基本的命令行和文件操作，并且了解如何使用 SCSS 语法编写样式文件。</p></blockquote><h3 id="_2-配置-sass-编译器" tabindex="-1">2. 配置 Sass 编译器 <a class="header-anchor" href="#_2-配置-sass-编译器" aria-label="Permalink to &quot;2. 配置 Sass 编译器&quot;">​</a></h3><p>要配置 Sass 编译器的基本设置和选项，你需要创建一个<code>.sassrc</code>或者<code>.sassrc.json</code>文件，以指定编译器的配置。以下是一些常用的配置选项：</p><h4 id="_1-outputstyle" tabindex="-1">1）<code>outputStyle</code> <a class="header-anchor" href="#_1-outputstyle" aria-label="Permalink to &quot;1）\`outputStyle\`&quot;">​</a></h4><p>指定编译后的 CSS 代码的输出格式。有以下几种可选值：</p><ul><li><code>expanded</code>：展开的格式，每个选择器和属性独占一行。</li><li><code>compressed</code>：压缩的格式，所有代码在一行，无多余空格和换行。</li><li><code>nested</code>：嵌套的格式，选择器和属性分层级展示。</li><li><code>compact</code>：紧凑的格式，每个选择器和属性在一行，使用空格分隔。</li></ul><p>例如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;outputStyle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compressed&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_2-sourcemap" tabindex="-1">2）<code>sourceMap</code> <a class="header-anchor" href="#_2-sourcemap" aria-label="Permalink to &quot;2）\`sourceMap\`&quot;">​</a></h4><p>是否生成源映射文件。源映射文件可以帮助调试，对应编译前的 SCSS 文件和编译后的 CSS 文件之间的映射关系。默认情况下是不生成源映射文件的。可以设置为 <code>true</code> 或者 <code>false</code> 来启用或禁用源映射文件的生成。</p><p>例如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;sourceMap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_3-includepaths" tabindex="-1">3）<code>includePaths</code> <a class="header-anchor" href="#_3-includepaths" aria-label="Permalink to &quot;3）\`includePaths\`&quot;">​</a></h4><p>指定导入 SCSS 文件时的搜索路径。如果你的项目中有一些自定义的 SCSS 文件或者库文件，可以通过设置该选项来告诉编译器在哪些路径下查找导入的文件。</p><p>例如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;includePaths&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/scss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vendor/bootstrap/css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_4-precision" tabindex="-1">4）<code>precision</code> <a class="header-anchor" href="#_4-precision" aria-label="Permalink to &quot;4）\`precision\`&quot;">​</a></h4><p>指定浮点数精度。默认情况下，编译器将保留 5 位小数。你可以通过设置该选项来修改保留的小数位数。</p><p>例如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;precision&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这些只是一些常见的配置选项示例，你可以根据需要进行自定义配置。你可以将配置选项以 JSON 格式写入<code>.sassrc</code>或者<code>.sassrc.json</code>文件中，并将该文件放置在你的项目根目录下。然后，在运行 Sass 编译器时，它将根据配置文件中的设置进行编译。</p><blockquote><p>注意：在编写配置文件时，务必按照 JSON 的语法要求，确保正确的格式和书写。另外，还可以通过命令行参数来覆盖配置文件中的选项，具体可以查看 Sass 编译器的相关文档。</p></blockquote><h2 id="四-基本语法" tabindex="-1">四. 基本语法 <a class="header-anchor" href="#四-基本语法" aria-label="Permalink to &quot;四. 基本语法&quot;">​</a></h2><p>SCSS  允许你在 CSS 样式表中使用更强大的功能和特性。下面是 SCSS 的基本语法详解：</p><h3 id="_1-变量-variables" tabindex="-1">1. 变量（Variables） <a class="header-anchor" href="#_1-变量-variables" aria-label="Permalink to &quot;1. 变量（Variables）&quot;">​</a></h3><p>你可以使用 <code>$</code> 符号来定义变量，并通过引用变量的方式来使用它们。变量定义后可以在整个样式表中使用。</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$primary-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#ff0000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$primary-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-嵌套规则-nesting" tabindex="-1">2. 嵌套规则（Nesting） <a class="header-anchor" href="#_2-嵌套规则-nesting" aria-label="Permalink to &quot;2. 嵌套规则（Nesting）&quot;">​</a></h3><p>SCSS 允许你在样式规则内部嵌套其他规则，这样可以更好地组织和维护代码。</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">nav</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline-block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    text-decoration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-混合器-mixins" tabindex="-1">3. 混合器（Mixins） <a class="header-anchor" href="#_3-混合器-mixins" aria-label="Permalink to &quot;3. 混合器（Mixins）&quot;">​</a></h3><p>混合器是一种可以重用样式块的机制。你可以使用 <code>@mixin</code> 关键字定义一个混合器，然后通过 <code>@include</code> 关键字将其引入到需要的地方。</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@mixin</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -webkit-border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -moz-border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  @include</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#f1f1f1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_4-继承-inheritance" tabindex="-1">4. 继承（Inheritance） <a class="header-anchor" href="#_4-继承-inheritance" aria-label="Permalink to &quot;4. 继承（Inheritance）&quot;">​</a></h3><p>你可以使用 <code>@extend</code> 关键字使一个选择器继承另一个选择器的样式。</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.btn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#ff0000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.btn-primary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  @extend</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .btn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#fff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_5-条件语句-conditionals" tabindex="-1">5. 条件语句（Conditionals） <a class="header-anchor" href="#_5-条件语句-conditionals" aria-label="Permalink to &quot;5. 条件语句（Conditionals）&quot;">​</a></h3><p>SCSS 支持使用条件语句来根据条件设置样式。</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  @if</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> $width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@else </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这些只是 SCSS 的一些基本语法要点，还有很多其他功能和特性，如函数、循环等，可以进一步深入学习和应用。注意，在使用 SCSS 语法时，你需要将其编译为普通的 CSS 语法后才能在浏览器中使用。可以使用预处理器或构建工具来实现自动编译。</p><h2 id="五-scss-vs-css" tabindex="-1">五. SCSS vs CSS <a class="header-anchor" href="#五-scss-vs-css" aria-label="Permalink to &quot;五. SCSS vs CSS&quot;">​</a></h2><p>SCSS 是 CSS 的一种超集，它扩展了 CSS 的功能和语法，使得 CSS 的编写更加高效、可维护和可扩展。下面是 SCSS 和原生 CSS 的区别和优势的对比：</p><ol><li><p>语法</p><ul><li>原生 CSS 使用分号和大括号来表示样式规则和属性值，</li><li>SCSS 使用缩进和冒号表示。SCSS 的语法更加简洁和易读，使用嵌套规则更方便组织和管理样式。</li></ul></li><li><p>变量</p><ul><li>原生 CSS 没有变量的概念</li><li>SCSS 引入了变量，可以定义和使用变量来存储颜色、字体、尺寸等样式属性的值，提供了便捷的全局样式调整方法。</li></ul></li><li><p>混合器（Mixins）</p><ul><li>SCSS 支持混合器的定义和使用，可以将一段样式规则定义为混合器，并在需要时引用该混合器。混合器可以接收参数，提供了样式复用的强大工具。</li></ul></li><li><p>继承</p><ul><li>SCSS 支持样式的继承，通过<code>@extend</code>指令可以将一个选择器的样式继承到另一个选择器上，实现样式的复用。这在遵循 DRY（Don&#39;t Repeat Yourself）原则的同时提高了样式表的维护性。</li></ul></li><li><p>运算和函数</p><ul><li>SCSS 支持数学运算和逻辑运算，可以进行加减乘除等运算操作，还提供了许多内置函数和自定义函数，用于处理颜色、尺寸等样式属性，增加了样式表处理的灵活性和功能性。</li></ul></li><li><p>文件导入</p><ul><li>SCSS 支持通过<code>@import</code>指令导入其他 SCSS 文件，可以将样式表拆分为多个模块化的文件，提高代码的组织性和可维护性，同时减少样式文件的大小和加载时间。</li></ul></li></ol><p>总的来说，SCSS 相对于原生 CSS 具有以下优势：</p><ul><li>提供了更强大的语法和功能，增加了样式表编写的灵活性。</li><li>引入了变量和混合器的概念，提供了样式的重用和全局调整的便利性。</li><li>支持样式的继承，减少了重复编写样式的工作量。</li><li>支持数学运算和逻辑运算，以及丰富的内置函数和自定义函数，增加了样式属性的处理能力。</li><li>支持文件的模块化组织和导入，提高了代码的组织性和可维护性。</li></ul><blockquote><p>要注意的是，尽管 SCSS 是 CSS 的超集，但在使用 SCSS 之前需要将其编译为原生 CSS，才能在浏览器中正常运行。这一过程可以通过使用 Sass 编译器或其他构建工具来完成。</p></blockquote><h2 id="六-总结" tabindex="-1">六. 总结 <a class="header-anchor" href="#六-总结" aria-label="Permalink to &quot;六. 总结&quot;">​</a></h2><p>通过本文的介绍，我们了解了 SCSS 的基本使用方法以及其强大的功能和特性。SCSS 提供了变量、嵌套规则、混合器、继承等功能，这些功能使得我们能够更加高效地编写样式表，并且提高代码的可重用性和可维护性。</p><p>使用 SCSS，我们可以通过定义和使用变量来统一管理常用的样式值，使得样式的修改更加方便和一致。</p><p>最重要的是，为了将 SCSS 代码应用到网页中，我们需要将其编译为普通的 CSS 代码。可以使用预处理器或构建工具来实现自动编译，使得我们无需手动转换和维护两份代码。</p><p>希望通过本文，你对 SCSS 的基本使用有了更深入的理解。通过合理地应用 SCSS，我们可以写出更加优雅和高效的样式表，提升我们的前端开发效率。</p><p>本文仅是 SCSS 的基础讲解，接下来我们将继续探索和学习 SCSS 的更多功能，并最终通过它实现我们自己的样式库。</p>`,85);function k(d,r,o,c,E,S){const s=e("ArticleFooter");return p(),a("div",null,[h,n(s,{link:"https://juejin.cn/post/7296692047418507274"})])}const y=i(t,[["render",k]]);export{C as __pageData,y as default};
