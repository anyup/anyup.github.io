import{_ as e,c as p,I as i,aU as o,o as t,E as l}from"./chunks/framework.CpXV_ol5.js";const f=JSON.parse('{"title":"【超详细】从0到1打包你的uni-app应用：安卓篇打包指南","description":"","frontmatter":{"title":"【超详细】从0到1打包你的uni-app应用：安卓篇打包指南"},"headers":[],"relativePath":"zh/blog/uni-app/打包uni-app应用-安卓篇打包指南.md","filePath":"zh/blog/uni-app/打包uni-app应用-安卓篇打包指南.md","lastUpdated":1725606759000}'),r={name:"zh/blog/uni-app/打包uni-app应用-安卓篇打包指南.md"},n=o(`<h1 id="【超详细】从-0-到-1-打包你的-uni-app-应用-安卓篇打包指南" tabindex="-1">【超详细】从 0 到 1 打包你的 uni-app 应用：安卓篇打包指南 <a class="header-anchor" href="#【超详细】从-0-到-1-打包你的-uni-app-应用-安卓篇打包指南" aria-label="Permalink to &quot;【超详细】从 0 到 1 打包你的 uni-app 应用：安卓篇打包指南&quot;">​</a></h1><h2 id="一-介绍" tabindex="-1">一. 介绍 <a class="header-anchor" href="#一-介绍" aria-label="Permalink to &quot;一. 介绍&quot;">​</a></h2><p>在当前移动应用开发的大环境下，uni-app 作为一种使用 Vue.js 开发多平台应用的框架，为开发者提供了快速构建跨平台应用的能力。本文将为你介绍如何将 uni-app 项目打包成安卓应用，让你的应用在安卓设备上运行并上架应用市场。</p><h2 id="二-准备环境" tabindex="-1">二. 准备环境 <a class="header-anchor" href="#二-准备环境" aria-label="Permalink to &quot;二. 准备环境&quot;">​</a></h2><p>在开始之前，确保你已经安装了以下软件和工具</p><ol><li><strong><a href="https://nodejs.org/en" target="_blank" rel="noreferrer">Node.js</a></strong></li><li><strong><a href="https://www.dcloud.io/hbuilderx.html" target="_blank" rel="noreferrer">HBuilderX</a></strong></li><li><strong><a href="https://www.oracle.com/java/technologies/downloads/" target="_blank" rel="noreferrer">JDK</a></strong>（Java Development Kit）</li></ol><p>如果你想要实现本地版离线打包，你还需要安装安卓的环境。不过如果你之前对开发安卓没有成熟的经验，你将会非常痛苦。</p><p><strong>离线打包需要安装以下工具</strong></p><ol><li><p>Android Studio 下载地址：<a href="https://developer.android.google.cn/studio/index.html" target="_blank" rel="noreferrer">Android Studio 官网</a> OR <a href="http://www.android-studio.org/" target="_blank" rel="noreferrer">Android Studio 中文社区</a></p></li><li><p>App 离线 SDK 下载：<a href="https://nativesupport.dcloud.net.cn/AppDocs/download/android" target="_blank" rel="noreferrer">最新 android 平台 SDK 下载</a></p></li></ol><blockquote><p>本文不对离线打包做详细的说明，非特殊情况下，非专业的安卓开发人员，真的不建议使用离线打包。</p></blockquote><h2 id="三-创建应用" tabindex="-1">三. 创建应用 <a class="header-anchor" href="#三-创建应用" aria-label="Permalink to &quot;三. 创建应用&quot;">​</a></h2><p>在 HBuilderX 中建新的 uni-app 项目或打开已有的项目。</p><ol><li>在 HBuilderX 中，点击 “文件” -&gt; “新建” -&gt; “uni-app 项目” 或者选中已有的项目。</li><li>输入项目的名称和存放路径，并选择适当的模板。</li><li>点击“创建”来生成项目文件。</li></ol><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5443f3bda134bf283f2ffc9f1524f35~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1027&amp;h=693&amp;s=99755&amp;e=png&amp;b=fdfbf7" alt="image.png"></p><h2 id="四-生成签名证书" tabindex="-1">四. 生成签名证书 <a class="header-anchor" href="#四-生成签名证书" aria-label="Permalink to &quot;四. 生成签名证书&quot;">​</a></h2><p>生成 Android 平台签名证书（.keystore）是用于对应用进行数字签名以确保应用的安全性和完整性。下面是一个简单的 Android 平台签名证书生成指南，请参考：</p><h3 id="步骤一-安装-jdk-java-development-kit" tabindex="-1">步骤一：安装 JDK（Java Development Kit） <a class="header-anchor" href="#步骤一-安装-jdk-java-development-kit" aria-label="Permalink to &quot;步骤一：安装 JDK（Java Development Kit）&quot;">​</a></h3><ol><li>访问 <a href="https://www.oracle.com/java/technologies/downloads/" target="_blank" rel="noreferrer">Oracle</a> 官方网站，并下载适用于你的操作系统的 JDK 安装程序。</li><li>执行安装程序，并按照提示进行安装。</li></ol><h3 id="步骤二-打开终端或命令提示符" tabindex="-1">步骤二：打开终端或命令提示符 <a class="header-anchor" href="#步骤二-打开终端或命令提示符" aria-label="Permalink to &quot;步骤二：打开终端或命令提示符&quot;">​</a></h3><ol><li>在 Windows 上，按下 Win + R，输入 cmd，然后按回车键打开命令提示符。</li><li>在 Mac 上，打开“应用程序”&gt;“实用工具”&gt;“终端”。</li></ol><h3 id="步骤三-导航到-jdk-的-bin-目录" tabindex="-1">步骤三：导航到 JDK 的 bin 目录 <a class="header-anchor" href="#步骤三-导航到-jdk-的-bin-目录" aria-label="Permalink to &quot;步骤三：导航到 JDK 的 bin 目录&quot;">​</a></h3><p>在终端或命令提示符中，使用以下命令导航到你安装的 JDK 的 bin 目录。根据你的 JDK 版本和安装路径可能有所不同，以下命令仅供参考。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cd C:\\Program Files\\Java\\jdk1.8.0_221\\bin  // Windows示例路径</span></span>
<span class="line"><span>cd /Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/bin  // Mac示例路径</span></span></code></pre></div><h3 id="步骤四-生成签名证书" tabindex="-1">步骤四：生成签名证书 <a class="header-anchor" href="#步骤四-生成签名证书" aria-label="Permalink to &quot;步骤四：生成签名证书&quot;">​</a></h3><p>在终端或命令提示符中，使用以下命令生成签名证书（.keystore 文件）。根据你的需求和项目要求，可以根据需要修改命令中的参数。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>keytool -genkey -v -keystore my-release-key.keystore -alias my-release-key -keyalg RSA -keysize 2048 -validity 10000</span></span></code></pre></div><p>命令解释：</p><ul><li><code>-genkey</code>：生成密钥对和证书。</li><li><code>-v</code>：在终端中显示密钥和证书的详细信息。</li><li><code>-keystore my-release-key.keystore</code>：指定要生成的.keystore 文件名。</li><li><code>-alias my-release-key</code>：指定密钥和证书的别名，可以自定义。</li><li><code>-keyalg RSA</code>：指定密钥算法为 RSA。</li><li><code>-keysize 2048</code>：指定密钥的位数为 2048。</li><li><code>-validity 10000</code>：指定证书的有效期，单位为天。</li></ul><h3 id="步骤五-按照提示填写证书信息" tabindex="-1">步骤五：按照提示填写证书信息 <a class="header-anchor" href="#步骤五-按照提示填写证书信息" aria-label="Permalink to &quot;步骤五：按照提示填写证书信息&quot;">​</a></h3><p>生成签名证书的命令会提示你填写一些证书信息，如证书拥有者的姓名、组织单位名称、城市、州/省、国家等。根据实际情况填写这些信息。</p><h3 id="步骤六-设置密码" tabindex="-1">步骤六：设置密码 <a class="header-anchor" href="#步骤六-设置密码" aria-label="Permalink to &quot;步骤六：设置密码&quot;">​</a></h3><p>生成签名证书时，需要设置一个密码以保护证书的安全性。请记住这个密码，它将用于以后对应用进行签名和更新。</p><p>步骤七：确认生成的签名证书 生成签名证书后，会在当前目录下生成一个名为 my-release-key.keystore 的文件。请确保将这个文件妥善保存，并备份好。</p><p>生成签名证书后，你就可以使用它对你的 Android 应用进行签名了。在打包应用时，通过引用签名证书，可以验证应用的身份和完整性。</p><blockquote><p>请注意，签名证书是非常重要的，请妥善保管好它，并谨慎分享证书文件和相关密码，以免引发安全问题。</p></blockquote><h2 id="五-配置应用" tabindex="-1">五. 配置应用 <a class="header-anchor" href="#五-配置应用" aria-label="Permalink to &quot;五. 配置应用&quot;">​</a></h2><h3 id="_1-配置应用基础信息" tabindex="-1">1. 配置应用基础信息 <a class="header-anchor" href="#_1-配置应用基础信息" aria-label="Permalink to &quot;1. 配置应用基础信息&quot;">​</a></h3><p>在基础配置页签，填写应用名称、应用描述、应用版本及应用版本号等基本信息，如下图所示：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/586caa76396648b98b76134ade446b5f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1077&amp;h=681&amp;s=107364&amp;e=png&amp;b=fefaed" alt="image.png"></p><blockquote><p>说明：</p><p>应用版本名称为一个字符串，例如：1.0.0，通常代表同一个应用不同的版本名称；</p><p>应用版本号是一个 number 类型的数字，通常从 1 开始依次累加，从根本上用来区别不同版本，主要用来版本更新覆盖等。</p></blockquote><h3 id="_2-配置应用图标" tabindex="-1">2. 配置应用图标 <a class="header-anchor" href="#_2-配置应用图标" aria-label="Permalink to &quot;2. 配置应用图标&quot;">​</a></h3><p>主要用来配置应用在桌面上的图标显示，这里需要配置不同分辨率的图标，主要是为了在不同屏幕分辨率的手机下避免失真效果。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dba8d8bb8ee40f9b3326029c6f14e67~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=257&amp;h=66&amp;s=17568&amp;e=png&amp;b=62879a" alt="image.png"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f417a876e2a04c0f8314fe6e8e8ae887~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1077&amp;h=689&amp;s=129535&amp;e=png&amp;b=fefaeb" alt="image.png"></p><blockquote><p><strong>小技巧</strong>：</p><p>我通常是让 UI 同学 出一张大分辨率尺寸的图片，利用 HBuilderX 工具一键生成所需要的各种不同分辨率的图片，如上图所示，自动生成图标功能，方便快捷。</p></blockquote><h3 id="_3-配置应用模块" tabindex="-1">3. 配置应用模块 <a class="header-anchor" href="#_3-配置应用模块" aria-label="Permalink to &quot;3. 配置应用模块&quot;">​</a></h3><p>应用模块主要会涉及到一些真机的能力，比如：使用照相机、蓝牙、相册、定位等功能，也可以配置一些 uniapp 已经支持的第三方插件配置，比如：第三方地图（高德、百度等）、第三方分享、友盟统计等。如下图所示进行按需选择。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a68c2108b2f429ea8d21f6af30d1989~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=858&amp;h=762&amp;s=160774&amp;e=png&amp;b=fefaea" alt="image.png"></p><p>目前在 uni-app 中所涉及的 Android 模块配置模块及三方 SDK 主要有以下几个，均可以在 HBuilderX 中进行选择配置</p><ul><li>Geolocation (定位)</li><li>Push (消息推送)</li><li>Share (分享)</li><li>Oauth (登录鉴权)</li><li>Map (地图)</li><li>Payment (支付)</li><li>Speech (语音输入)</li><li>Statistic (统计)</li><li>FacialRecognitionVerify (实人认证)</li><li>uni-AD</li><li>Android X5 Webview (腾讯 TBS)</li></ul><blockquote><p><strong>不过需要注意的是</strong>，如果没有使用某一些模块功能，请不要勾选，因为你每选择一个模块，将会增大你的应用体积。切记要按需选择。</p></blockquote><h3 id="_4-配置应用权限" tabindex="-1">4. 配置应用权限 <a class="header-anchor" href="#_4-配置应用权限" aria-label="Permalink to &quot;4. 配置应用权限&quot;">​</a></h3><p>在 App 权限一栏中，根据应用的需求，勾选对应的权限，通常有一些所必要的权限，下面我进行列举，其他的按照应用内所设计的权限进行添加即可。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5012de8b27f84a17aa87d1f81156756c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=828&amp;h=539&amp;s=118692&amp;e=png&amp;b=fefaea" alt="image.png"></p><p>我总结了一下我目前的一个最简单的 App 常用的权限有：（仅涉及到扫码功能）</p><ol><li><p><code>&lt;uses-feature android:name=&quot;android.hardware.camera&quot;/&gt;</code> 指定了应用需要使用相机功能。用于在应用中拍摄照片、录制视频或进行其他与相机相关的操作。</p></li><li><p><code>&lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot;/&gt;</code> 指定了应用需要使用相机的自动对焦功能。用于在应用中实现相机对焦功能，以确保拍摄的照片或视频清晰。</p></li><li><p><code>&lt;uses-permission:name=&quot;android.permission.CAMERA&quot;/&gt;</code> 允许应用访问设备的相机。用于应用在运行时获取相机的访问权限，可以进行拍摄、录制等操作。</p></li><li><p><code>&lt;uses-permission android:name=&quot;android.permission.FLASHLIGHT&quot;/&gt;</code> 允许应用控制设备的闪光灯。用于应用在需要时打开和关闭设备的闪光灯。</p></li><li><p><code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</code> 允许应用访问互联网。用于应用在需要联网的功能中实现数据的传输和获取。</p></li><li><p><code>&lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot;/&gt;</code> 允许应用挂载和卸载文件系统。用于应用在需要读取和写入外部存储设备（如 SD 卡）时进行相关操作。</p></li><li><p><code>&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;</code> 允许应用向外部存储设备写入数据。用于应用在需要保存文件到外部存储设备时进行相关操作。</p></li><li><p><code>&lt;uses-permission android:name=&quot;android.permission.WRITE_SETTINGS&quot;/&gt;</code> 允许应用修改系统设置。用于应用在需要修改设备设置（如音量、显示亮度等）时进行相关操作。</p></li></ol><p>这些权限在安卓应用开发中常见且常用，根据应用的实际需求，可以在清单文件（<strong>manifest.json</strong>）中声明和使用这些权限。确保应用以正确、安全的方式使用这些功能和资源，例如相机、闪光灯、互联网访问、外部存储等。</p><p>请注意，在 Android 6.0（API 级别 23）及以上版本，部分权限属于危险权限（<strong>Dangerous Permissions</strong>）。用户在安装应用时需要授予这些权限，否则应用将无法正常使用对应的功能。在使用这些权限时，应遵循 Android 官方的权限管理原则。</p><blockquote><p>基本上完成上面的几个 App 配置就差不多了，后续可以根据自己对项目的深入程度，定向的做一下删减或增加。</p></blockquote><h2 id="六-真机调试" tabindex="-1">六. 真机调试 <a class="header-anchor" href="#六-真机调试" aria-label="Permalink to &quot;六. 真机调试&quot;">​</a></h2><p>在打包引用之前，我们首先要经过真机测试，保证所要打包的代码在真机环境下运行没有问题，才可以启动打包程序，可以采用以下步骤进行连接安卓手机进行真机调试</p><ol><li>首先通过 USB 连接安卓手机，并打开开发者选项，允许 USB 调试开关打开</li><li>选择运行到 Android App 基座即可选择你在上一步连接电脑的安卓手机，确认运行就可以了</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b6baa2a5f144fcfb3ba1a139ed27f4e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=487&amp;h=241&amp;s=82920&amp;e=png&amp;b=ecece2" alt="image.png"></p><blockquote><p>说明：如果在这个地方检测不到你的真机设备，说明手机和电脑通过 USB 未真正连接成功，通常的解决方案是下载一个 360 手机助手、豌豆荚、应用宝等第三方应用，这些应用会安装一些必备的驱动，从侧面解决你的连接调试问题。</p></blockquote><p>真机调试主要是测试你的代码运行情况，避免频繁使用云打包带来的延时、效率低下的问题。避免编写一行代码几秒钟，打包一次 5 分钟的尴尬境地，大幅度的降低了开发效率。</p><h2 id="七-云打包" tabindex="-1">七. 云打包 <a class="header-anchor" href="#七-云打包" aria-label="Permalink to &quot;七. 云打包&quot;">​</a></h2><h3 id="_1-发行" tabindex="-1">1. 发行 <a class="header-anchor" href="#_1-发行" aria-label="Permalink to &quot;1. 发行&quot;">​</a></h3><p>打开 HBuilderX 的工具栏点击工具栏参数界面的 “<strong>发行</strong>” 按钮，可以看到有如下的菜单提供选择，下面分别对 App 发行的选项进行说明：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/890b608179a44e3eafb17a7a38e170ba~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=485&amp;h=525&amp;s=150420&amp;e=png&amp;b=f0efe2" alt="image.png"></p><ol><li><strong>原生 App - 云打包</strong></li></ol><p>这个功能是我们接下来要使用的重点功能，主要用来打包 App 的配置项，包括 Android 配置和 iOS 配置，接下来会进行详细的说明。</p><ol start="2"><li><strong>原生 App - 查看云打包状态</strong></li></ol><p>很简单，这个功能主要是用来发布云打包请求之后，查看目前所请求的云打包状态，是否打包成功，如下图展示。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68bbe98f73f84caf8b4b8818999dba06~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1023&amp;h=134&amp;s=106080&amp;e=png&amp;b=fdfaf3" alt="image.png"></p><ol start="3"><li><strong>原生 App - 本地打包</strong></li></ol><p>这个功能主要是生成本地打包 App 资源，然后配合 Android Studio 进行离线打包。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c0ed77309804bca9f24dbfc567c9afc~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=503&amp;h=175&amp;s=66552&amp;e=png&amp;b=efeee7" alt="image.png"></p><p>运行该指令，主要会将你的项目生成 一个 <strong>www</strong> 的文件夹，这是 App 离线 资源，主要包含以下内容。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fc292629a884d87af5195148b9feac0~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=902&amp;h=532&amp;s=141078&amp;e=png&amp;b=fefefe" alt="image.png"></p><p>这种方式，如果你想要深入了解的话，请参考以下链接： <a href="https://nativesupport.dcloud.net.cn/AppDocs/usesdk/android.html" target="_blank" rel="noreferrer">App 离线打包</a></p><ol start="4"><li><strong>原生 App - 制作应用 wgt 包</strong></li></ol><p>这个功能其实很有用，其主要生成 H5 的资源包，主要用于应用热更新，解决频繁的整包更新。如果你的应用使用了热更新方案，那么这个你将会时常用到。</p><h3 id="_2-云打包" tabindex="-1">2. 云打包 <a class="header-anchor" href="#_2-云打包" aria-label="Permalink to &quot;2. 云打包&quot;">​</a></h3><p>点击 “<strong>原生 App - 云打包</strong>” 按钮，HBuilderX 将打开打包配置界面，主要填写好下面几个参数，即可实现云打包。主要填写的相关信息如下：</p><ul><li>Android 包名</li><li>证书的相关信息（上文中我们已经生成了相关证书） <ul><li>证书文件</li><li>证书别名</li><li>证书密码</li></ul></li><li>选择传统打包或快速安心打包 <ul><li>主要区别在于是否上传证书及代码</li></ul></li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e70b2b4ae3644b0e8a6c6abde0fdf761~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=759&amp;h=922&amp;s=128855&amp;e=png&amp;b=fcfcfc" alt="image.png"></p><h2 id="八-总结一些坑" tabindex="-1">八. 总结一些坑 <a class="header-anchor" href="#八-总结一些坑" aria-label="Permalink to &quot;八. 总结一些坑&quot;">​</a></h2><h3 id="_1-上线-google-play-应用市场" tabindex="-1">1. 上线 Google Play 应用市场 <a class="header-anchor" href="#_1-上线-google-play-应用市场" aria-label="Permalink to &quot;1. 上线 Google Play 应用市场&quot;">​</a></h3><ol><li>确保将 HBulider X 升级到 <strong>3.2.15+版本</strong>，否则 App 将会出现问题</li><li>App 提交云端打包时请勾选“<strong>GooglePlay(AAB)</strong>”渠道，生成.aab 格式的应用</li><li>不能直接下载 apk 方式安装应用，需引导用户到 <strong>Google Play</strong> 安装</li><li>不能存在<strong>动态加载代码</strong>行为</li><li>“App 常用其它设置”中需要将 <strong>targetSdkVersion</strong> 设置值大于等于 <strong>30</strong></li><li>务必在 Android11 设备上进行测试，确保应用所有功能可以正常运行</li><li><strong>不能包含安装应用权限</strong>，在 App 权限配置中不要勾选 android.permission.INSTALL_PACKAGES、android.permission.REQUEST_INSTALL_PACKAGES 权限</li></ol><h3 id="_2-应用市场隐私审核不通过" tabindex="-1">2. 应用市场隐私审核不通过 <a class="header-anchor" href="#_2-应用市场隐私审核不通过" aria-label="Permalink to &quot;2. 应用市场隐私审核不通过&quot;">​</a></h3><p>目前不管是上架任何的应用市场，在首次安装应用或更新高版本的应用时，必须首要弹出应用隐私弹窗，用户进行阅读和同意，其次会检测应用获取的隐私条目和隐私政策是否匹配，不匹配也会被拒绝。以华为应用市场为例，下图是在上架华为应用市场时隐私不匹配被拒绝的案例。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/039c37e4067e4ffcb0bdde1120414d88~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=960&amp;h=399&amp;s=143044&amp;e=png&amp;b=fbfbfb" alt="image.png"></p><p align="center"><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/15b867fa879a4c51a27e7b810a48272c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=339&amp;h=721&amp;s=74983&amp;e=png&amp;b=05182d" alt="image.png" width="40%"></p><p align="center">App应用内隐私弹窗提示案例</p><h3 id="_3-不要频繁的使用云打包" tabindex="-1">3. 不要频繁的使用云打包 <a class="header-anchor" href="#_3-不要频繁的使用云打包" aria-label="Permalink to &quot;3. 不要频繁的使用云打包&quot;">​</a></h3><p>DCloud 官方为了节流，做了一些打包次数的限制，官方说明：打包不是为了测试应用，而是为了发布应用。所以频繁的打包超出一定限制后（我当时是每天 5 次，不知道现在是否有变化），当天会禁止你再次打包。</p><p>为了解决这个问题，你可以“制作自定义调试基座”，然后运行到手机，使用自定义基座运行调试，如下图所示：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe9cde285416401e9a088182c75a7647~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1282&amp;h=460&amp;s=237357&amp;e=png&amp;b=f8f6ee" alt="image.png"></p><h3 id="_4-应用包体积特别大" tabindex="-1">4. 应用包体积特别大 <a class="header-anchor" href="#_4-应用包体积特别大" aria-label="Permalink to &quot;4. 应用包体积特别大&quot;">​</a></h3><p>上文已经有提到过，可能是由于打包了第三方模块导致的应用包体积变大，具体可以参考以下步骤进行排除：</p><ul><li>取消无用的 App 第三方模块的勾选，上文提到过；</li><li>检查代码中是否有引用的相关模块；</li><li>说到底是被 uniapp 卡脖子了，云打包确实会打包一些无用的插件，但是官方不解决，没有办法，其次你也可以使用离线打包试一下，但是效果不怎么理想。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>通过以上内容的了解，你应当学习了如何使用 uni-app 框架和 HBuilderX 工具来打包生成安卓应用。还大体了解了一些打包 App 及上架应用市场的注意事项及解决方案。</p><p>你可以按照这个步骤一步步操作，将你的 uni-app 项目转化为安卓应用，并在安卓设备上运行和测试，祝你成功。</p><p>由于我本身不是专业的安卓开发人员，如有不正确的地方，敬请指出。</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><p><a href="https://ask.dcloud.net.cn/article/35777" target="_blank" rel="noreferrer">Android 平台签名证书生成指南</a></p><p><a href="https://nativesupport.dcloud.net.cn/AppDocs/usemodule/androidModuleConfig/geolocation.html" target="_blank" rel="noreferrer">Android 模块配置</a></p><p><a href="https://nativesupport.dcloud.net.cn/AppDocs/usesdk/android.html" target="_blank" rel="noreferrer">App 离线打包</a></p>`,109);function s(d,c,m,u,h,b){const a=l("ArticleFooter");return t(),p("div",null,[n,i(a,{link:["juejin::https://juejin.cn/post/7296317316206411787","weixin::https://mp.weixin.qq.com/s/hztgJFzR48th0OP3XcbrmA","yuque::https://www.yuque.com/anyup/uniapp/atg07ko13urzund1","csdn::https://blog.csdn.net/qq_24956515/article/details/141716906"]},null,8,["link"])])}const k=e(r,[["render",s]]);export{f as __pageData,k as default};
