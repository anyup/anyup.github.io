import{_ as i,c as a,I as n,aU as p,o as t,E as h}from"./chunks/framework.CpXV_ol5.js";const F=JSON.parse('{"title":"JS设计模式之“语言之魂” - 原型模式","description":"","frontmatter":{"title":"JS设计模式之“语言之魂” - 原型模式"},"headers":[],"relativePath":"zh/blog/design-pattern/创建型-原型模式.md","filePath":"zh/blog/design-pattern/创建型-原型模式.md","lastUpdated":1727083629000}'),e={name:"zh/blog/design-pattern/创建型-原型模式.md"},l=p(`<h1 id="创建型-原型模式" tabindex="-1">创建型 - 原型模式 <a class="header-anchor" href="#创建型-原型模式" aria-label="Permalink to &quot;创建型 - 原型模式&quot;">​</a></h1><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ad7f82bcbc743b5a5ac34dfd74e3352~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=664&amp;h=329&amp;s=115030&amp;e=png&amp;b=128383" alt="image.png"></p><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>当我们学习<code>JavaScript</code>的时候，经常会听到原型（<code>prototype</code>)、原型链（<code>prototype chain</code>）和原型模式（<code>prototype pattern</code>）这些概念，它们之间有什么关联呢？怎么样才能使用好原型模式呢？</p><h2 id="一-语言之魂-原型模式" tabindex="-1">一. “语言之魂” - 原型模式 <a class="header-anchor" href="#一-语言之魂-原型模式" aria-label="Permalink to &quot;一. “语言之魂” - 原型模式&quot;">​</a></h2><p align="center"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/11ab5c23d6c4417883ae74153467def6~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=539&amp;h=300&amp;e=png&amp;b=d1b7d5" alt="829语言之魂-1.png"></p><h3 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h3><p>原型模式是<code>JavaScript</code>语言的核心机制之一，是<code>JavaScript</code>中最基本的设计模式，因此被称为“<strong>语言之魂</strong>”，要想在项目开发使用好原型模式，我们必须要了解原型以及原型链的概念，从而才会理解它们和原型模式之间的关系：</p><ol><li><p>原型（<code>prototype</code>）： 原型是 JavaScript 中对象的一个属性，它允许对象继承属性和方法。每个对象都有一个原型对象，对象可以通过<code>__proto__</code>属性来访问自己的原型对象。原型对象可以包含属性和方法，并且可以通过对象实例访问和共享。</p></li><li><p>原型链（<code>prototype chain</code>）： 原型链是一通过原型对象之间的链式关系实现对象属性和方法的继承和共享机制。原型链通过对象的<code>__proto__</code>属性指向原型对象，从而形成一个原型的层级链条。访问一个对象的属性或方法时，JavaScript 会沿着原型链向上查找，直到找到或者到达原链的末端（Object）。这样，对象可以继承原型对象的属性方法，实现了属性和方法的共享。</p></li><li><p>原型模式（<code>prototype pattern</code>）： 原型模式是一种设计模式，它利用<code>JavaScript</code>中的原型机制来创建对象。通过定义构造函数，并将构造函数的原对象设置为一个模板，可以基于原型关系来实现对象的创建和属性的继承。通过使用原型模式，可以避免在每个对象实例中重复定义相同的属性和方法，实现了对象的复用和提升性能。</p></li></ol><h3 id="关系" tabindex="-1">关系 <a class="header-anchor" href="#关系" aria-label="Permalink to &quot;关系&quot;">​</a></h3><p>每个对象都有一个原型，并且原型对象之间形成了原型链的关系。原型链通过<code>__proto__</code>属性连接起来，实了属性和方法的继承和共享。原型模式则是利用原型链关系来创建对象，并实现了对象创建和属性继承的设计模式。以可以说，原型是原型链的基础，原型链是实现对象属性和方法继承的机制，而原型模式是基于原型链关系的对象创建属性继承的设计模式。</p><blockquote><p>本文不过多的讲解原型及原型链，感兴趣可以阅读之前文章：<a href="https://juejin.cn/post/7273764921455280165" target="_blank" rel="noreferrer">深入理解对象的原型和原型链</a></p></blockquote><h2 id="二-如何使用原型模式" tabindex="-1">二. 如何使用原型模式 <a class="header-anchor" href="#二-如何使用原型模式" aria-label="Permalink to &quot;二. 如何使用原型模式&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dcc7a802284b415f96c0e3ba8cef75ee~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1315&amp;h=500&amp;e=png&amp;b=fcf7f6" alt="原型模式.png"></p><p>当使用原型模式时，我们可以按照以下步骤来创建和使用对象的实例：</p><ol><li><strong>定义原型对象</strong>：创建一个包含需要共享的属性和方法的原型对象。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> personPrototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Hello, my name isthis.name}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li><strong>创建新的对象实例并继承型</strong>：使用\`Object.create 方法创建一个新的对象实例，并将其型指向原型对象。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> person1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(personPrototype)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person1.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Alice&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Hello, my name is Alice</span></span></code></pre></div><ol start="3"><li><strong>在新对象实例上定义自己的属性和方法</strong>：根据需要，在新的对象实例上定义自己的属性和方法。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> person2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(personPrototype)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person2.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Bob&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person2.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">introduce</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`I am \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} and I am \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} years old.\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">introduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：I am Bob and I am 30 years old.</span></span></code></pre></div><p>在上面的例子中，我们首先定义了一个原型对象<code>personPrototype</code>，它包含了一个<code>greet</code>方法。接着，我们使用<code>Object.create()</code>方法创建了两新的对象实例<code>person1</code>和<code>person2</code>，并且它们都继承了<code>personPrototype</code>属性和方法。</p><p>然后我们为<code>person1</code>实例设置了<code>name</code>属性，并调用了<code>greet</code>方法，输出了相应结果。同样地，我们也为<code>person</code>实例设置了<code>name</code>和<code>age</code>属性，并定义了一个<code>introduce</code>方法，用于打印自我介绍的信息。</p><p>通过原型模式，我们根据需要创建多个对象实例，并且这些实例可以共享同一个原型对象的属性和方法。这样既节省了内存空间，也可以实现属性和方法的共享和继承。</p><p><strong>注意：</strong> 在修改对象实例的属性时，可能会影响原型和其他实例。对于每个对象实例而言，如果希望拥有独立的属性，则需要在对象实例上重新定义这些属性，而不是在原型对象上定义。</p><h2 id="三-深入原型模式的实现原理" tabindex="-1">三. 深入原型模式的实现原理 <a class="header-anchor" href="#三-深入原型模式的实现原理" aria-label="Permalink to &quot;三. 深入原型模式的实现原理&quot;">​</a></h2><p><code>JavaScript</code>原型模式的实现原理涉及到原型链的概念。每个对象都有一个隐藏的<code>__proto__</code>属性，指向其原型对象（即它的父对象）。原型链实际上就是通过<code>__proto__</code>属性将对象连接起来形成的一条链。</p><p>当我们访问一个对象的属性或方法时，<code>JavaScript</code>引擎首先在当前对象中查找，如果找不到，就会沿着原型链向上查找，直到找到对应的属性或方法，或者到达原型链的顶端（<code>null</code>）为止。</p><p>在 JavaScript 中，当我们创建一个对象时，可以通过<code>Object.create()</code>方法指定一个原型对象，从而创建一个新的对象并继承原型对象的属性和方法。新对象的<code>__proto__</code>指针会指向原型对象。</p><p>相应地，我们还可以使用<code>Object.getPrototypeOf()</code>方法获取一个对象的原型对象，或者使用<code>Object.setPrototypeOf()</code>方法设置一个对象的原型对象。</p><p>当我们访问对象的属性或方法时，<code>JavaScript</code>引擎会按照以下步骤进行查找：</p><ol><li><p>首先，它会查找对象本身是否具有相应的属性或方法。如果找到，就直接使用该属性或方法。</p></li><li><p>如果对象本身没有相应的属性或方法，它会通过<code>__proto__</code>指针指向的原型对象去查找。如果原型对象具有相应的属性或方法，就直接使用。</p></li><li><p>如果原型对象没有相应的属性或方法，引擎会继续沿着原型链向上查找，直到找到对应的属性或方法，或者到达原型链的顶端（<code>null</code>）</p></li><li><p>如果最终没有找到相应的属性或方法，引擎会返回<code>undefined</code>。</p></li></ol><p>这种通过<code>__proto__</code>指针沿着原型链查找的机制，就是 JavaScript 原型模式的实现原理。通过原型的继承，我们可以实现对象之间的属性和方法的共享。</p><p>需要注意的是，当我们修改一个对象的属性时，如果该属性位于原型链上，那么会直接修改原对象的属性值。所以，如果想要每个对象实例都具有独立的属性，应该对象实例上重新定义这些属性，而不是在原型上定义。</p><p>总结一下，<code>JavaScript</code>原型模式通过原型链实现对象之间属性和方法继承。通过原型链的机制，我们可以在对象实例之间共享属性和方法，并实现属性和方法的查找。这种机制提高了对象的重用性，并使代码更加简洁和易于维护。</p><h2 id="四-原型模式的应用场景" tabindex="-1">四. 原型模式的应用场景 <a class="header-anchor" href="#四-原型模式的应用场景" aria-label="Permalink to &quot;四. 原型模式的应用场景&quot;">​</a></h2><p>原型模式在 JavaScript 中有广泛的应用场景，下面是几种常见的应用场景：</p><h3 id="_1-创建对象实例并共享方法" tabindex="-1">1. 创建对象实例并共享方法 <a class="header-anchor" href="#_1-创建对象实例并共享方法" aria-label="Permalink to &quot;1. 创建对象实例并共享方法&quot;">​</a></h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38f4c92ed83c4dd2b14f5d317067edca~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=893&amp;h=568&amp;e=png&amp;b=faf2f1" alt="image.png"></p><p align="center">小猫对象</p><p>假设我们需要创建多个具有相同方法的对象实例，比如创建多个 <strong>小猫</strong> 的对象实例，并且它们都具有相同的方法，比如<code>meow()</code>方法。可以使用原型模式在猫的原型对象上定义<code>meow()</code>方法，并将多个猫的对象实例的原型指向该原型对象，这样它们就共享了相同的方法。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">meow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; says meow!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cat1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Tom&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cat2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Jerry&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cat1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">meow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Tom says meow!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cat2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">meow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Jerry says meow!</span></span></code></pre></div><h3 id="_2-对象的继承" tabindex="-1">2. 对象的继承 <a class="header-anchor" href="#_2-对象的继承" aria-label="Permalink to &quot;2. 对象的继承&quot;">​</a></h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/397a02bc6a25444d800f6b7227c3c228~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=811&amp;h=348&amp;e=png&amp;b=fefdfd" alt="image.png"></p><p align="center">各种不同形状的图形对象</p><p>假设我们有一个基础对象<strong>各种个样的图形</strong><code>Shape</code>，它具有<code>getArea()</code>方法。我们想要创建一个继承自<code>Shape</code>的<code>Rectangle</code>对象，它具有自己的<code>width</code>和<code>height</code>属性，并且可以调用父类的<code>getArea()</code>方法。可以使用原型模式，将<code>Shape</code>的实例设置为<code>Rectangle</code>对象的原型，实现继承关系。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getArea</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rectangle</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getArea</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.height</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getArea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：50</span></span></code></pre></div><h3 id="_3-动态扩展和修改对象" tabindex="-1">3. 动态扩展和修改对象 <a class="header-anchor" href="#_3-动态扩展和修改对象" aria-label="Permalink to &quot;3. 动态扩展和修改对象&quot;">​</a></h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff486c0c14fb481d96c9a3b5a3c08d51~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=894&amp;h=535&amp;s=277167&amp;e=png&amp;b=fdfaf9" alt="image.png"></p><p>假设我们有一个基础对象<code>Person</code>，它具有<code>name</code>属性和<code>sayHello()</code>方法。我们想要动态地为对象添加新的方法，例如<code>sayGoodbye()</code>方法。可以直接在<code>Person</code>的原型对象上添加新的方法，而不需要逐个修改现有对象实例。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, my name is &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Hello, my name is John</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayGoodbye</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Goodbye, &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayGoodbye</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Goodbye, John</span></span></code></pre></div><p>以上是几个典型的 JavaScript 原型模式的应用场景。通过原型链实现共享属性和方法、继承关系以及动态扩展和修改对象等操作，最终提高代码的重用性和灵活性。</p><h2 id="五-使用原型模式的优缺点" tabindex="-1">五. 使用原型模式的优缺点 <a class="header-anchor" href="#五-使用原型模式的优缺点" aria-label="Permalink to &quot;五. 使用原型模式的优缺点&quot;">​</a></h2><p>通过以上对原型模式的理解，我们可以总结出使用原型模式有以下的优点：</p><ol><li><p><strong>重用性和性能优化</strong>：原型模式可以将方法和属性共享给所有实例化的对象，避免了在每个对象实例中重复创建相同的方法和属性。这提高了代码的重用性，减少了内存消耗，提升了性能。</p></li><li><p><strong>灵活的对象扩展</strong>：使用原型模式，可以动态地向原型对象添加、修改和删除属性和方法，这样会自动反映在所有对象实例中。这种灵活性使得可以方便地扩展和修改对象的功能，而无需修改已有的对象实例。</p></li><li><p><strong>实现对象的继承</strong>：原型模式允许将一个对象设置为另一个对象的原型，从而实现对象之间的继承关系。这样，在子对象上可以访问和重写父对象的属性和方法，实现了类似于面向对象的继承机制。</p></li></ol><p>然而，原型模式也有一些缺点：</p><ol><li><p><strong>属性共享和修改的潜在问题</strong>：当多个对象实例共享一个原型对象时，如果对原型对象的属性进行修改，会影响到所有对象实例。这可能会导致意外的副作用，尤其是在动态修改原型对象时需要谨慎对待。</p></li><li><p><strong>难以实现私有属性和方法</strong>：在原型模式中，所有的属性和方法都是公开的，无法实现对外隐藏的私有属性和方法。虽然有一些技巧可以模拟私有属性，但并不能真正实现封装性。</p></li><li><p><strong>构造函数参数的传递</strong>：在原型模式中，构造函数的参数只能通过对象实例的属性赋值来传递。这可能会导致在创建对象实例时的参数传递不够直观和灵活。</p></li></ol><p>综上所述，JavaScript 原型模式具有<strong>重用性</strong>、<strong>性能优化</strong>、<strong>灵活的对象扩展</strong>和对<strong>象继承</strong>的优点，但也存在<strong>属性共享</strong>和<strong>修改</strong>问题、<strong>难以实现私有和方</strong>法，以及<strong>构造函数参数传递的局限</strong>缺点。在使用原型模式时，需要注意这些特点和限制，确保合理使用以符合需求和预期。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>原型模式是<code>JavaScript</code>语言的核心机制之一，同时也是<code>JavaScript</code>中最基本的设计模式，因此被称为“<strong>语言之魂</strong>”，通过对象的原型实现对象的继承和属性共享，同时基于原型链的机制实现对象的创建和属性的继承，原型模式在<code>JavaScript</code>中具有广泛的应用场景，使用原型模式可以节省内存，增加灵活性和可扩展性等。</p><p>但是在使用原型模式时，需要注意以下几点：</p><ol><li><p><strong>修改对象实例的属性可能会影响原型和其他实例</strong>：当我们修改对象实例的属性时，可能会影响到原型和其他实例。如果希望每个对象实例都有独立的属性，需要在对象实例重新定义这些属性，而不是在原型对象上定义。</p></li><li><p><strong>原型链的长度和效率</strong>：随着原型链的增长，查找属性和方法可能会变慢。因此，需要注意原型链的长度，并合理设计对象的层级关系。</p></li><li><p><strong>属性和方法的屏蔽</strong>：如果对象实例和原型上都定义了同名的属性或方法对象实例上的属性或方法会屏蔽原型上的对应属性或方法。因此，在设计对象和原型时，需要属性和方法的命名，避免冲突。</p></li></ol>`,62);function k(r,d,o,E,c,g){const s=h("ArticleFooter");return t(),a("div",null,[l,n(s,{link:"https://juejin.cn/post/7278104060237266980"})])}const C=i(e,[["render",k]]);export{F as __pageData,C as default};
