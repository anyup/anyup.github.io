import{_ as a,c as i,I as e,aU as t,o as n,E as p}from"./chunks/framework.CpXV_ol5.js";const b=JSON.parse('{"title":"使用 nvm 为多项目设置不同 Node.js 环境，被同事们集体点赞了 ！","description":"","frontmatter":{"title":"使用 nvm 为多项目设置不同 Node.js 环境，被同事们集体点赞了 ！"},"headers":[],"relativePath":"zh/blog/tools/NVM设置多项目不同Node.js环境.md","filePath":"zh/blog/tools/NVM设置多项目不同Node.js环境.md","lastUpdated":1725606759000}'),o={name:"zh/blog/tools/NVM设置多项目不同Node.js环境.md"},l=t('<h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>昨天开会时，突然一位前端开发同事埋冤到：”我太痛苦了，我有好几个项目要开发，关键是使用的 Node.js 版本不一致，每次运行不同的项目还得使用 nvm 重新切换一下 Node.js 版本，我快要崩溃了！“</p><p>听到这里，我忍不住要为你赋能一下，能显著提升你的开发效率，解决你的心里崩溃，让你快乐开发。</p><blockquote><p>nvm 支持为不同的项目设置不同的 Node.js 版本</p></blockquote><p>听到这，我看到他脸上有了快乐的笑容，其他同事也在向我问询。</p><p>什么？竟然咱们这么多开发同事不知道吗？稍后我整理了一下方案分享了出去，同事们给我了一个大大的赞 👍</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/ad8998c87e2648488171cae1fe0745cd~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgYW55dXA=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNDIzMDU3NjQ3MjU4OTk3NiJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1726119648&amp;x-orig-sign=puPQFTWTzwEe0ZvBuecnuUVwogE%3D" alt="image.png"></p><p>接下来，让我们一块来认识一下 nvm，并且看一下如何使用 nvm 设置项目级版本吧！</p><h2 id="一、nvm-简介" tabindex="-1">一、nvm 简介 <a class="header-anchor" href="#一、nvm-简介" aria-label="Permalink to &quot;一、nvm 简介&quot;">​</a></h2><p>nvm 是一个免费开源的命令行工具，允许在一台计算机上安装和切换多个 Node.js 版本。它支持 Linux、macOS 和 Windows 等操作系统，是许多开发者的首选工具。</p><p>在多项目开发环境中，不同的项目可能依赖于 Node.js 的不同版本。例如，一个旧项目可能需要 Node.js v12 以确保兼容性，而新项目可能要求 v18 或更高版本以利用最新的特性和性能改进。在这种情况下，手动管理每个项目的 Node.js 版本变得既繁琐又容易出错。</p><p>幸运的是，nvm（Node Version Manager）提供了一个优雅的解决方案，使得跨项目管理 Node.js 版本变得简单高效。</p><h2 id="二、安装-nvm" tabindex="-1">二、安装 nvm <a class="header-anchor" href="#二、安装-nvm" aria-label="Permalink to &quot;二、安装 nvm&quot;">​</a></h2><h3 id="_1-linux-macos" tabindex="-1">1. Linux/macOS <a class="header-anchor" href="#_1-linux-macos" aria-label="Permalink to &quot;1. Linux/macOS&quot;">​</a></h3><p>打开终端并执行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bash</span></span></code></pre></div><p>或者使用 wget：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -qO-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bash</span></span></code></pre></div><h3 id="_2-windows" tabindex="-1">2. Windows <a class="header-anchor" href="#_2-windows" aria-label="Permalink to &quot;2. Windows&quot;">​</a></h3><p>访问<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noreferrer">nvm for Windows</a>下载并安装。</p><p>安装完成后，可以验证一下你的 nvm 是否安装成功，使用 <code>nvm -v</code> 即可查看你的 nvm 安装版本，如下所示：</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/6218fb9582a64bad9d3b5a0426a23b1f~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgYW55dXA=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNDIzMDU3NjQ3MjU4OTk3NiJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1726119648&amp;x-orig-sign=8Cui8crmrevPvjk2s7bWwQoSLxE%3D" alt="image.png"></p><h2 id="三、使用-nvm-管理-node-js-版本" tabindex="-1">三、使用 nvm 管理 Node.js 版本 <a class="header-anchor" href="#三、使用-nvm-管理-node-js-版本" aria-label="Permalink to &quot;三、使用 nvm 管理 Node.js 版本&quot;">​</a></h2><p>一旦 nvm 安装完成，你就可以开始管理 Node.js 版本了。在这里，我总结一下我日常在使用 nvm 时，最常使用的命令，基本上掌握以下这几种就可以了：</p><h3 id="_1-查看已安装版本" tabindex="-1">1. 查看已安装版本 <a class="header-anchor" href="#_1-查看已安装版本" aria-label="Permalink to &quot;1. 查看已安装版本&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span></code></pre></div><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/3d4f60190f7643fc843dd9ec7c828266~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgYW55dXA=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNDIzMDU3NjQ3MjU4OTk3NiJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1726119648&amp;x-orig-sign=RDAeL2e4YzA0di4TkgLUMXjyQt8%3D" alt="image.png"></p><h3 id="_2-安装新版本" tabindex="-1">2. 安装新版本 <a class="header-anchor" href="#_2-安装新版本" aria-label="Permalink to &quot;2. 安装新版本&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">versio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>例如，安装 Node.js v16.9.0：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16.9.0</span></span></code></pre></div><h3 id="_3-删除版本" tabindex="-1">3. 删除版本 <a class="header-anchor" href="#_3-删除版本" aria-label="Permalink to &quot;3. 删除版本&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uninstall</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">versio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h3 id="_4-切换版本" tabindex="-1">4. 切换版本 <a class="header-anchor" href="#_4-切换版本" aria-label="Permalink to &quot;4. 切换版本&quot;">​</a></h3><p>直接在命令行输入 <code>nvm use</code> 命令可以切换已经安装的 Node.js 版本，例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">versio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>切换到 Node.js v16.9.0：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16.9.0</span></span></code></pre></div><p>注意：以上命令为全局命令，使用完成后全局将生效。比如：使用 <code>nvm use 16.9.0</code> 命令后，我们所有的项目都将切换为使用 Node.js v16.9.0 版本</p><p>其实 nvm 也支持设置项目级别的版本号，即为不同的项目设置不同的 Node.js 版本，接下来我们一起看一下！</p><h2 id="四、使用-nvm-设置项目级版本" tabindex="-1">四、使用 nvm 设置项目级版本 <a class="header-anchor" href="#四、使用-nvm-设置项目级版本" aria-label="Permalink to &quot;四、使用 nvm 设置项目级版本&quot;">​</a></h2><p>在项目根目录下创建或编辑 <code>.nvmrc</code> 文件，指定项目所需版本：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">16.9.0</span></span></code></pre></div><p>下次进入该项目目录时，手动在项目目录下执行 <code>nvm use</code> 会自动使用 <code>.nvmrc</code> 中指定的版本。</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/5df9431c09284e97813782674f8acc95~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgYW55dXA=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNDIzMDU3NjQ3MjU4OTk3NiJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1726119648&amp;x-orig-sign=pz3aHsefQLd%2BklCmzhUw5XEflys%3D" alt="image.png"></p><p>如果你使用 VSCode 开发应用，可以搭配插件 vsc-nvm 自动执行，安装并启用该插件后每次打开项目，<code>nvm use</code> 则自动执行，无需手动执行。</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/8cb4c14e05114533b3cdb45e5bc2d304~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgYW55dXA=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNDIzMDU3NjQ3MjU4OTk3NiJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1726119648&amp;x-orig-sign=JTACEUU1JCaovt4QoVVdJcYNKag%3D" alt="image.png"></p><h2 id="五、实战案例" tabindex="-1">五、实战案例 <a class="header-anchor" href="#五、实战案例" aria-label="Permalink to &quot;五、实战案例&quot;">​</a></h2><p><strong>前提条件</strong>：</p><ul><li>已经安装好了 nvm 以及使用 nvm 安装了所需要的 Node.js 版本</li><li>VSCode 已经安装好了 vsc-nvm 插件（不安装也可以，就是每次打开项目目录时手动执行下 nvm use 即可）</li></ul><p>假设你有两个项目，Project A 需要 Node.js v20.13.1，而 Project B 则需要 v16.9.0。</p><ol><li><p><strong>在 Project A 中</strong>：</p><ul><li><p>在项目根目录下创建 <code>.nvmrc</code> 文件，并写入 <code>20.13.1</code>。</p></li><li><p>每次进入项目目录时，nvm 会自动切换到 v20.13.1。</p></li></ul></li><li><p><strong>在 Project B 中</strong>：</p><ul><li><p>同样在项目根目录下创建 <code>.nvmrc</code> 文件，并写入 <code>16.9.0</code>。</p></li><li><p>当你切换到这个项目时，nvm 会自动使用 v16.9.0。</p></li></ul></li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>nvm 极大地简化了跨项目管理 Node.js 版本的过程，无论是对于个人开发者还是团队协作，都能显著提高开发效率和项目稳定性。</p><p>通过 <code>.nvmrc</code> 文件，每个项目都可以独立于其他项目运行在最佳的 Node.js 版本上，从而避免了版本冲突的问题。同时如果你是使用 VSCode 编辑器，则可以搭配使用 vsc-nvm 插件，实现启动项目自动切换 Node.js 版本，让你有更好的开发体验。</p><p>除了 nvm 以外，也有其他的 Node.js 版本管理工具支持这种操作，例如：<strong>Volta</strong>，也支持为不同项目切换不同的 Node.js 版本。</p><p>没有最好的工具，只有最适合自己的工具！因为我早先使用的是 nvm，所以也就使用 nvm 来管理项目级版本号。</p><p>对 <code>Volta</code> 感兴趣的也可以查看官方文档：<a href="https://volta.sh/" target="_blank" rel="noreferrer">Volta Document</a></p><p>关于 <code>Volta</code> 的使用，请看这篇文章：</p>',59);function h(d,r,c,k,m,g){const s=p("ArticleFooter");return n(),i("div",null,[l,e(s,{link:"https://juejin.cn/post/7392070976060866596"})])}const u=a(o,[["render",h]]);export{b as __pageData,u as default};
