import{_ as i,c as a,I as n,aU as p,o as h,E as l}from"./chunks/framework.CpXV_ol5.js";const F=JSON.parse('{"title":"JS设计模式之适配器模式：接口天然的“翻译官”","description":"","frontmatter":{"title":"JS设计模式之适配器模式：接口天然的“翻译官”"},"headers":[],"relativePath":"zh/blog/design-pattern/结构型-适配器模式.md","filePath":"zh/blog/design-pattern/结构型-适配器模式.md","lastUpdated":1727083629000}'),t={name:"zh/blog/design-pattern/结构型-适配器模式.md"},k=p(`<h1 id="结构型-适配器模式" tabindex="-1">结构型 - 适配器模式 <a class="header-anchor" href="#结构型-适配器模式" aria-label="Permalink to &quot;结构型 - 适配器模式&quot;">​</a></h1><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23c649257d944be994d6a69ef6d348a5~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=665&amp;h=317&amp;s=114824&amp;e=png&amp;b=128383" alt="image.png"></p><h1 id="接口天然的-翻译官-适配器模式" tabindex="-1">接口天然的“翻译官” - 适配器模式 <a class="header-anchor" href="#接口天然的-翻译官-适配器模式" aria-label="Permalink to &quot;接口天然的“翻译官” - 适配器模式&quot;">​</a></h1><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>在软件开发中，我们常常需要与各种各样的外部接口进行交互，包括第三方库、服务或其他系统。然而，这些外部接口的设计可能与我们当前的代码或接口不兼，这就给开发工作带来了一定的挑战。</p><p>这时，适配器模式就派上用场了。适配器模式是一种常用的结构型设计模式，它可以解决不兼容的接口问题，使不同接口之间能够协调工作。适配器模式可以将一个类的接口转换成客户端所期望的另一个接口，使得原本由于接口不匹配而无法一起工作的类能够协同合作。</p><p>适配器模式的使用场景广泛，它能够兼容不同版本、不同厂商提供的类或接口，提高代码的重用性和可维护性。通过引入适配器，我们可以解耦不兼容的接口，保持代码的稳定性，同时能够快速适应变化。</p><p>本文将详细介绍适配器模式的概念、原理和应用场景。我们将从实际案例出发，展示如何使用适配器模式解决真实的问题。通过学习适配器模式，您将能够更好地理解和应用这个强大的设计模式，并在开发中充分发挥其作用。</p><h2 id="一-了解适配器模式" tabindex="-1">一. 了解适配器模式 <a class="header-anchor" href="#一-了解适配器模式" aria-label="Permalink to &quot;一. 了解适配器模式&quot;">​</a></h2><h3 id="什么是适配器模式" tabindex="-1">什么是适配器模式 <a class="header-anchor" href="#什么是适配器模式" aria-label="Permalink to &quot;什么是适配器模式&quot;">​</a></h3><p>适配器模式（<code>Adapter Pattern</code>）是一种结构型设计模式，主要用于解决不同接口之间的兼容性问题。它允许将一个类或对象的接口（方法或属性）转化为另外一个接口，以满足用户需求，使类或对象之间的接口不兼容问题通过适配器得以解决。</p><p><strong>适配器模式的优势</strong>在于它能够解决不同接口之间的兼容性问题，提高代码的重用性和可维护性。它可以应对不同版本、不同厂商提供的类或接口，并通过引入适配器来解耦不兼容的接口，保持代码的稳定性。适配器模式在实际开发中经常被使用，特别是当我们需要与第三方库或系统进行集成时，它能够起到很好的作用。</p><h3 id="适配器模式的组成元素" tabindex="-1">适配器模式的组成元素 <a class="header-anchor" href="#适配器模式的组成元素" aria-label="Permalink to &quot;适配器模式的组成元素&quot;">​</a></h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca8acbd9915a493a8c32bb92cd5e6646~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=970&amp;h=509&amp;s=38690&amp;e=png&amp;b=ffffff" alt="image.png"></p><ol><li><p>目标接口（<code>Target Interface</code>）：目标接口定义了客户端所期望的方法或功能。适配器将被适配者的接口转换成目标接口，使其能够和客户端适配。</p></li><li><p>被适配者（<code>Adaptee</code>）：被适配者是已经存在的类或接口，它包含了需要被适配的功能。被适配者的接口与目标接口不兼容，无法直接和客户端进行交互。</p></li><li><p>适配器（<code>Adapter</code>）：适配器是一个中间层，它将被适配者的接口转换成目标接口，从而使得被适配者能够与客户端适配。适配器通过实现目标接口，并在内部持有一个被适配者的实例。当客户端调用适配器的方法时，适配器会将请求转发给被适配者，并将结果转换成符合目标接口的形式返回给客户端。</p></li><li><p>客户端（<code>Client</code>）：调用适配器来实现与源接口的交互，无需关心适配器内部的具体实现细节。</p></li></ol><p><strong>适配器模式的核心思想</strong>是通过适配器来包装被适配者，使其能够适应目标接口的要求。适配器通过实现目标接口，并在内部持有一个被适配者的实例。当客户端调用适配器的方法时，适配器会将请求转发给被适配者，并将结果转换成符合目标接口的形式返回给客户端。</p><h2 id="二-适配器模式实现方式" tabindex="-1">二. 适配器模式实现方式 <a class="header-anchor" href="#二-适配器模式实现方式" aria-label="Permalink to &quot;二. 适配器模式实现方式&quot;">​</a></h2><h3 id="基于类的适配器模式" tabindex="-1">基于类的适配器模式 <a class="header-anchor" href="#基于类的适配器模式" aria-label="Permalink to &quot;基于类的适配器模式&quot;">​</a></h3><p>基于类的适配器模式利用了 <code>JavaScript</code> 中的类和继承的特性来实现接口的转换。适配器继承自被适配者和实现目标接口，从而同时具有了被适配者的功能和目标接口的定义。</p><p>具体实现步骤如下：</p><ol><li><p>定义目标接口：目标接口是客户端所期望的接口，定义了客户端需要的方法或功能。</p></li><li><p>创建被适配者类：被适配者是已经存在的类，包含了需要被适配的功能。它的接口与目标接口不兼容。</p></li><li><p>创建适配器类：适配器继承自目标接口，同时在内部持有一个被适配者实例。主要是适配器通过继承目标接口，使得它能够被客户端调用，并在内部使用被适配者实例来完成具体的功能。</p></li></ol><p>下面是一个基于类的适配器模式的示例代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义目标接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TargetInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;This method should be implemented.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建被适配者类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Adaptee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  specificRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Specific request is called.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建适配器类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Adapter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TargetInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">adaptee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.adaptee </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> adaptee</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.adaptee.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">specificRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>客户端使用适配器示例</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建被适配者对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> adaptee</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Adaptee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建适配器对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> adapter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Adapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(adaptee)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用目标接口的方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">adapter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>在上面的示例中，<code>TargetInterface</code>定义了目标接口，<code>Adaptee</code>是被适配者类，<code>Adapter</code>是适配器类。适配器类继承自目标接口并在内部持有被适配者实例。当客户端调用适配器的<code>request</code>方法时，适配器会内部调用被适配者的<code>specificRequest</code>方法，从而完成适配器模式的功能。</p><p>通过基于类的适配器模式，我们可以将被适配者的接口转换成目标接口，使其能够与客户端适配，解决不兼容接口的问题。</p><h3 id="基于对象的适配器模式" tabindex="-1">基于对象的适配器模式 <a class="header-anchor" href="#基于对象的适配器模式" aria-label="Permalink to &quot;基于对象的适配器模式&quot;">​</a></h3><p>基于对象的适配器模式利用了 <code>JavaScript</code> 中的对象和组合的特性来实现接口的转换。主要是适配器将目标接口和被适配者进行关联，通过对被适配者进行包装和重定向，来实现接口的转换。</p><p>具体实现步骤如下：</p><ol><li><p>定义目标接口：目标接口是客户端所期望的接口，定义了客户端需要的方法或功能。</p></li><li><p>创建被适配者对象：被适配者是一个已经存在的对象，包含了需要被适配的功能。它的接口与目标接口不兼容。</p></li><li><p>创建适配器对象：适配器对象内部持有一个被适配者对象。适配器通过将被适配者对象的方法重定向到目标接口所定义的方法上来实现接口的转换。</p></li></ol><p>下面是一个基于对象的适配器模式的示例代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义目标接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> targetInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;This method should be implemented.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建被适配者对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> adaptee</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  specificRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Specific request is called.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建适配器对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> adapter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    adaptee.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">specificRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>客户端使用适配器示例</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 直接调用目标接口的方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">adapter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>在上面的示例中，<code>targetInterface</code>定义了目标接口，<code>adaptee</code>是被适配者对象，<code>adapter</code>是适配器对象。适配器对象内部持有被适配者对象，并将被适配者对象的<code>specificRequest</code>方法重定向到目标接口的<code>request</code>方法上。当客户端调用适配器的<code>request</code>方法时，适配器会内部调用被适配者的<code>specificRequest</code>方法，从而完成适配器模式的功能。</p><p>通过基于对象的适配器模式，我们可以将被适配者对象的接口转换成目标接口，使其能够与客户端适配，解决不兼容接口的问题。</p><h2 id="三-实际应用案例" tabindex="-1">三. 实际应用案例 <a class="header-anchor" href="#三-实际应用案例" aria-label="Permalink to &quot;三. 实际应用案例&quot;">​</a></h2><h3 id="外部接口适配" tabindex="-1">外部接口适配 <a class="header-anchor" href="#外部接口适配" aria-label="Permalink to &quot;外部接口适配&quot;">​</a></h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c53339a130a04c2ebe018363538229c3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1000&amp;h=689&amp;s=77850&amp;e=png&amp;b=ffffff" alt="image.png"></p><p>假设我们需要与两个具有不同接口规范的第三方支付平台进行交互，一个是<code>AliPay</code>，另一个是<code>WeChatPay</code>。为了统一两个接口的调用方式，我们可以使用适配器模式来适配不同的接口规范。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// AliPay接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AliPay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  pay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">amount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`AliPay: 支付了 \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">amount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} 元\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// WeChatPay接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeChatPay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  transfer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">amount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`WeChatPay: 转账了 \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">amount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} 元\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 适配器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PaymentAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">payment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.payment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> payment</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  pay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">amount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.payment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AliPay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.payment.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(amount)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.payment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeChatPay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.payment.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transfer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(amount)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;不支持的支付平台&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>使用适配器进行支付</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用适配器进行支付</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> aliPay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AliPay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> weChatPay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeChatPay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> aliPayAdapter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PaymentAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aliPay)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> weChatPayAdapter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PaymentAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(weChatPay)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aliPayAdapter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：AliPay: 支付了 100 元</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">weChatPayAdapter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：WeChatPay: 转账了 200 元</span></span></code></pre></div><p>在上面的示例中，我们定义了 <code>AliPay</code> 和 <code>WeChatPay</code> 两个接口，它们分别用于支付和转账。然后，我们定义了一个适配器 <code>PaymentAdapter</code>，它接受一个具体的支付对象，根据该对象的类型调用相应的方法。</p><p>通过适配器模式，我们可以将不同接口规范的支付平台进行适配，从而实现统一的支付接口，使得我们的代码可以与不同的支付平台进行交互。</p><h3 id="数据格式适配" tabindex="-1">数据格式适配 <a class="header-anchor" href="#数据格式适配" aria-label="Permalink to &quot;数据格式适配&quot;">​</a></h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4d7a39ce36a4d248fa316a5a65efc91~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=954&amp;h=683&amp;s=60300&amp;e=png&amp;b=ffffff" alt="image.png"></p><p>假设我们从不同的数据源中获取数据，其中一个数据源返回的是 <code>XML</code> 格式，另一个数据源返回的是 <code>JSON</code> 格式。为了统一处理这些数据，我们可以使用适配器模式将不同格式的数据适配为统一的格式。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// XML数据源</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;data&gt;&lt;name&gt;John&lt;/name&gt;&lt;age&gt;25&lt;/age&gt;&lt;/data&gt;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JSON数据源</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JSONDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 25}&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 适配器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DataAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">dataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dataSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataSource</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dataSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xmlData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dataSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 将XML数据转换为JSON格式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> jsonData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">convertXMLtoJSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xmlData)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsonData</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dataSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JSONDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dataSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;不支持的数据源格式&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  convertXMLtoJSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">xmlData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 实现将XML转换为JSON的逻辑</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{&quot;name&quot;: &quot;John Doe&quot;, &quot;age&quot;: 25}&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>使用适配器获取数据</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xmlDataSource</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> jsonDataSource</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JSONDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xmlDataAdapter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DataAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xmlDataSource)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> jsonDataAdapter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DataAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jsonDataSource)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xmlDataAdapter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：{&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 25}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jsonDataAdapter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：{&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 25}</span></span></code></pre></div><p>在上面的示例中，我们定义了 <code>XMLDataSource</code> 和 <code>JSONDataSource</code> 两个数据源接口，它们分别返回 <code>XML</code> 格式和 <code>JSON</code> 格式的数据。然后，我们定义了一个适配器 <code>DataAdapter</code>，根据不同数据源的类型，将其数据转换为统一的 <code>JSON</code> 格式。</p><p>通过适配器模式，我们可以将不同格式的数据适配为统一的格式，使得我们的代码可以统一处理各种数据格式，提高了代码的灵活性和可维护性。</p><h2 id="四-适配器模式的优缺点" tabindex="-1">四. 适配器模式的优缺点 <a class="header-anchor" href="#四-适配器模式的优缺点" aria-label="Permalink to &quot;四. 适配器模式的优缺点&quot;">​</a></h2><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ol><li>解耦性高：适配器模式可以将不兼容的接口进行适配，使得原本不相关的两个对象能够进行合作，提高代码的灵活性和可扩展性。</li><li>可复用性强：适配器模式可以针对不同的接口规范进行适配，使得同一个适配器可以在多个场景下复，减少重复编写代码的工作量。</li><li>易于扩展：当需要适配新的接口或者新的适配逻辑时，只需要新增一个适配器类即可，不会对现有代码产较大的改动。</li><li>简化客户端代码：适配器模式将适配逻辑封装在适配器类中，使得户端代码无需关心具体的适配细节，简化了客户端的代码复杂度。</li></ol><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ol><li>增加代码复杂性：适配器模式需要引入额外的适配器类，在一些简单场景下可能会增加代码的复杂性。</li><li>运行效率低：适配器模式在适配过程中可能需要进行一些额外的转换和处理，可能会导致运行效率的损失，适配器模式不适用于对性能要求非常高的场景。</li></ol><p>总体来说，适配器模式可以在接口不兼容或者需要复用已有逻辑的情况下发挥作用，提高代码灵活性和可维护性。但在简单场景下可能会增加代码的复杂性，适用场景需要根据具体情况进行评估。</p><h2 id="五-总结" tabindex="-1">五. 总结 <a class="header-anchor" href="#五-总结" aria-label="Permalink to &quot;五. 总结&quot;">​</a></h2><h3 id="适配器模式的重要性" tabindex="-1">适配器模式的重要性 <a class="header-anchor" href="#适配器模式的重要性" aria-label="Permalink to &quot;适配器模式的重要性&quot;">​</a></h3><p>适配器模式在 <code>JavaScript</code> 前端开发中具有重要的意义：</p><ol><li><p>消除接口不兼容：在实际开发中，可能会遇到不同类或库之间接口规范不一致的情况。适配器模式可以将不兼容的接口进行适配，使得原本不相关的对象能够进行合作，提高代码的灵活性和可扩展性。</p></li><li><p>提高代码复用性：适配器模式可以针对不同的接口规范进行适配，使得同一个适配器可以在多个场景下复用。这样可以减少代码的冗余，提高代码的可维护性。</p></li><li><p>简化客户端代码：适配器模式将适配逻辑封装在适配器类中，使得客户端代码无需关心具体的适配细节。这样可以简化客户端代码，降低代码耦合度，提高代码的可读性和可维护性。</p></li><li><p>解决浏览器兼容性问题：在 <code>Web</code> 开发中，不同浏览器对 <code>JavaScript</code> 的支持和实现可能存在差异。适配器模式可以用于处理不同浏览器之间的兼容性问题，通过适配器对不同浏览器的差异进行抹平，从而在各个浏览器上实现一致的行为。</p></li></ol><p>总之，适配器模式在 <code>JavaScript</code> 中的重要性体现在其能够解决接口不兼容的问题，提高代码的灵活性和复用性，简化客户端代码，解决浏览器兼容性问题以及实现数据格式转换等实际应用场景中。它是一种常用且有价值的设计模式。</p><h3 id="适配器模式的核心点" tabindex="-1">适配器模式的核心点 <a class="header-anchor" href="#适配器模式的核心点" aria-label="Permalink to &quot;适配器模式的核心点&quot;">​</a></h3><p>适配器模式的核心思想是通过适配器类，将一个类的接口转换成另一个符合客户端期望的接口，从而使得原本不兼容的类能够协同工作。适配器模式可以在不修改现有类代码的情况下，使得原本不相关的两个对象能够进行合作。</p><p>适配器模式的关键要素包括：</p><ol><li><strong>目标接口</strong>（Target Interface）</li><li><strong>源接口</strong>（Adaptee Interface）</li><li><strong>适配器</strong>（Adapter）</li><li><strong>客户端</strong>（Client）</li></ol><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>在本篇文章中，我们详细探讨了 <code>JavaScript</code> 适配器模式的重要性和实际应用。适配器模式可以帮助我们解决接口不兼容、提高代码复用性、简化客户端代码等。</p><p>通过适配器模式，我们可以轻松地将不同类或库之间的接口规范进行适配，使得本来不相关的对象能够进行合作。这不仅提高了代码的灵活性和可扩展性，还简化了客户端代码，降低了代码的耦合度。</p><p>综上所述，适配器模式在 <code>JavaScript</code> 中具有重要的意义和实际应用。它可以帮助我们克服接口不兼容和浏览器兼容性问题，提高代码复用性和可维护性，简化客户端代码，以及实现数据格式转换等功能。</p><p>希望通过本篇文章，你能更好地理解和运用适配器模式，从而提升你在 <code>JavaScript</code> 开发中的技术能力和项目质量。</p>`,74);function e(r,d,E,g,c,y){const s=l("ArticleFooter");return h(),a("div",null,[k,n(s,{link:"https://juejin.cn/post/7281088108925861948"})])}const A=i(t,[["render",e]]);export{F as __pageData,A as default};
