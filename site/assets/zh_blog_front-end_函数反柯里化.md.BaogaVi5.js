import{_ as i,c as a,I as n,aU as l,o as p,E as h}from"./chunks/framework.CpXV_ol5.js";const F=JSON.parse('{"title":"前端进阶｜看柯里化的逆操作，了解什么是反柯里化","description":"","frontmatter":{"title":"前端进阶｜看柯里化的逆操作，了解什么是反柯里化"},"headers":[],"relativePath":"zh/blog/front-end/函数反柯里化.md","filePath":"zh/blog/front-end/函数反柯里化.md","lastUpdated":1727083629000}'),t={name:"zh/blog/front-end/函数反柯里化.md"},k=l(`<h1 id="函数反柯里化" tabindex="-1">函数反柯里化 <a class="header-anchor" href="#函数反柯里化" aria-label="Permalink to &quot;函数反柯里化&quot;">​</a></h1><h2 id="温故而知新" tabindex="-1">温故而知新 <a class="header-anchor" href="#温故而知新" aria-label="Permalink to &quot;温故而知新&quot;">​</a></h2><p>在说反柯里化之前，先来复习下柯里化的基础。之前文章，我们了解了什么是柯里化，以及柯里化的实现原理，同时我们也明白了什么情况下我们使用柯里化，详细阅读参见之前文章<a href="https://juejin.cn/post/7272364104748531731" target="_blank" rel="noreferrer">《前端进阶｜由浅入深的理解函数柯里化的实现与应用》</a>，今天我们来了解一下反柯里化。</p><p>那什么是反柯里化呢？？是与柯里化相反吗？？</p><p>书中对反柯里化的作用做了介绍：</p><blockquote><p>反柯里化是为了扩大函数的适用性，使本来作为特定对象所拥有的功能的函数可以被任意对象所用。</p></blockquote><h2 id="什么是反柯里化" tabindex="-1">什么是反柯里化 <a class="header-anchor" href="#什么是反柯里化" aria-label="Permalink to &quot;什么是反柯里化&quot;">​</a></h2><h3 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h3><p>反柯里化（<code>Uncurrying</code>）是指将柯里化函数转换为接受多个参数的普通函数的过程。在函数柯里化中，一个多参数的函数被转换为接受一个参数并返回一个新函数的一系列嵌套函数。而反柯里化则是将这些嵌套函数重新组合成一个多参数的函数。</p><p>具体来说，反柯里化是将一系列通过柯里化得到的函数，重新组合成一个函数，使得这个函数能够接受与原来多参数函数相同数量的参数，并且处理这些参数。简而言之，反柯里化是将柯里化函数还原成普通函数。</p><h3 id="为什么会有反柯里化" tabindex="-1">为什么会有反柯里化 <a class="header-anchor" href="#为什么会有反柯里化" aria-label="Permalink to &quot;为什么会有反柯里化&quot;">​</a></h3><p><strong>反柯里化的意义</strong>在于可以将柯里化函数应用于特定场景，使其更通用和灵活。通过将柯里化函数反柯里化，可以将其调用方式改变为更传统的多参数调用方式，使得函数使用更加直观和方便。这在一些需要使用多个参数的情况下特别有用。</p><p>举例说明一种常见的情况：当我们使用某个库或框架提供的函数时，这些函数可能采用柯里化的方式定义。柯里化可以使得函数的参数传递更加灵活，方便部分应用和函数组合。然而，有时候我们可能希望将这些柯里化的函数转化为普通的多参数函数，以便于更直观地使用它们，或者与其他函数进行组合。这时，反柯里化就可以派上用场。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// ES5 的实现</span></span>
<span class="line"><span>function uncurring(fn) {</span></span>
<span class="line"><span>    return function () {</span></span>
<span class="line"><span>        // 取出要执行 fn 方法的对象，同时从 arguments 中删除</span></span>
<span class="line"><span>        var obj = [].shift.call(arguments);</span></span>
<span class="line"><span>        return fn.apply(obj, arguments);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>// ES6 的实现</span></span>
<span class="line"><span>function uncurring(fn) {</span></span>
<span class="line"><span>    return function (...args) {</span></span>
<span class="line"><span>        return fn.call(...args);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="反柯里化的实现原理" tabindex="-1">反柯里化的实现原理 <a class="header-anchor" href="#反柯里化的实现原理" aria-label="Permalink to &quot;反柯里化的实现原理&quot;">​</a></h2><p><strong>实现反柯里化</strong>的关键是理解柯里化的原理和目标，以及如何将柯里化函数恢复成普通函数。</p><p>在柯里化中，一个多参数的函数被转换为接受一个参数并返回一个新函数的一系列嵌套函数。而反柯里化则是这些嵌套函数重新组合成一个多参数的函数。</p><p>下面是一种常见的实现反柯里化的思路：</p><ol><li>首先，我们考虑一个柯里化函数的特点：它接收一个参数，并返回一个新函数。</li><li>我们可以通过递归遍历的方式将所有的嵌套函数都找到，并存储在一个数组中。</li><li>在反柯里化时，我们需要遍历这个数组，并将每个函数的参数进行存储，直至遍历结束，得到所有的参数。</li><li>最后，我们可以使用 <code>apply</code> 或 <code>call</code> 方法将原函数应用到得到的参数上，从而实现反柯里化。</li></ol><p>一个简单的示例，说明如何实现反柯里化：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curried</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (args.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fn.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functionmoreArgs) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        return </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curried</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">moreArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> curriedAdd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(add);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 反柯里化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uncurry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fn;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> uncurriedAdd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uncurry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(curriedAdd);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uncurriedAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 5</span></span></code></pre></div><p>在上面的示例中，我们定义了一个柯里化函数 <code>curry</code> 和一个被柯里化的函数 <code>add</code>，然后通过应用 <code>curry</code> 函数将 <code>add</code> 函数变为柯里化函数 <code>curriedAdd</code>。最后，我们再应用反柯里化函数 <code>uncurry</code> 将 <code>curriedAdd</code> 函数还原为普通函数 <code>uncurriedAdd</code>，并且可以传递多个参数来执行。</p><p>需要注意的是，实现反柯里化的方式可能有多种，以上只是其中的一种常见实现方式。具体的实现取决于编程语言和具体的应用场景。</p><h2 id="反柯里化的应用场景" tabindex="-1">反柯里化的应用场景 <a class="header-anchor" href="#反柯里化的应用场景" aria-label="Permalink to &quot;反柯里化的应用场景&quot;">​</a></h2><p>反柯里化在实际开发中有着广泛的应用场景，以下是几个常见的应用场景示例：</p><ol><li><p><strong>函数组合</strong>（<code>Function Composition</code>）：在函数式编程中，函数组合是将多个函数按照一定顺序组合起来形成新的函数。反柯里化可以将柯里化函数转换为多参数函数，便于进行函数组合操作。通过将多个反柯里化的函数组合在一起，可以实现更灵活的函数组合，增加代码的可读性和模块化程度。</p></li><li><p><strong>方法调用转换</strong>：在 <code>JavaScript</code> 中，许多内置方法（例如 <code>Array.prototype.map</code>、<code>Function.prototype.bind</code> 等）本身是柯里化的，接受一个参数并返回一个新的函数。通过将柯里化的方法调用转换为非柯里化的形式，我们可以方便地将这些方法应用于其他数据类型或实现自定义扩展方法。</p></li><li><p><strong>函数的复用</strong>：柯里化函数可以通过分应用（<code>Partial Application</code>）的方式传递部分参数，返回一个具有更少参数的新函数。通过反柯里化，可以将部分应用的函数转换为多参数函数，从而实现函数的复用。这样可以减少重复代码，提高函数的可重用性。</p></li></ol><p>例如：反柯里化在函数组合中的应用：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curried</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (args.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fn.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">moreArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curried</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">moreArgs)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> multiply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> curriedAdd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(add)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> curriedMultiply</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(multiply)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 反柯里化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uncurry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fn</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> uncurriedAdd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uncurry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(curriedAdd)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> uncurriedMultiply</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uncurry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(curriedMultiply)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> composed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uncurriedAdd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uncurriedMultiply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 19，相当于 (3 + 5) * (2 * 5)</span></span></code></pre></div><p>在上面的示例中，我们定义了两个柯里化函数 <code>add</code> 和 <code>multiply</code>，然后使用 <code>curry</code> 函数将其转换为柯里化函数 <code>curriedAdd</code> 和 <code>curriedMultiply</code>。接着，我们使用反柯里化函数 <code>uncurry</code> 将这两个柯里化函数转换为非柯里化函数，并对它们进行函数组合操作。最后，通过传递参数来调用组合函数 <code>composed</code>，得到最终结果。</p><p>通过反柯里化，我们可以<strong>将柯里化函数转换为多参数函数</strong>，实现<strong>函数的组合</strong>、<strong>复用</strong>以及<strong>自定义扩展</strong>等功能，提高代码的可读性和可维护性。</p><h2 id="反柯里化的优点和缺点" tabindex="-1">反柯里化的优点和缺点 <a class="header-anchor" href="#反柯里化的优点和缺点" aria-label="Permalink to &quot;反柯里化的优点和缺点&quot;">​</a></h2><p><strong>反柯里化</strong>（<code>Uncurrying</code>）在程序设计中有其优点和缺点，下面将对其进行详细说明：</p><p>优点：</p><ol><li><p><strong>增加代码的可读性</strong>：柯里化函数将一个多参数函数转换为一系列嵌套函数，使得函数调用变得复杂，阅读和理解代码可能变得困难。反柯里化可以将这些嵌套函数恢复为多参数函数，从而提高代码的可读性和理解性。</p></li><li><p><strong>提高代码的灵活性</strong>：反柯里化将柯里化函数转换为多参数函数，使得函数的参数不再受限于事先定义的柯里化格式。这样可以更灵活地应用函数，适应不同的使用场景，提高代码的灵活性和可扩展性。</p></li><li><p><strong>函数复用和组合</strong>：反柯里化允许对柯里化函数进行部分或完全参数应用，从而实现函数的复用和组合。通过反柯里化，我们可以更方便地将函数组合在一起，形成新的函数，提高代码的重用性和模块化程度。</p></li></ol><p>缺点：</p><ol><li><p><strong>额外的性能开销</strong>：反柯里化需要进行函数的遍历和参数存储操作，可能引入一定的额外性能开销。尤其是在参数较多或嵌套函数较多的情况下，可能会对性能产生一定的影响。</p></li><li><p><strong>可读性损失</strong>：在柯里化函数中，嵌套函数和参数的传递顺序具有一定的规律，有助于理解和调试代码。反柯里化将这些规律打破，可能增加代码的复杂性，使得阅读和理解变得更加困难。</p></li><li><p><strong>不适用于所有情况</strong>：反柯里化并不适用于所有的函数。柯里化在某些场景下可以提供更好的代码组织和可读性，反柯里化并非总是必要的或有益的操作。</p></li></ol><p>需要根据具体的应用场景和需求来决定是否使用反柯里化，并在性能和可读性之间进行权衡。在某些情况下，反柯里化可以提供更好的灵活性和代码组合能力；在另一些情况下，柯里化可能更适合保持代码的简洁性和可读性。</p><h2 id="柯里化和反柯里化之间的比较" tabindex="-1">柯里化和反柯里化之间的比较 <a class="header-anchor" href="#柯里化和反柯里化之间的比较" aria-label="Permalink to &quot;柯里化和反柯里化之间的比较&quot;">​</a></h2><p>柯里化（<code>Currying</code>）和反柯里化（<code>Uncurrying</code>）是一对互逆的操作，下面是它们之间的比较：</p><p>柯里化：</p><ol><li><strong>参数转换</strong>：柯里化将一个<strong>多参数函数</strong>转换为一系列<strong>接受部分参数的嵌套函数</strong>，每个嵌套函数返回一个新函数，直到所有参数都被传递完。通过这种方式，柯里化函数的参数可以逐步应用，使得函数调用更加灵活和可读性更高。</li><li><strong>参数顺序</strong>：柯里化可以改变函数参数的顺序，将原本多个参数按照特定顺序拆分成一系列的单个参数。这样可以更方便地进行函数的组合、复用和扩展，提高代码的模块化程度和可维护性。</li><li><strong>函数调用</strong>：柯里化函数的调用方式变得更加灵活，可以逐步传递参数，允许部分参数的应用甚至跳过某些参数，符合函数式编程的思想和风格。</li></ol><p>反柯里化：</p><ol><li><strong>参数合并</strong>：反柯里化将<strong>一系列嵌套的函数</strong>转换为<strong>一个接受多个参数的函数</strong>，恢复了原本多参数函数的形式。这样可以提高代码的可读性和理解性，使函数调用更加直观。</li><li><strong>参数顺序</strong>：反柯里化可以改变函数参数的顺序，将嵌套的参数重新合并为原本的多个参数。这样可以允许对柯里化函数进行灵活调用，并与其他多参数函数进行组合和复用。</li><li><strong>函数调用</strong>：反柯里化函数可以直接接收多个参数，并与柯里化函数相互转换。这样可以在需要多参数函数的地方使用反柯里化后的函数，简化代码的调用和维护过程。</li></ol><p>相同点：</p><ol><li><strong>转换形式</strong>：柯里化和反柯里化都是一种转换函数形式的操作，将函数从一种形式转换为另一种形式，以适应不同的使用场景和需求。</li></ol><p>不同点：</p><ol><li><strong>参数处理</strong>：柯里化是将多参数拆分为一系列部分参数，而反柯里化是将嵌套的部分参数合并为多参数。</li><li><strong>调用方式</strong>：柯里化函数需要逐步传递参数直到所有参数都被传递完，而反柯里化函数可以直接接收多个参数进行调用。</li><li><strong>应用场景</strong>：柯里化适用于需要增加灵活性和可读性的函数调用场景，反柯里化适用于需要恢复原本多参数函数形式的场景。</li></ol><p>柯里化和反柯里化是互逆的操作，相互补充和利用，根据具体的需求和场景来选择使用柯里化或反柯里化，以提高代码的可读性、可维护性和灵活性。</p>`,48);function e(r,E,d,g,y,c){const s=h("ArticleFooter");return p(),a("div",null,[k,n(s,{link:["juejin::https://juejin.cn/post/7273497970933448763","weixin::https://mp.weixin.qq.com/s/zPXpD6i1ArNs9SQS4MjQtg"]},null,8,["link"])])}const u=i(t,[["render",e]]);export{F as __pageData,u as default};
