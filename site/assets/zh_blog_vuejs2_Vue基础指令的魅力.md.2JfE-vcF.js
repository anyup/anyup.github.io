import{_ as l,c as e,l as i,a as s,t as h,I as p,aU as a,o as k,E}from"./chunks/framework.CpXV_ol5.js";const B=JSON.parse('{"title":"探索 Vue 指令的魅力：基础指令运用从入门到精通","description":"","frontmatter":{"title":"探索 Vue 指令的魅力：基础指令运用从入门到精通"},"headers":[],"relativePath":"zh/blog/vuejs2/Vue基础指令的魅力.md","filePath":"zh/blog/vuejs2/Vue基础指令的魅力.md","lastUpdated":1727083629000}'),d={name:"zh/blog/vuejs2/Vue基础指令的魅力.md"},o=a(`<h1 id="探索-vue-指令的魅力-基础指令运用从入门到精通" tabindex="-1">探索 Vue 指令的魅力：基础指令运用从入门到精通 <a class="header-anchor" href="#探索-vue-指令的魅力-基础指令运用从入门到精通" aria-label="Permalink to &quot;探索 Vue 指令的魅力：基础指令运用从入门到精通&quot;">​</a></h1><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38034700f6b740979e6715ee20d52a65~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=750&amp;h=400&amp;s=30791&amp;e=png&amp;b=f9f9f9" alt="image.png"></p><h2 id="一-什么是-vue-指令" tabindex="-1">一. 什么是 Vue 指令 <a class="header-anchor" href="#一-什么是-vue-指令" aria-label="Permalink to &quot;一. 什么是 Vue 指令&quot;">​</a></h2><h3 id="指令的定义和作用" tabindex="-1">指令的定义和作用 <a class="header-anchor" href="#指令的定义和作用" aria-label="Permalink to &quot;指令的定义和作用&quot;">​</a></h3><p><strong>指令</strong>是通过 <code>Vue</code> 实例的<code>directives</code>选项进行定义的。在指令的定义中，需要提供一个<code>bind</code>函数，它在指令第一次绑定到元素时被调用，可以执行一些初始化的操作。还可以提供<code>update</code>函数，它在指令所在元素的值发生变化时被调用，可以更新元素的状态。</p><p><strong>作用：</strong> 指令的主要作用是通过对 <code>DOM</code> 进行操作来实现某种功能。</p><h3 id="vue-中常用的基础指令" tabindex="-1">Vue 中常用的基础指令 <a class="header-anchor" href="#vue-中常用的基础指令" aria-label="Permalink to &quot;Vue 中常用的基础指令&quot;">​</a></h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d5fe5b4e7c3466f9c33d8f7b71e82b7~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1580&amp;h=579&amp;s=208920&amp;e=png&amp;b=fefefe" alt="image.png"></p><h2 id="二-数据绑定指令" tabindex="-1">二. 数据绑定指令 <a class="header-anchor" href="#二-数据绑定指令" aria-label="Permalink to &quot;二. 数据绑定指令&quot;">​</a></h2><h3 id="_1-v-model-指令" tabindex="-1">1. <code>v-model</code> 指令 <a class="header-anchor" href="#_1-v-model-指令" aria-label="Permalink to &quot;1. \`v-model\` 指令&quot;">​</a></h3><p><code>v-model</code>指令是<code>Vue</code>中用于实现<strong>双向数据绑定</strong>的重要指令，其原理是通过对表单元素进行监听和更新，实现数据的双向同步。</p><p><strong>实现原理：</strong> 当我们使用<code>v-model</code>指令绑定一个表单元素时，<code>Vue</code>会自动为该表单元素添加<code>value</code>属性，同时给该元素绑定<code>input</code>或<code>change</code>事件监听器。当表单元素的值发生改变时，就会触发相应的事件回调函数，进而通过更新<code>Vue</code>实例中对应的数据。反过来，当<code>Vue</code>实例中对应的数据被修改时，<code>v-model</code>指令会将新的数据值传递给表单元素，实现数据的双向同步。</p><p><strong>使用示例：</strong></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66b2c4a00bcf463ca5c3b6cb504c614c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=552&amp;h=280&amp;s=19421&amp;e=gif&amp;f=27&amp;b=fefefe" alt="0914-1.gif"></p><p align="center">v-model双向绑定的魅力</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Message: {{ message }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 初始值为空</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在上述示例中，我们通过 v-model 指令绑定了一个输入框，并将其值与 Vue 实例中的<code>message</code>属性进行双向绑定。当用户在输入框中输入内容时，<code>message</code>属性会被更新；反之，当我们更新<code>message</code>属性时，输入框中的值也会相应改变。</p><p>这样，无论是用户输入导致的值变化，还是 Vue 实例中<code>message</code>属性的变化，双方的值都能保持同步，从而实现了数据的双向绑定。</p><h3 id="_2-v-bind-指令" tabindex="-1">2. <code>v-bind</code> 指令 <a class="header-anchor" href="#_2-v-bind-指令" aria-label="Permalink to &quot;2. \`v-bind\` 指令&quot;">​</a></h3><p><code>v-bind</code>指令是<code>Vue</code>中用于动态绑定数据到<code>HTML</code>元素属性的指令。它的原理是通过对<code>HTML</code>元素的属性进行监听，当绑定的数据发生变化时，会自动更新绑定的属性值，从而实现属性的动态更新。</p><p><strong>使用方式：</strong> 使用<code>v-bind</code>指令的语法为<code>:属性名=&quot;表达式&quot;</code> 或 <code>v-bind:属性名=&quot;表达式&quot;</code>。其中，属性名可以是任意 HTML 元素属性，表达式可以是<code>Vue</code>实例中的数据或计算属性。</p><p><strong>使用示例：</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Message: {{ message }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isDisabled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Click Me&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;linkUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Go to Website&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;imageUrl&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello Vue!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        isDisabled: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        linkUrl: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        imageUrl: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.example.com/images/logo.png&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在这个示例中，我们分别使用<code>v-bind</code>指令将<code>Vue</code>实例中的数据绑定到了<code>button</code>元素的<code>disabled</code>属性、a 元素的<code>href</code>属性和<code>img</code>元素的<code>src</code>属性上。</p><ul><li><p><code>:disabled=&quot;isDisabled&quot;</code>：当<code>isDisabled</code>属性为 true 时，按钮会被禁用；为 false 时，按钮可以进行点击操作。</p></li><li><p><code>:href=&quot;linkUrl&quot;</code>：a 元素的链接地址将会根据<code>linkUrl</code>属性的值进行动态更新。</p></li><li><p><code>:src=&quot;imageUrl&quot;</code>：img 元素的图片地址将会根据<code>imageUrl</code>属性的值进行动态更新。</p></li></ul><p>通过<code>v-bind</code>指令的绑定，这些属性的值会根据<code>Vue</code>实例中数据的变化而动态更新，从而实现了数据的动态绑定到<code>HTML</code>元素属性上。</p><h2 id="三-条件渲染指令" tabindex="-1">三. 条件渲染指令 <a class="header-anchor" href="#三-条件渲染指令" aria-label="Permalink to &quot;三. 条件渲染指令&quot;">​</a></h2><h3 id="_1-v-if-指令" tabindex="-1">1. v-if 指令 <a class="header-anchor" href="#_1-v-if-指令" aria-label="Permalink to &quot;1. v-if 指令&quot;">​</a></h3><p><code>v-if</code>指令是<code>Vue.js</code>中用于条件渲染元素的指令。它的原理如下：</p><ol><li><p>当 Vue 实例中的条件表达式为真（<code>truthy</code>）时，<code>v-if</code>指令会将其所在元素添加到<code>DOM</code>中；当条件表达式为假（<code>falsy</code>）时，<code>v-if</code>指令会将其所在元素从<code>DOM</code>中移除。</p></li><li><p>在初次渲染时，<code>Vue</code>会通过计算条件表达式的值来决定是否渲染元素。如果条件表达式为假，则会直接跳过该元素的渲染，不会添加到<code>DOM</code>中。</p></li><li><p>当条件表达式的值发生变化时，Vue 会重新计算表达式的值。如果新的值为真，则会将元素添加到<code>DOM</code>中；如果新的值为假，则会将元素从<code>DOM</code>中移除。</p></li></ol><p><strong>使用示例：</strong></p><p>假设我们有一个 Vue 实例中有一个<code>isShow</code>数据属性，控制一个元素是否显示。我们可以在模板中使用<code>v-if</code>指令来根据<code>isShow</code>的值条件性地进行元素渲染。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isShow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;这是一个可显示的元素。&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在上述示例中，如果<code>isShow</code>的值为真，则会渲染<code>&lt;p&gt;</code>元素并将其添加到包裹的<code>&lt;div&gt;</code>中；如果<code>isShow</code>的值为假，则不会渲染该元素，即使存在于模板中。</p><p>当<code>isShow</code>的值发生改变时，<code>v-if</code>指令会根据新的值重新计算，并将元素渲染或移除。</p><p>另外，<code>v-if</code>指令也支持和<code>v-else</code>、<code>v-else-if</code>指令一起使用，用于多个条件判断的情况。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;condition1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;条件1为真时显示&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-else-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;condition2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;条件1为假且条件2为真时显示&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;条件1和条件2都为假时显示&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>上述示例中，只有满足条件的首个指令所在元素会被渲染，其他条件不满足的元素会被跳过。</p><p>通过使用<code>v-if</code>指令，我们可以根据条件动态地渲染和移除元素，实现条件性的<code>DOM</code>操作。这在处理复杂的条件逻辑和动态交互时非常有用。</p><h3 id="_2-v-show-指令" tabindex="-1">2. <code>v-show</code> 指令 <a class="header-anchor" href="#_2-v-show-指令" aria-label="Permalink to &quot;2. \`v-show\` 指令&quot;">​</a></h3><p><code>v-show</code>指令是<code>Vue</code>中用于根据条件控制元素显示与隐藏的指令。它的原理是根据绑定的表达式的值来决定元素是否显示，当表达式的值为<code>true</code>时，元素显示；为<code>false</code>时，元素隐藏。</p><p><strong>使用方式：</strong> 使用<code>v-show</code>指令的语法为<code>v-show=&quot;表达式&quot;</code>。其中，表达式可以是<code>Vue</code>实例中的数据或计算属性。</p><p><strong>使用示例：</strong></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/050ce429a03b4e208199d97e9d130088~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=782&amp;h=280&amp;s=204175&amp;e=gif&amp;f=35&amp;b=fdfcfc" alt="0914-1.gif"></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isShow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;This is a paragraph.&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;toggleShow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Toggle Show&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        isShow: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      toggleShow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isShow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isShow</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在这个示例中，我们使用<code>v-show</code>指令将一个段落元素绑定到<code>isShow</code>属性上。初始时，该元素是显示的，因为<code>isShow</code>属性的初始值为<code>true</code>。当我们点击“Toggle Show”的按钮时，会触发<code>toggleShow</code>方法，该方法会将<code>isShow</code>属性取反，从而切换元素的显示与隐藏。</p><p>通过<code>v-show</code>指令的绑定，元素的显示状态会根据<code>isShow</code>属性的值进行动态控制，当<code>isShow</code>属性为<code>true</code>时，元素显示；为<code>false</code>时，元素隐藏。</p><p>不同于<code>v-if</code>指令，使用<code>v-show</code>指令隐藏的元素仍然存在于<code>DOM</code>中，只是通过<code>CSS</code>的<code>display</code>属性控制其显示与隐藏，因此隐藏和显示的切换相对更快。如果元素涉及频繁的显示和隐藏操作，<code>v-show</code>可能是更好的选择。</p><h2 id="四-循环渲染指令" tabindex="-1">四. 循环渲染指令 <a class="header-anchor" href="#四-循环渲染指令" aria-label="Permalink to &quot;四. 循环渲染指令&quot;">​</a></h2><h3 id="v-for-指令" tabindex="-1">v-for 指令 <a class="header-anchor" href="#v-for-指令" aria-label="Permalink to &quot;v-for 指令&quot;">​</a></h3><p><code>v-for</code>指令是 Vue.js 中用于循环渲染元素列表的指令。它的原理如下：</p><ol><li><p>当<code>Vue</code>实例中的数据是一个数组或对象时，<code>v-for</code>指令会将其所在元素作为模板，根据数据的每个项进行多次渲染。</p></li><li><p>在每次渲染时，<code>Vue</code>会将当前数据项的值绑定到当前渲染的元素上，从而实现动态地渲染多个元素。</p></li><li><p>当数据发生变化时，<code>Vue</code>会重新计算<code>v-for</code>指令的每个项，并根据新的数据重新渲染对应的元素。</p></li></ol><h4 id="数组循环渲染" tabindex="-1">数组循环渲染 <a class="header-anchor" href="#数组循环渲染" aria-label="Permalink to &quot;数组循环渲染&quot;">​</a></h4><p>假设我们有一个 Vue 实例中有一个<code>items</code>数组，可以使用<code>v-for</code>指令来循环渲染数组的每个项。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;item in items&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ item }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,55),c=i("code",null,'v-for="item in items"',-1),r=i("code",null,"items",-1),g=i("code",null,"item",-1),y=i("code",null,"item",-1),u=i("code",null,"<li>",-1),v=i("code",null,"<li>",-1),m=a(`<p>当<code>items</code>数组发生变化时，<code>v-for</code>指令会重新计算并重新渲染对应的元素。例如，可以通过增删<code>items</code>数组中的项来动态地添加或删除渲染的元素。</p><p>另外，<code>v-for</code>指令还提供了第二个参数和第三个参数，用于获取当前项的索引和数组长度。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(item, index) in items&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ index }} - {{ item }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在上述示例中，<code>v-for=&quot;(item, index) in items&quot;</code>表示遍历<code>items</code>数组，将每个数组项赋值给<code>item</code>变量，将当前项的索引赋值给<code>index</code>变量。然后，通过插值语法将索引和对应的值插入到<code>&lt;li&gt;</code>元素中。</p><p>通过使用<code>v-for</code>指令，我们可以根据数据动态地渲染元素列表，无需手动进行重复的元素使用和操作。这在展示数据列表、实现动态表格、生成动态的选项等场景非常实用。</p><h4 id="对象循环渲染" tabindex="-1">对象循环渲染 <a class="header-anchor" href="#对象循环渲染" aria-label="Permalink to &quot;对象循环渲染&quot;">​</a></h4><p><code>v-for</code>指令除了可以循环渲染数组外，也可以循环渲染对象的属性。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(value, key) in object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ key }}: {{ value }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在上述示例中，<code>v-for=&quot;(value, key) in object&quot;</code>表示遍历<code>object</code>对象的属性，将每个属性的值赋值给<code>value</code>变量，将每个属性的键赋值给<code>key</code>变量。然后，通过插值语法将键和对应的值插入到<code>&lt;li&gt;</code>元素中。</p><p>当<code>object</code>对象的属性发生变化时，<code>v-for</code>指令会重新计算并重新渲染对应的元素。</p><p>需要注意的是，对象的属性遍历是无序的，所以渲染出来的顺序可能会与对象中属性的顺序不一致。如果需要保持顺序，可以将对象转为数组再进行循环渲染。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    object: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      key1: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      key2: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      key3: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value3&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  objectToArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.object);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(item, index) in objectToArray&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ item[0] }}: {{ item[1] }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在上述示例中，通过<code>Object.entries()</code>方法将对象转为一个包含键值对的二维数组，然后将该数组进行循环渲染。</p><p>使用<code>v-for</code>指令循环渲染对象属性时，可以灵活地展示和操作对象的属性，例如<strong>展示动态的表单</strong>、<strong>生成动态的导航菜单</strong>等场景。</p><h2 id="五-事件绑定指令" tabindex="-1">五. 事件绑定指令 <a class="header-anchor" href="#五-事件绑定指令" aria-label="Permalink to &quot;五. 事件绑定指令&quot;">​</a></h2><h3 id="v-on-指令" tabindex="-1">v-on 指令 <a class="header-anchor" href="#v-on-指令" aria-label="Permalink to &quot;v-on 指令&quot;">​</a></h3><p><code>v-on</code>指令是<code>Vue</code>中用于绑定事件监听的指令。它的原理是通过监听<code>DOM</code>元素上的特定事件，然后执行相应的处理函数。</p><p><strong>使用方式：</strong></p><p>使用<code>v-on</code>指令的语法有两种形式：简写形式和完整形式。</p><p>简写形式：<code>@事件名=&quot;处理函数&quot;</code>，如<code>@click=&quot;handleClick&quot;</code>。 完整形式：<code>v-on:事件名=&quot;处理函数&quot;</code>，如<code>v-on:click=&quot;handleClick&quot;</code>。</p><p><strong>使用示例：</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;handleClick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Click me&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Button clicked!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在这个示例中，我们使用<code>v-on</code>指令将一个<code>button</code>元素的<code>click</code>事件绑定到<code>handleClick</code>方法上。当用户点击按钮时，<code>Vue</code>会自动调用<code>handleClick</code>方法，并在控制台输出&quot;Button clicked!&quot;。</p><p>在事件处理函数中，我们可以执行任意的<code>JavaScript</code>代码，处理用户的操作并更新<code>Vue</code>实例中的数据。</p><p>除了使用简写形式的<code>v-on</code>指令，我们还可以使用完整形式来绑定事件监听：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-on:click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;handleClick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Click me&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>无论是简写形式还是完整形式，<code>v-on</code>指令的绑定都会将事件和对应的处理函数建立起关联，使得事件触发时，<code>Vue</code>能够正确地调用处理函数。</p><p>除了<code>click</code>事件外，<code>v-on</code>指令还可以绑定其他<code>DOM</code>事件，例如<code>input</code>、<code>submit</code>、<code>keyup</code>等。并且，我们也可以在处理函数中访问事件对象，以获取更多关于事件的信息。</p><p>需要注意的是，<code>v-on</code>指令只能绑定普通<code>DOM</code>事件，不能绑定自定义事件。对于自定义事件的绑定，我们需要使用<code>Vue</code>的自定义事件机制来实现。</p><h2 id="六-样式绑定指令" tabindex="-1">六. 样式绑定指令 <a class="header-anchor" href="#六-样式绑定指令" aria-label="Permalink to &quot;六. 样式绑定指令&quot;">​</a></h2><h3 id="_1-v-bind-class-指令" tabindex="-1">1. v-bind:class 指令 <a class="header-anchor" href="#_1-v-bind-class-指令" aria-label="Permalink to &quot;1. v-bind:class 指令&quot;">​</a></h3><p><code>v-bind:class</code>指令是<code>Vue.js</code>中用于动态绑定元素的类名的指令。它可以根据<code>Vue</code>实例中的数据进行条件判断，并动态地添加或移除类名，从而实现灵活的样式绑定。</p><p><code>v-bind:class</code>指令的样式绑定原理如下：</p><ol><li><p>当 Vue 实例中的数据满足指定条件时，<code>v-bind:class</code>指令会将指定的类名添加到元素的<code>class</code>属性中；当数据不满足条件时，指定的类名会从<code>class</code>属性中移除。</p></li><li><p>可以通过对象语法、数组语法和表达式语法来进行样式的绑定。</p></li></ol><p><strong>使用示例：</strong></p><p><strong>1. 对象语法</strong></p><p>可以使用对象语法为元素绑定多个条件类名。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-bind:class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ active: isActive, &#39;text-danger&#39;: hasError }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在上述示例中，<code>isActive</code>和<code>hasError</code>是 Vue 实例中的数据，如果它们为<code>true</code>，<code>active</code>类和<code>text-danger</code>类会被添加到<code>&lt;div&gt;</code>元素的<code>class</code>属性中。如果它们为<code>false</code>，对应的类名会从<code>&lt;div&gt;</code>元素的<code>class</code>属性中移除。</p><p><strong>2. 数组语法</strong></p><p>可以使用数组语法为元素绑定动态的类名。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-bind:class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[isActive ? &#39;active&#39; : &#39;&#39;, errorClass]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在上述示例中，<code>isActive</code>和<code>errorClass</code>是 Vue 实例中的数据，如果<code>isActive</code>为<code>true</code>，<code>active</code>类会被添加到<code>&lt;div&gt;</code>元素的<code>class</code>属性中；如果<code>errorClass</code>变量是一个字符串，该字符串会被作为类名添加到<code>&lt;div&gt;</code>元素的<code>class</code>属性中。</p><p><strong>3. 表达式语法</strong></p><p>可以使用表达式语法为元素动态计算类名。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-bind:class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;classExpression&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在上述示例中，<code>classExpression</code>是 Vue 实例中的数据，它是一个计算属性或方法，返回一个字符串，该字符串会被作为类名添加到<code>&lt;div&gt;</code>元素的<code>class</code>属性中。</p><p>除了直接绑定数据，<code>v-bind:class</code>指令还可以与其他指令和计算属性一起使用，实现更加复杂和灵活的样式绑定。</p><p>总结来说，<code>v-bind:class</code>指令通过动态地添加、移除类名，实现了元素样式的灵活绑定。通过结合对象语法、数组语法和表达式语法的使用，可以根据条件动态绑定和管理元素的样式。</p><h3 id="_2-v-bind-style-指令" tabindex="-1">2. v-bind:style 指令 <a class="header-anchor" href="#_2-v-bind-style-指令" aria-label="Permalink to &quot;2. v-bind:style 指令&quot;">​</a></h3><p><code>v-bind:style</code>是<code>Vue</code>中用于动态绑定样式的指令。通过<code>v-bind:style</code>，我们可以将一个样式对象绑定到元素的<code>style</code>属性上，从而实现动态修改元素的样式。</p><p>使用<code>v-bind:style</code>的语法为<code>v-bind:style=&quot;样式对象&quot;</code>或者简写为<code>:style=&quot;样式对象&quot;</code>。其中，样式对象是一个<code>JavaScript</code>对象，包含一组键值对，每个键值对表示一个样式属性和对应的值。</p><p><strong>使用示例：</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;buttonStyle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Click me&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buttonStyle: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          backgroundColor: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;red&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;white&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          fontSize: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;16px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          padding: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;10px&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在这个示例中，我们使用 v-bind:style 将一个样式对象<code>buttonStyle</code>绑定到 button 元素的 style 属性上。<code>buttonStyle</code>对象中的每个键值对表示一个样式属性和对应的值。通过绑定样式对象，我们可以动态修改按钮的背景颜色、文字颜色、字体大小和内边距。</p><p>需要注意的是，样式属性名使用驼峰命名法，例如<code>backgroundColor</code>和<code>fontSize</code>。对于样式属性值，可以使用字符串或者使用 Vue 的响应式数据。</p><p>除了直接使用<code>JavaScript</code>对象作为样式对象，我们也可以在样式对象中使用<strong>三元表达式</strong>或<strong>计算属性</strong>来实现更灵活的样式绑定。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      :style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      backgroundColor: isActive ? &#39;green&#39; : &#39;grey&#39;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      color: isActive ? &#39;white&#39; : &#39;black&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Click me</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        isActive: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在这个示例中，我们使用了一个<code>isActive</code>的响应式数据来动态切换按钮的背景颜色和文字颜色。</p><p>通过<code>v-bind:style</code>指令，我们能够根据组件数据的变化，实时更新元素的样式，使得界面更加灵活和动态。</p><h2 id="七-文本渲染指令" tabindex="-1">七. 文本渲染指令 <a class="header-anchor" href="#七-文本渲染指令" aria-label="Permalink to &quot;七. 文本渲染指令&quot;">​</a></h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e1dbda8c539f4be8aae9022b5c676c6d~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=678&amp;h=171&amp;s=31108&amp;e=png&amp;b=ffffff" alt="image.png"></p><h3 id="_1-v-text-指令" tabindex="-1">1. v-text 指令 <a class="header-anchor" href="#_1-v-text-指令" aria-label="Permalink to &quot;1. v-text 指令&quot;">​</a></h3><p><code>v-text</code> 指令是 <code>Vue.js</code> 框架中的一个指令，主要用于将数据绑定到元素的文本内容上。它的原理很简单，当一个元素上应用了 <code>v-text</code> 指令时，<code>Vue.js</code> 会将绑定的数据表达式的值作为文本内容直接插入到这个元素中，取代原本的内容。</p><p><strong>使用示例：</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 在 Vue.js 实例中定义一个文本数据 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 在 JavaScript 中创建 Vue.js 实例并绑定数据 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    el: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, Vue.js!&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在上述代码中，我们使用 <code>v-text</code> 指令将 <code>Vue</code> 实例的 数据绑定到 <code>&lt;p&gt;</code> 元素上。这样，<code>&lt;p&gt;</code> 元素的文本内容就会被设置为 &quot;Hello, Vue!&quot;。随着数据的变化，文本内容也会自动。</p><p>需要注意的是，<code>v-text</code> 指令只能用于更新元素纯文本内容，而不会解析 <code>HTML</code> 标签。如果绑定的数据中包含 HTML 标签，应使用 <code>v-html</code> 指令。</p><h3 id="_2-v-html-指令" tabindex="-1">2. v-html 指令 <a class="header-anchor" href="#_2-v-html-指令" aria-label="Permalink to &quot;2. v-html 指令&quot;">​</a></h3><p><code>v-html</code>指令用于在 Vue 中渲染包含<code>HTML</code>代码的文本内容。它允许在模板中直接使用<code>HTML</code>标签，并将其解析为实际的<code>DOM</code>元素。</p><p><code>v-html</code>指令的工作原理是将绑定的表达式的值作为一段<code>HTML</code>代码进行解析，并将解析后的<code>DOM</code>元素插入到使用<code>v-html</code>指令的元素中的<code>innerHTML</code>属性中，从而实现动态渲染<code>HTML</code>。</p><p><strong>使用示例：</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;htmlContent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        htmlContent: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;strong&gt;Hello, &lt;em&gt;Vue.js!&lt;/em&gt;&lt;/strong&gt;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在这个示例中，我们使用<code>v-html</code>指令将<code>data</code>中的<code>htmlContent</code>属性的值作为<code>HTML</code>代码渲染到一个<code>&lt;div&gt;</code>元素中。通过绑定的表达式，我们可以动态地渲染不同的 HTML 内容，而不仅仅是纯文本。</p><p>需要注意的是，由于<code>v-html</code>指令会将表达式的值作为<code>HTML</code>代码解析并渲染，因此在使用<code>v-html</code>指令时，要确保所插入的<code>HTML</code>内容是可信的，以避免安全风险，比如恶意脚本注入。应该尽量避免直接将用户输入的内容作为<code>v-html</code>的值，或者确保对用户输入进行充分的验证和过滤。</p><h2 id="八-总结" tabindex="-1">八. 总结 <a class="header-anchor" href="#八-总结" aria-label="Permalink to &quot;八. 总结&quot;">​</a></h2><p>在使用 Vue 指令时，可以考虑以下性能优化问题：</p><ol><li><p><strong>合理使用<code>v-if</code>和<code>v-show</code></strong>：<code>v-if</code>指令在条件不满足时会将元素完全从<code>DOM</code>中移除，而<code>v-show</code>指令则是通过 CSS 控制元素的显示与隐藏。如果需要频繁地切换显示与隐藏，使用<code>v-show</code>会有更好的性能表现。</p></li><li><p><strong>合理使用 Vue 的 key 属性</strong>：当使用<code>v-for</code>指令进行循环渲染时，为每个元素分配唯一的 key 属性能够帮助 Vue 更高效地更新和重用<code>DOM</code>元素。尽可能使用唯一而稳定的值作为<code>key</code>，避免使用索引或随机值。</p></li><li><p><strong>慎用 v-html 指令</strong>：<code>v-html</code>指令可以动态渲染包含<code>HTML</code>代码的内容，但由于涉及<code>HTML</code>解析和注入，存在安全风险。尽量避免使用<code>v-html</code>指令插入不受信任的或未经过滤的<code>HTML</code>内容。</p></li><li><p><strong>避免频繁调用重排和重绘的 DOM 操作</strong>：频繁修改元素属性或样式，比如动态添加或删除元素，可能会导致浏览器频繁重排和重绘，影响性能。</p></li></ol><p>以上是常用的 <code>Vue</code> 指令，它们可以帮助我们简化操作，实现更丰富的交互和数据绑定效果。详细了解每个指令的法和特性，能够更好地使用 <code>Vue.js</code> 框架进行开发。同时，<strong>性能优化</strong>是一个综合考虑的过程，在使用<code>Vue</code>指令时要根据具体的场景，合理使用不同的优化方式和技巧，尽量减少不必要的性能消耗，提高应用的响应速度和用户体验。</p>`,80);function F(n,b,D,A,C,f){const t=E("ArticleFooter");return k(),e("div",null,[o,i("p",null,[s("在上述示例中，"),c,s("表示遍历"),r,s("数组，将每个数组项赋值给"),g,s("变量。然后，"),i("code",null,h(n.item),1),s("使用插值语法将每个"),y,s("的值插入到"),u,s("元素中，从而实现循环渲染多个"),v,s("元素。")]),m,p(t,{link:""})])}const _=l(d,[["render",F]]);export{B as __pageData,_ as default};
