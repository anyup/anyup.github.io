import{_ as i,c as a,I as n,aU as e,o as l,E as p}from"./chunks/framework.CpXV_ol5.js";const u=JSON.parse('{"title":"打造简洁且健壮的 JavaScript 代码","description":"","frontmatter":{"title":"打造简洁且健壮的 JavaScript 代码"},"headers":[],"relativePath":"zh/blog/front-end/可选链打造简洁且健壮的代码.md","filePath":"zh/blog/front-end/可选链打造简洁且健壮的代码.md","lastUpdated":1727083629000}'),h={name:"zh/blog/front-end/可选链打造简洁且健壮的代码.md"},t=e(`<h1 id="使用可选链-打造简洁且健壮的-javascript-代码" tabindex="-1">使用可选链 ?. 打造简洁且健壮的 JavaScript 代码 <a class="header-anchor" href="#使用可选链-打造简洁且健壮的-javascript-代码" aria-label="Permalink to &quot;使用可选链 ?. 打造简洁且健壮的 JavaScript 代码&quot;">​</a></h1><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/20d03f4090854345bee5d029a1f588d5~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1494&amp;h=632&amp;s=329310&amp;e=png&amp;b=fafafa" alt="image.png"></p><h2 id="一-前言" tabindex="-1">一. 前言 <a class="header-anchor" href="#一-前言" aria-label="Permalink to &quot;一. 前言&quot;">​</a></h2><p>在日常的编程工作中，我们经常需要处理可能为空的对象或属性，以确保代码的健壮性和可靠性。传统的空值检查方法不仅繁琐，而且容易引发错误和异常。</p><p>比如，下面这一个示例来看一下可选链的使用优势。</p><p>假设我们有一个<code>person</code>对象，其中包含<code>name</code>、<code>age</code>和<code>address</code>字段。我们需要获取该人的国家信息。在传统的空值检查方式下，代码可能如下所示：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> country </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person.address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person.address.country) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  country </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person.address.person</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(country)</span></span></code></pre></div><p>在上面这个示例中，我们需要连续判断<code>person</code>、<code>address</code>和<code>country</code>是否存在，才能安全地获取国家信息。这种方式不仅需要书写冗长的条件语句，还存在遗漏某些判断的风险。</p><p>幸运的是，JavaScript 引入了可选链 <code>?.</code> 这一语法特性，提供了一种简洁、优雅的方式来处理可能为空的对象或属性。使用可选链 <code>?.</code> 可以将上述代码简化为：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> country </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person?.address?.country </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(country)</span></span></code></pre></div><p>可选链 <code>?.</code> 不仅能够显著减少代码中的冗余判断，而且让我们的代码更加晰、易读。除了简化代码，可选链 <code>?.</code> 还能提供更好的错误处理和容错能力。帮助我们避免错误的发生，并提高了代码的健壮性和可靠性。</p><p>本篇文章将深入分析 JavaScript 中的可选链 <code>?.</code>，分析其语法、注意事项以及一些技巧。下面我们一起来看一下吧！</p><h2 id="二-可选链的基本语法" tabindex="-1">二. 可选链的基本语法 <a class="header-anchor" href="#二-可选链的基本语法" aria-label="Permalink to &quot;二. 可选链的基本语法&quot;">​</a></h2><h3 id="_1-什么是可选链" tabindex="-1">1. 什么是可选链 <a class="header-anchor" href="#_1-什么是可选链" aria-label="Permalink to &quot;1. 什么是可选链&quot;">​</a></h3><p>JavaScript 可选链是一种操作符，用于安全地访问可能为空或未定义的属性或方法。可选链的语法是一个问号 <code>?</code> 后跟一个点 <code>.</code>，表示在属性或方法链中进行存在性检查。如果链式操作中的任何一个属性或方法不存在或为 <code>null</code> 或 <code>undefined</code>，那么表达式会立即短路，返回 <code>undefined</code>，而不会导致异常错误。</p><p>可选链的主要目的是简化代码中对于存在性检查的处理，避免大量的冗余代码。它使得我们能够以更简洁和优雅的方式操作对象的属性和方法，而不必手动进行深层的存在性检查。</p><p>使用可选链 ? 的基本语法如下：</p><ul><li><p><strong>对象访问</strong>：<code>object?.property</code>，表示如果<code>object</code>存在，则访问该对象的<code>property</code>属性。</p></li><li><p><strong>方法调用</strong>：<code>object?.method()</code>，表示如果<code>object</code>存在，则调用该对象的<code>method</code>方法。</p></li><li><p><strong>索引访问</strong>：<code>array?.[index]</code>，表示如果<code>array</code>存在，则访问该数组的<code>index</code>索引位置的值。</p></li><li><p><strong>链式访问</strong>：<code>object?.prop1?.prop2</code>，表示如果<code>object</code>存在且<code>prop1</code>存在，则访问<code>prop1</code>属性的<code>prop2</code>属性。</p></li></ul><h3 id="_2-使用方式" tabindex="-1">2. 使用方式 <a class="header-anchor" href="#_2-使用方式" aria-label="Permalink to &quot;2. 使用方式&quot;">​</a></h3><p>以上面的基本语法为导向，下面是我总结的一些示例代码来说明可选链 ? 的使用方式：</p><h4 id="_1-对象访问" tabindex="-1">1. 对象访问 <a class="header-anchor" href="#_1-对象访问" aria-label="Permalink to &quot;1. 对象访问&quot;">​</a></h4><p>使用可选链 ? 来访问<code>person</code>对象的<code>name</code>属性。如果<code>person</code>存在，则返回<code>name</code>属性的值；否则，返回<code>undefined</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person?.name </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;John&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> city </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person?.city </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span></code></pre></div><h4 id="_2-方法调用" tabindex="-1">2. 方法调用 <a class="header-anchor" href="#_2-方法调用" aria-label="Permalink to &quot;2. 方法调用&quot;">​</a></h4><p>使用可选链 ? 来调用<code>person</code>对象的<code>sayHello</code>方法。如果<code>person</code>存在，则调用该方法；否则，什么也不做。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Hello!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nobody </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nobody?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span></code></pre></div><h4 id="_3-索引访问" tabindex="-1">3. 索引访问 <a class="header-anchor" href="#_3-索引访问" aria-label="Permalink to &quot;3. 索引访问&quot;">​</a></h4><p>使用可选链 ? 来访问数组<code>arr</code>的索引位置。如果<code>arr</code>存在且索引有效，则返回对应的值；否则，返回<code>undefined</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr?.[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr?.[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span></code></pre></div><h4 id="_4-链式访问" tabindex="-1">4. 链式访问 <a class="header-anchor" href="#_4-链式访问" aria-label="Permalink to &quot;4. 链式访问&quot;">​</a></h4><p>使用可选链 ? 来链式访问<code>person</code>对象的<code>address</code>属性的<code>city</code>属性。如果<code>person</code>存在且<code>address</code>存在，则返回<code>city</code>属性的值；否则，返回<code>undefined</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  address: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    city: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;New York&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> city </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person?.address?.city </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;New York&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> street </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person?.address?.street </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span></code></pre></div><p>通过以上示例，我们了解了可选链 ? 的基本语法和使用方式。它为我们处理可能为空的对象或属性提了一种简洁、可读的方式，增强了代码的健壮性和可靠性。</p><h2 id="三-可选链的注意事项" tabindex="-1">三. 可选链的注意事项 <a class="header-anchor" href="#三-可选链的注意事项" aria-label="Permalink to &quot;三. 可选链的注意事项&quot;">​</a></h2><p>使用 JavaScript 的可选链操作符 <code>?.</code> 时，有一些注意事项，下面是我总结的这些注意事项的详细分析：</p><h3 id="_1-连续使用" tabindex="-1">1. 连续使用 <a class="header-anchor" href="#_1-连续使用" aria-label="Permalink to &quot;1. 连续使用&quot;">​</a></h3><ul><li><p>可选链操作符 <code>?.</code> 可以在链式访问的任意点位上进行空值检查，但是过于频繁的使用可能会导致代码的可读性下降。</p></li><li><p>应根据实际情况选择在哪些点位上使用可选链操作符，以保持代码的简洁性和可维护性。</p></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  address: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    city: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;New York&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    apartment: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      number: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 例子1: 连续使用可选链操作符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj?.address?.apartment?.number) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 123</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 例子2: 仅在需要的位置使用可选链操作符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj.address?.apartment?.number) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 123</span></span></code></pre></div><h3 id="_2-仅适用于访问操作" tabindex="-1">2. 仅适用于访问操作 <a class="header-anchor" href="#_2-仅适用于访问操作" aria-label="Permalink to &quot;2. 仅适用于访问操作&quot;">​</a></h3><ul><li>可选链操作符 <code>?.</code> 仅用于访问对象的属性或调用对象的方法，而无法用于赋值操作、删除属性等其他操作。例如，不能使用 <code>obj?.name = &#39;John&#39;</code> 这样的语法。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 无法使用可选链操作符赋值属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj?.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;David&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;John&#39;</span></span></code></pre></div><p>报错了，如下图所示：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8750c2bc49e4441b8c2f357886a84c71~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1300&amp;h=536&amp;s=96815&amp;e=png&amp;b=fefefe" alt="image.png"></p><h3 id="_3-隐式转换问题" tabindex="-1">3. 隐式转换问题 <a class="header-anchor" href="#_3-隐式转换问题" aria-label="Permalink to &quot;3. 隐式转换问题&quot;">​</a></h3><p>使用可选链操作符 <code>?.</code> 进行属性或方法访问时，存在隐式转换问题。</p><p>具体地说，如果对象为 <code>null</code> 或 <code>undefined</code>，那么可选链操作符会隐式将其转换为 <code>undefined</code>，导致无法区分属性或方法本身返回的 <code>undefined</code> 是因对象为 <code>null</code> 或 <code>undefined</code>，还是因为属性或方法本身就是 <code>undefined</code>。</p><p>这种隐式转换可能会导致一些潜在的问题和困惑。例如，如果对象本身为 <code>null</code>，而属性或方法链中某个点位返回的是 <code>undefined</code>，那么使用可选链操作符 <code>?.</code> 访问时，会将两种情况都转换 <code>undefined</code>。</p><p>下面以一个示例来说明选链操作符隐式转换问题：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 无法区分 obj 是 null 还 obj.name 本身就是 undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj?.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span></code></pre></div><p>在上面的示例中，<code>obj</code> 为 <code>null</code>，使用可选链操作符 <code>?.</code> 访问 <code>name</code> 属性时由于对象为 <code>null</code>，解释器会将其视为 <code>undefined</code>，因此结果会是 <code>undefined</code>。</p><p>要解决这个隐转换问题，你可以通过使用严格相等算符（===）来手动检查对象是否为 <code>null</code> 或 <code>undefined</code>。</p><p>下面是一个示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用严格相等运算符检查 obj 是否为 null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// null</span></span></code></pre></div><p>在上面的示例中，我们使用严格相等运算符（===）将 <code>obj</code> 与 <code>null</code> 进行比较，如果相等我们显式地将结果设置为 <code>null</code>，否则继续访问 <code>name</code> 属性。</p><blockquote><p>需要注意的是，为了代码的可读性和简洁性，使用可选链操作符 <code>?.</code> 是更为常见和推荐的做法。只有在需要区分对象为 <code>null</code>，还是属性或方法为 <code>undefined</code>的时候，才需要手动进行判断和处理。</p></blockquote><h2 id="四-特殊情况" tabindex="-1">四. 特殊情况 <a class="header-anchor" href="#四-特殊情况" aria-label="Permalink to &quot;四. 特殊情况&quot;">​</a></h2><p>当可选链操作符 <code>?.</code> 与圆括号 <code>()</code> 和方括号 <code>[]</code> 结合使用时，可以处理更复杂的情况。下面是一些特殊情况的示例代码分析：</p><h3 id="_1-函数调用和可选链" tabindex="-1">1. 函数调用和可选链 <a class="header-anchor" href="#_1-函数调用和可选链" aria-label="Permalink to &quot;1. 函数调用和可选链&quot;">​</a></h3><p>使用可选链操作符 <code>?.</code> 调用了 <code>obj</code> 对象中的 <code>method</code> 方法。如果 <code>obj</code> 或 <code>method</code> 中的任何一个为 <code>null</code> 或 <code>undefined</code>，那么整个表达式会短路并返回 <code>undefined</code>，后续的函数调用不会发生。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用可选链操作符调用可能为 null 或 undefined 的函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?.() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: &quot;Hello, World!&quot;</span></span></code></pre></div><h3 id="_2-数组索引和可选链" tabindex="-1">2. 数组索引和可选链 <a class="header-anchor" href="#_2-数组索引和可选链" aria-label="Permalink to &quot;2. 数组索引和可选链&quot;">​</a></h3><p>使用可选链操作符 <code>?.</code> 访问了数组 <code>arr</code> 中的索引值。如果 <code>arr</code> 为 <code>null</code> 或 <code>undefined</code>，那么整个表达式会返回 <code>undefined</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用可选链操作符访问可能为 null 或 undefined 的数组索引</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr?.[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr?.[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: undefined</span></span></code></pre></div><p><strong>数组索引连续使用可选链</strong></p><p>使用选链操作符 <code>?.</code> 连续访问数组 <code>arr</code> 中的索引值，并进一步访问了该索引的对象中的 <code>name</code> 属性。如果任意一个索引位置的对象为<code>null</code> 或 <code>undefined</code>，那么整个表达式会返回 <code>undefined</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [{ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alice&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Bob&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Charlie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//可选链操作符的续数组索引</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr?.[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: &quot;Bob&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr?.[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: undefined</span></span></code></pre></div><h3 id="_3-总结" tabindex="-1">3. 总结 <a class="header-anchor" href="#_3-总结" aria-label="Permalink to &quot;3. 总结&quot;">​</a></h3><p>通过以上示例，我们可以看到可选链操作符 <code>?.</code> 与括号 <code>()</code> 和方括号 <code>[]</code> 的结合使用，可以更灵活处理复杂的函数调用和数组索引操作，避免因为 <code>null</code> <code>undefined</code> 值而引发错误。</p><h2 id="五-使用技巧" tabindex="-1">五. 使用技巧 <a class="header-anchor" href="#五-使用技巧" aria-label="Permalink to &quot;五. 使用技巧&quot;">​</a></h2><p>在 JavaScript 中，可选链操作符 <code>?.</code> 与自定义返回值可以结合使用。你可以使用可选链操作符 <code>?.</code> 来处理可能为 <code>null</code> 或 <code>undefined</code> 的属性或方法，并在发生短路时返回自定义的返回值。以下是一个示例代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alice&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用可选链操作符获取可能为 null 或 undefined 的属性，并指定自定义返回值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj?.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Unknown&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj?.address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Unknown&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: &quot;Alice&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(address) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: &quot;Unknown&quot;</span></span></code></pre></div><p>在上面的示例中，我们使用可选链操作符 <code>?.</code> 来获取 <code>obj</code> 对象的属性。如果 <code>obj</code> 对象不存在或属性不存在，那么整个表达式会短路并返回 <code>undefined</code>。通过使用空值合并操作符 <code>??</code>，我们可以指定自定义的返回值，在发生短路时返回该值。</p><p>在示例代码中，<code>name</code> 属性存在，因此 <code>name</code> 变量的值为 <code>&quot;Alice&quot;</code>。而 <code>address</code> 属性不存在，所以 <code>address</code> 变量的值为自定义的返回值 <code>&quot;Unknown&quot;</code>。</p><p>通过这种方式，我们可以灵活地处理可能为 <code>null</code> 或 <code>undefined</code> 的属性，并使用自定义的返回值来代替未定义的值。这对于避免引发错误和提供默认值非常有用。</p><h2 id="六-总结" tabindex="-1">六. 总结 <a class="header-anchor" href="#六-总结" aria-label="Permalink to &quot;六. 总结&quot;">​</a></h2><p>可选链运算符 <code>?.</code> 是编程开发中一个非常实用且强大的特性，它使我们能够更好地处理那些可能为空或未定义的属性或方法。</p><p>在 JavaScript 开发中，处理对象的属性和方法时，我们经常需要检查它们是否存在，以避免因为属性或方法不存在而导致的 TypeError 错误。可选链运算符的出现，为我们提供了一种简洁、安全且优雅的方式来处理这样的情况。</p><p>通过使用可选链运算符 <code>?.</code>，我们可以轻松地链式访问对象的属性，而不必手动进行繁琐的存在性检查。这不仅使我们的代码更加简洁，同时还提高了代码的可读性和可维护性。它使开发人员能够专注于业务逻辑，而不必过多地关注每一个属性是否存在。</p><p>总的来说，可选链运算符 <code>?.</code> 简化了代码中对于存在性检查的处理，减少了冗余代码的编写，提高了开发效率。通过合理使用可选链运算符，我们可以编写更加健壮、可维护且易于理解的代码。</p><p>希望本篇文章能够对你对可选链运算符有一个全面的认识，并在实际项目中充分利用它的优势。 Happy coding！</p>`,80);function k(d,o,c,r,E,g){const s=p("ArticleFooter");return l(),a("div",null,[t,n(s,{link:["juejin::https://juejin.cn/post/7305235970285223947","weixin::https://mp.weixin.qq.com/s/fibyfDLEmc0upoXe5e0B0A"]},null,8,["link"])])}const F=i(h,[["render",k]]);export{u as __pageData,F as default};
