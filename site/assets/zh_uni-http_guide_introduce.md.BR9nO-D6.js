import{_ as s,c as i,o as a,aU as n}from"./chunks/framework.CpXV_ol5.js";const u=JSON.parse('{"title":"介绍","description":"","frontmatter":{"title":"介绍"},"headers":[],"relativePath":"zh/uni-http/guide/introduce.md","filePath":"zh/uni-http/guide/introduce.md","lastUpdated":1715225520000}'),t={name:"zh/uni-http/guide/introduce.md"},e=n(`<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><h2 id="_1-前言" tabindex="-1">1. 前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to &quot;1. 前言&quot;">​</a></h2><p>在开发 uni-app 项目时，我们经常需要对接后端接口进行数据请求。虽然 uni-app 框架本身提供了<code>uni.request</code> 用于发起请求，但在实际项目中，我们往往会封装一些请求库来简化请求的操作，提高代码复用性和可维护性。</p><p>本文将介绍基于 <code>uni.request</code> 实现一款小而美的请求工具，通过大约 100 行代码的实现，为 uni-app 项目打造一个简洁高效的请求库。</p><h2 id="_2-为什么要开发请求库" tabindex="-1">2. 为什么要开发请求库 <a class="header-anchor" href="#_2-为什么要开发请求库" aria-label="Permalink to &quot;2. 为什么要开发请求库&quot;">​</a></h2><p>在 uni-app 中使用 <code>uni.request</code> 来发起请求，但这种直接调用 <code>uni.request</code> 的方式在实际开发中存在一些不足之处，比如请求逻辑过于分散、请求参数拼接繁琐等。因此，我们希望通过封装一个简单的请求库来优化这一过程。</p><p>在 uni-app 使用 <code>uni.request</code> 的方式：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // url 仅为示例，并非真实接口地址。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.example.com/request&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uni.request&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  header: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 自定义请求头信息</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;custom-header&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.data);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;request success&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>以上的这种请求方式是在 uni-app 项目中最常见的代码书写方式，很简单也很好理解，但是无法支持 promise API 式的请求，不支持请求和响应拦截器，同时也不支持全局的变量配置，逻辑分散，不便于维护！</p><blockquote><p>不过我最近看官方文档，官方已经对部分 API 进行了 Promise 封装</p><p>详情参考：<a href="https://uniapp.dcloud.net.cn/api/#promise-%E5%B0%81%E8%A3%85" target="_blank" rel="noreferrer">官方 Promise - 封装</a></p></blockquote><div class="warning custom-block"><p class="custom-block-title">注意</p><ol><li>在使用本工具前，要求你至少会Vue、uni-app的基本使用和基本配置，然后再查看本文档。</li><li>本文档仅负责介绍uni-http相关使用，更多其他相关请移步 <a href="https://cn.vuejs.org/" target="_blank" rel="noreferrer">Vue文档</a>、<a href="https://uniapp.dcloud.io/" target="_blank" rel="noreferrer">uni-app文档</a></li></ol></div><h2 id="_3-适用领域" tabindex="-1">3. 适用领域 <a class="header-anchor" href="#_3-适用领域" aria-label="Permalink to &quot;3. 适用领域&quot;">​</a></h2><ul><li><p><strong>App开发</strong></p></li><li><p><strong>HTML5网站开发</strong></p></li><li><p><strong>微信小程序开发</strong></p></li></ul><h2 id="_4-版权信息" tabindex="-1">4. 版权信息 <a class="header-anchor" href="#_4-版权信息" aria-label="Permalink to &quot;4. 版权信息&quot;">​</a></h2><blockquote><p>uni-http遵循MIT开源协议，但禁止将此应用到非法的领域，如因此产生纠纷等法律问题，uni-http不承担任何责任。</p></blockquote>`,15),p=[e];function l(h,r,k,o,d,E){return a(),i("div",null,p)}const g=s(t,[["render",l]]);export{u as __pageData,g as default};
