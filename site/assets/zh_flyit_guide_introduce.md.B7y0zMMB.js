import{_ as r,c as l,l as e,I as a,aU as o,o as p,E as c}from"./chunks/framework.CpXV_ol5.js";const x=JSON.parse('{"title":"介绍","description":"","frontmatter":{"title":"介绍"},"headers":[],"relativePath":"zh/flyit/guide/introduce.md","filePath":"zh/flyit/guide/introduce.md","lastUpdated":1718183934000}'),i={name:"zh/flyit/guide/introduce.md"},d=o('<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><blockquote><p>可自动生成前端代码层的工具类，目的就是要解放你的双手，化繁为简，可降低代码量 <strong>99%</strong>！</p></blockquote><p>这是一个通用的 <code>TypeScript</code> 包，原则上你可以在任何能运行 <code>JavaScript</code> 的地方使用，不依赖于任何的前端框架！</p><p>目的在于省略某些大量重复代码，少量配置化代码，即可实现极速开发体验！</p><h2 id="_1-flyhttp" tabindex="-1">1. FlyHttp <a class="header-anchor" href="#_1-flyhttp" aria-label="Permalink to &quot;1. FlyHttp&quot;">​</a></h2><blockquote><p>FlyHttp 是一个自动生成前端 <code>service</code> 层代码的工具类！</p></blockquote><p>在开发前端项目时，尤其是目前绝大多数的项目都是前后端分离式开发的形式，因此我们经常需要对接后端接口，进行前后端交互。而基于这些，就出现了琳琅满目的前端请求框架！</p><p>从最初的 <code>XMLHttpRequest</code> 到 <code>ajax</code>、<code>Fetch API</code> ，再到 <code>axios</code>，各种各样的搭配不同框架的网络请求库应运而生，它们服务于不同的前端框架，进行优秀的前后端数据交互，给我们前端开发者提供了便利性。</p><p>虽然很方便，但是我却不满足，因为不喜欢折腾的程序员不是好将军，写代码时，还是时常问一下自己，是否还能再方便些？</p><p>因为网络请求通常就是最常用的 <code>GET</code> <code>PUT</code> <code>POST</code> <code>DELETE</code> <code>PATCH</code> 这几种，而且大多数中声明的请求方法都是重复的，是有据可循的，因此我想从这方面着手，能否优化请求流程，解放双手，进一步为开发提供便利性！</p><p><strong>CTRL + CV</strong> 的开发模式，我们一定要<strong>摒弃</strong>！</p><p><code>FlyHttp</code> 是 <code>Flyit</code> 工具库中的 <code>http</code> 模块，核心目的就是要省略某些重复的代码，部分配置化实现极致开发体验！</p><h2 id="_2-适用领域" tabindex="-1">2. 适用领域 <a class="header-anchor" href="#_2-适用领域" aria-label="Permalink to &quot;2. 适用领域&quot;">​</a></h2><p>这是一个通用的 <code>TypeScript</code> 包，适用于任何在前端开发中，原则上你可以在任何能运行 <code>JavaScript</code> 的地方使用，与前端框架无关，可全端通用，包括但不限于使用以下方式开发：</p>',14),n=o('<h2 id="_3-说明" tabindex="-1">3. 说明 <a class="header-anchor" href="#_3-说明" aria-label="Permalink to &quot;3. 说明&quot;">​</a></h2><ol><li><p>在使用本工具前，要求你至少了解相关框架的不同网络请求库的使用方式，比如：<code>axios</code>、<code>ajax</code>、<code>Fetch API</code>的基本使用和基本配置，然后再查看本文档。</p></li><li><p>本文档仅负责介绍 <code>Flyit</code> 工具的相关使用，如需了解更多其他相关内容，请移步相关的官方文档：</p></li></ol><ul><li><p><a href="https://cn.vuejs.org/" target="_blank" rel="noreferrer">Vue.js 官方文档</a></p></li><li><p><a href="https://uniapp.dcloud.net.cn/api/request/request.html#request" target="_blank" rel="noreferrer">uni-app request 官方文档</a></p></li><li><p><a href="https://axios-http.com/zh/" target="_blank" rel="noreferrer">Axios 请求库官方文档</a></p></li><li><p><a href="https://javascript.info/fetch-api" target="_blank" rel="noreferrer">Fetch API</a></p></li><li><p><a href="https://api.jquery.com/jQuery.ajax/" target="_blank" rel="noreferrer">jQuery ajax</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noreferrer">XMLHttpRequest MDN</a></p></li></ul><h2 id="_4-版权信息" tabindex="-1">4. 版权信息 <a class="header-anchor" href="#_4-版权信息" aria-label="Permalink to &quot;4. 版权信息&quot;">​</a></h2><blockquote><p>flyit 遵循 MIT 开源协议，但禁止将此应用到非法的领域，如因此产生纠纷等法律问题，flyit 不承担任何责任。</p></blockquote>',5);function s(h,u,_,f,y,q){const t=c("Badge");return p(),l("div",null,[d,e("ul",null,[e("li",null,[a(t,{type:"tip",text:"JavaScript"})]),e("li",null,[a(t,{type:"tip",text:"TypeScript"})]),e("li",null,[a(t,{type:"tip",text:"Vue.js"})]),e("li",null,[a(t,{type:"tip",text:"React.js"})]),e("li",null,[a(t,{type:"tip",text:"Angular.js"})]),e("li",null,[a(t,{type:"tip",text:"uni-app"})]),e("li",null,[a(t,{type:"tip",text:"小程序"})])]),n])}const T=r(i,[["render",s]]);export{x as __pageData,T as default};
