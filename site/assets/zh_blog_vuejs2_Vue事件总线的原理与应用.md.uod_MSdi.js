import{_ as i,c as a,I as n,aU as l,o as t,E as e}from"./chunks/framework.CpXV_ol5.js";const u=JSON.parse('{"title":"组件通信的桥梁：探索Vue事件总线的原理与应用","description":"","frontmatter":{"title":"组件通信的桥梁：探索Vue事件总线的原理与应用"},"headers":[],"relativePath":"zh/blog/vuejs2/Vue事件总线的原理与应用.md","filePath":"zh/blog/vuejs2/Vue事件总线的原理与应用.md","lastUpdated":1727083629000}'),p={name:"zh/blog/vuejs2/Vue事件总线的原理与应用.md"},h=l(`<h1 id="组件通信的桥梁-探索vue事件总线的原理与应用" tabindex="-1">组件通信的桥梁：探索Vue事件总线的原理与应用 <a class="header-anchor" href="#组件通信的桥梁-探索vue事件总线的原理与应用" aria-label="Permalink to &quot;组件通信的桥梁：探索Vue事件总线的原理与应用&quot;">​</a></h1><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/31313d498acb4722b93c5b223013281a~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1606&amp;h=722&amp;s=209796&amp;e=png&amp;b=fef2f1" alt="image.png"></p><h1 id="vue-事件总线-组件通信的桥梁" tabindex="-1">Vue 事件总线 - 组件通信的桥梁 <a class="header-anchor" href="#vue-事件总线-组件通信的桥梁" aria-label="Permalink to &quot;Vue 事件总线 - 组件通信的桥梁&quot;">​</a></h1><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>在 <code>Vue.js</code> 开发中，<strong>组件通信</strong>是一个重要的话题。Vue 提供了多种方式来实现不同组件之间的通信，譬如<code>Props</code>、 <code>$emit</code>、<code>Ref</code>实例、<code>Vuex</code>状态管理及事件总线等等，可谓是五花八门，它们之间使用各有优缺点，主要取决于你的使用场景。本篇文章我们主要介绍的就是事件总线（<code>Event Bus</code>）。<strong>事件总线</strong>可以被看作是一个<strong>中央调度器</strong>，用于在应用程序的各个组件之间<strong>传递消息和数据</strong>。通过使用事件总线，我们简化组件之间的通信，降低耦合度，并提高代码的可维护性和复用性。</p><p>本篇文章将重点介绍 Vue 中事件总线的实现以及使用事件总线进行组件之间的通信。我们将了解如何创建一个事件总线实例，如何在组件中发送和接收事件，以及在实际开发中如何使用事件总线来处理常见的通信需求。通过学习事件总线的使用方法，你将能够更好地组织和管理组件之间的通信，提高开发效率并减少代码冗余。</p><h2 id="一-认识事件总线" tabindex="-1">一. 认识事件总线 <a class="header-anchor" href="#一-认识事件总线" aria-label="Permalink to &quot;一. 认识事件总线&quot;">​</a></h2><h3 id="什么是事件总线" tabindex="-1">什么是事件总线 <a class="header-anchor" href="#什么是事件总线" aria-label="Permalink to &quot;什么是事件总线&quot;">​</a></h3><p>在 Vue 中，事件总线（<code>Event Bus</code>）是一个用于在各个组件之间进行通信的机制。它是一个独立的 Vue 实例，可以被任何组件引用和使用。事件总线的作用是提供一个中央调度器，用于发送和接收事件以及在组件之间传递数据。</p><h3 id="事件总线的作用" tabindex="-1">事件总线的作用 <a class="header-anchor" href="#事件总线的作用" aria-label="Permalink to &quot;事件总线的作用&quot;">​</a></h3><ol><li><p><strong>中央调度器</strong>：事件总线充当了一个中央调度器的角色，集中处理组件之间的通信。通过事件总线，组件可以发送和接收事件，并通过事件传递数据。</p></li><li><p><strong>解耦组件</strong>：事件总线的使用可以降低组件之间的耦合度。组件不需要直接引或了解其他组件存在，只需要和事件总线进行通信，增加了组件的独立性和可复用性。</p></li><li><p><strong>灵活的通信方式</strong>：事件总线提供了一种灵活的通信方式，可以用于父子组件之间的通信，也可以用于非父子组件之间的通信。通过发送和监听自定义的事件，组件可以自由地传递数据和触发特定的操作。</p></li><li><p><strong>跨组件通信</strong>：事件总线可以让非直接关联的组件进行通信。当需要在不同的组件之间进行数据传递或触发特定的行为时，事件总线可以作为一个桥梁，连接这些组件。</p></li></ol><p>Vue 事件总线是一个强大的工具，可以帮助我们更好地组织和管理组件之间的通信。通过合理利用事件总线，我们可以提高开发效率，减少代码冗余，并促进组件的复用和解耦。</p><h2 id="二-事件总线的使用场景" tabindex="-1">二. 事件总线的使用场景 <a class="header-anchor" href="#二-事件总线的使用场景" aria-label="Permalink to &quot;二. 事件总线的使用场景&quot;">​</a></h2><p>在 Vue 中，事件总线的使用场景非常广泛，适用于各种组件之间的通信需求。以下是一些常见的使用场景：</p><ol><li><p><strong>父子组件通信</strong></p><ul><li>可以使用事件总线，但不建议，通过<code>props</code>和<code>$emit</code>可轻松实现。</li></ul></li><li><p><strong>兄弟组件通信</strong></p><ul><li>当两个兄弟组件之间没有直接的父子关系时，可以使用事件总线来进行通信。一个组件触发事件，另一个组件监听该事件并做出相应的处理。</li></ul></li><li><p><strong>非父子组件通信</strong></p><ul><li>在一个较大的应用程序中，可能存在多个独立的组件，它们没有明确的父子关系。通过事件总线，这些组件可以进行通信，将相关的信息传递给其他组件。</li></ul></li><li><p><strong>跨级组件通信</strong></p><ul><li>当组件嵌套层次较深，需要在祖先和后代组件之间进行通信时，可以使用事件总线。祖先组件触发事件，后代组件通过事件总线订阅并获取通知。</li></ul></li><li><p><strong>跨模块通信</strong></p><ul><li>在 Vue 插件中，插件和组件之间需要进行通信。通过事件总线，插件可以发送事件，而组件可以通过监听事件来接收数据或进行相应操作。</li><li>当应用程序拆分为多个模块时，不同模块中的组件可能需要进行通信。事件总线提供了一种跨模块的通信机制，组件在不同模块间触发和监听事件。</li></ul></li><li><p><strong>跨越路由的通信</strong></p><ul><li>在路由切换时，组件之间可能需要进行通信。通过事件总线，可以实现不同路由下的组件之间的数据传递和操作触发。</li></ul></li><li><p><strong>组件解耦</strong></p><ul><li>通过使用事件总线，可以将组件之间的直接依赖关系解耦，使组件更加独立和可复用。组件只需要关注自身的功能，而不用关心其他组件的实现细节。</li></ul></li></ol><h3 id="使用注意事项" tabindex="-1">使用注意事项 <a class="header-anchor" href="#使用注意事项" aria-label="Permalink to &quot;使用注意事项&quot;">​</a></h3><p>在使用事件总线时，应避免滥用和过度依赖，事件总线的滥用可能导致组件之间的关系变得混乱。</p><p>在设计组件架构时，需要权衡是否真正需要使用事件总线。合理使用事件总线可以提高代码的灵活性和可维护性，但滥用可能导致代码的复杂性和不可预测性增加。</p><p>在一些复杂的场景中，也可以考虑使用更强大的状态管理模式，如 <code>Vuex</code>来管理组件之间的通信和共享状态。</p><h2 id="三-如何实现一个事件总线" tabindex="-1">三. 如何实现一个事件总线 <a class="header-anchor" href="#三-如何实现一个事件总线" aria-label="Permalink to &quot;三. 如何实现一个事件总线&quot;">​</a></h2><h3 id="_1-创建事件总线" tabindex="-1">1. 创建事件总线 <a class="header-anchor" href="#_1-创建事件总线" aria-label="Permalink to &quot;1. 创建事件总线&quot;">​</a></h3><ul><li>在 Vue 实例外部创建一个新的 Vue 实例作为事件总线</li><li>将事件总线实例导出在各个组件中入</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// event-bus.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EventBus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EventBus</span></span></code></pre></div><h3 id="_2-发送事件" tabindex="-1">2. 发送事件 <a class="header-anchor" href="#_2-发送事件" aria-label="Permalink to &quot;2. 发送事件&quot;">​</a></h3><ul><li>在发送事件的组件中通过事件总线实例的 <code>$emit</code> 方法触发一个自定义事件</li><li>将需要传递的数据作为参数传递给自定义事件</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ComponentA.vue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EventBus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;event-bus.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sendData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      EventBus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-event&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-接收事件" tabindex="-1">3. 接收事件 <a class="header-anchor" href="#_3-接收事件" aria-label="Permalink to &quot;3. 接收事件&quot;">​</a></h3><ul><li>在接收事件的组件中通过事件总线实例的 <code>$on</code> 方法监听指定的自定义事件</li><li>在事件回调函数中获取传递的数据并进行处理</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ComponentB.vue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EventBus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;event-bus.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EventBus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-event&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.handleEvent)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handleEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 处理接收到的事件数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_4-清除事件监听" tabindex="-1">4. 清除事件监听 <a class="header-anchor" href="#_4-清除事件监听" aria-label="Permalink to &quot;4. 清除事件监听&quot;">​</a></h3><ul><li>在组件销毁前，通过事件总线实例的 <code>$off</code> 方法清除对指定自定义事件的监听</li><li>避免内存泄漏和不必要的事件监听</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ComponentB.vue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EventBus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;event-bus.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EventBus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-event&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.handleEvent)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  beforeDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EventBus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$off</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-event&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.handleEvent)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handleEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 处理接收到的事件数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过以上步骤，我们就可以在 Vue 中成功实现一个简单的事件总线。在需要跨组件通信的地方，使用事件总线发送和接收事件，进行数据传递和操作触发。尽管事件总线是一个简单但强大的工具，但在应用中使用时需要注意避免滥用和过度依赖，确保代码的可维护性和可读性。</p><h2 id="四-经典场景示例" tabindex="-1">四. 经典场景示例 <a class="header-anchor" href="#四-经典场景示例" aria-label="Permalink to &quot;四. 经典场景示例&quot;">​</a></h2><p>以下是一个经典示例，演示如何使用 Vue 的事件总线实现组件之间的通信。</p><p>首先，创建一个主文件（例如<code>bus.js</code>）中构建一个 vue 实例，并将其作为事件总线。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>在发送组件中，你可以将数据发送到事件总线，例如：<strong>一个按钮组件发送消息</strong>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> @click=&quot;sendMessage&quot;&gt;发送消息&lt;/button&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&lt;/template&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&lt;script&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { bus } </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@/main.js&quot;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">export</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sendMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      bus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Vue2!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&lt;/script&gt;</span></span></code></pre></div><p>在接收组件中，你可以监听事件总线，并获取发送的数据，例如：<strong>一个消息展示组件</strong>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ message }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import { bus } from &quot;@/bus.js&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">export default {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    return {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bus.$on(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (data) =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   beforeDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bus.$off(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/script&gt;</span></span></code></pre></div><p>在上述示例中，发送组件通过<code>bus.$emit</code>方法发送了一个名为<code>message</code>的事件，并传递了一个字符串<code>&#39;Hello, Event Bus!&#39;</code>作为数据。接收组件使用<code>bus.$on</code>方法监听了相同的事件，并将接收到的数据赋值给<code>message</code>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97988b600299457c918056c254d0c10a~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1177&amp;h=247&amp;s=90624&amp;e=gif&amp;f=39&amp;b=fefefe" alt="record.gif"></p><p>这样，在发送组件点击按钮时，事件总线会触发<code>message</code>事件，并将数据传递接收组件，接收组件会相应地显示的消息。如果你使用<code>$off</code>方法解除监听后，将无法接收到<code>message</code>事件。效果如上图所示。</p><p>通过这种方式，我们可以实现简单的组件间通信，无论它们在组件树中的位置如何。这为我们在 Vue 应用中实现灵活的组件通信提供便利。</p><blockquote><p>注意：在组件销毁时，切记解绑事件监听，以防止内存泄漏。在 <code>beforeDestroy</code> 钩子中使用<code>$off</code>方法解绑事件。</p></blockquote><p>以上是最简单的一个组件通信的示例，万变不离其宗，其他的所有场景都将是它的变种，关键是我们需要理解它的思想，只有完全理解了它，才会在其他的场景下应用自如！</p><h2 id="五-注意事项与优化" tabindex="-1">五. 注意事项与优化 <a class="header-anchor" href="#五-注意事项与优化" aria-label="Permalink to &quot;五. 注意事项与优化&quot;">​</a></h2><p>在使用事件总线用于组件通信时，有几个注意事项和优化的建议：</p><h3 id="注意事项" tabindex="-1">注意事项： <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项：&quot;">​</a></h3><ol><li><p><strong>命名冲突</strong>：由于事件总线是一个全局的对象，事件的命名需谨慎考虑，以避免不组件之间的事件冲突。建议使用具唯一性的命名空间前缀区分不同的事件。</p></li><li><p><strong>组件销毁时解绑</strong>：在组件销毁时，记解绑事件监听，以防止内存泄漏。可以在组件的 <code>beforeDestroy</code> 钩子中使用<code>$off</code>方法解绑事件。</p></li><li><p><strong>注意事件的传参</strong>：在发送事件时，可以通过参数传递数据。但请确保传递的数据是简单且不可变的，避免直接传递引用类型的数据，以免造成数据不一致或意外的修改。</p></li><li><p><strong>慎用全局事件</strong>：全局事件有很大的便利性，但也容易造成不可预测的问题。在使用事件线时，尽量避免滥用全局事件，可以考虑使用更明确的通信方式，如父子组件通信、<code>props</code> 和 <code>$emit</code> 等。</p></li></ol><h3 id="优化建议" tabindex="-1">优化建议： <a class="header-anchor" href="#优化建议" aria-label="Permalink to &quot;优化建议：&quot;">​</a></h3><ol><li><p><strong>有选择地使用事件总线</strong>：事件总线是一种非常灵活的通信方式，但在使用时需要权衡是否真正需要使用事件总线，以及是否有更好的替代方案，如 <code>Vuex</code> 状态管理、<code>provide/inject</code> 等。</p></li><li><p><strong>减少事件的传播范围</strong>：在组件的父子关系中，尽量将事件的传播范围限制在要的组件之间，避免事件冒泡到整个应用程序。</p></li><li><p><strong>避免频繁触发大量的事件</strong>：频繁触发大量的事件可能会导致性能问题，特别是在复杂的组件树中。在设计应用程序时，尽量减少事件的触发次数，考虑合并事件或使用其他方式进行通信。</p></li></ol><p>通过遵循以上的注意事项和优化建议，可以更好地使用 Vue 的事件总线，并提高应用程序的性能和可维护。</p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>总结来说，Vue 的事件总线是一个简单而强大的工具，用于实现组件间的通信。通过事件总线，我们可以轻松地在不同组件之间传递数据和触发操作，提高应用程序的灵活性和可扩展性。</p><p>然而，在使用事件总线时，我们也需要注意一些事项和进行优化。首先，避免命名冲突和滥用全局事件，确保事件的独立性和可维护性。其次，及时解绑事件监听，避免内存泄漏问题。此外，注意传递数据的方式，避免直接传递引用类型数据，防止数据不一致或意外修改。最后，有选择地使用事件总线，考虑某些特定场景下是否有更好的替代方案，如 <code>Vuex</code> 状态管理。</p><p>通过遵循这些注意事项，并根据实际情况进行优化，我们可以更好使用 Vue 的事件总线，提升应用程序的性能和可维护性。</p>`,58);function k(E,r,d,o,g,c){const s=e("ArticleFooter");return t(),a("div",null,[h,n(s,{link:"https://juejin.cn/post/7281601361984569344"})])}const F=i(p,[["render",k]]);export{u as __pageData,F as default};
